{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","path":"libs/titillium-web/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/jquery/3.3.1/jquery.min.js","path":"libs/jquery/3.3.1/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1531251823968},{"_id":"themes/hueman/LICENSE","hash":"f0c7cd0dcb6f00b98393878068ff3e6bf5f321f1","modified":1531251823968},{"_id":"themes/hueman/README.md","hash":"e40d2179c43b418e7763306e1fee45062fac0c57","modified":1531251823968},{"_id":"themes/hueman/_config.yml","hash":"888b7e95ce3318d58200c131436cde78bd218108","modified":1532027904798},{"_id":"themes/hueman/package.json","hash":"f42b4135eaceb5ae70f55e8b6199cfa3651d43e0","modified":1531251824026},{"_id":"themes/hueman/.github/ISSUE_TEMPLATE.md","hash":"dc9c3910279551bc8515abf9fdf9d98d3b53f852","modified":1531251823968},{"_id":"themes/hueman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1531251823949},{"_id":"themes/hueman/.git/config","hash":"ec38e5c37c8603d1e49c3676ce4791cbce6df984","modified":1531251823955},{"_id":"themes/hueman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1531251781015},{"_id":"themes/hueman/.git/index","hash":"a0f24ff977e5f60fa0563c0f7018282892b7d15a","modified":1532028575552},{"_id":"themes/hueman/.git/packed-refs","hash":"313737d45fb77aae10cf5117392618a4450a87bc","modified":1531251823928},{"_id":"themes/hueman/languages/ca.yml","hash":"d88625a06b434db3b0ed37b0d5f64ee31e91c077","modified":1531251823968},{"_id":"themes/hueman/languages/en.yml","hash":"3a93280606196c642eca66b58b149bf648d71724","modified":1531251823972},{"_id":"themes/hueman/languages/es.yml","hash":"92bbf2ebd70a08d5011e5c8c31597f2dd1ea9901","modified":1531251823972},{"_id":"themes/hueman/languages/fr.yml","hash":"ed73fdd6adc49631eec1a163397e5adbaa91cd9e","modified":1531251823972},{"_id":"themes/hueman/languages/hu.yml","hash":"1a503b6667515a4027850d3c645d34fa2b496411","modified":1531251823972},{"_id":"themes/hueman/languages/ja.yml","hash":"64389f836e1965a55e85e57384b6b7276020f769","modified":1531251823973},{"_id":"themes/hueman/languages/id.yml","hash":"dfd5d4ddf4797385093a8a569b71b18aa902e0c2","modified":1531251823972},{"_id":"themes/hueman/languages/ko.yml","hash":"e8dbf0a133dab72ea0ae5b98663f7086a83d4771","modified":1531251823983},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"4caa8df5aba98b23672bbe7d70674f5f67744b95","modified":1531251823983},{"_id":"themes/hueman/languages/ru.yml","hash":"fb81066411e37a2472797d4d40a7c409d768d34a","modified":1531251823984},{"_id":"themes/hueman/languages/tr.yml","hash":"e28af4a5b366e116bbbfcd21b45c9c6996f6bfe7","modified":1531251823984},{"_id":"themes/hueman/languages/vi.yml","hash":"4f5d30e07dc3b32a605ffe2a546365157353836d","modified":1531251823984},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"6059406a2ae4c0aeea63c0e67ec9a53a01bf1fcb","modified":1531251823984},{"_id":"themes/hueman/languages/zh-TW.yml","hash":"a674d2d5b946e2f7e1441b13e1b41a95999b02da","modified":1531251823984},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1531251823984},{"_id":"themes/hueman/layout/category.ejs","hash":"de99b00563d7c7b00cc7fd4e74e77c171891fbdc","modified":1531251823988},{"_id":"themes/hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1531251824006},{"_id":"themes/hueman/layout/layout.ejs","hash":"4376f9a13a19551ec72aa41b824c635f0a847c55","modified":1531251824006},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1531251824006},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1532028574089},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1531251824017},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"1fe763bf492813dd51276d48dd61a1855b40a53e","modified":1531251824026},{"_id":"themes/hueman/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1531251824026},{"_id":"themes/hueman/scripts/excerpt.js","hash":"61118ffd53158c6620010f6362752745f8372469","modified":1531251824026},{"_id":"source/_drafts/build-dotnet-core-class-libraries.md","hash":"174748f04341653487e03b060b76f6485c3ce0b9","modified":1531252146282},{"_id":"source/_drafts/genfu-aspnet-core-web-api-mvc-6.md","hash":"78b915b3ea454739d2ac034729069373e5b0c727","modified":1531252146282},{"_id":"source/html-sitemap/index.md","hash":"5f97cbb1ccb365114fc8828266c5cfb9c008fe8c","modified":1531252146281},{"_id":"source/_posts/angular-2-asp-net-core-visual-studio-code-typescript.md","hash":"9c3ff7b4f6938e5e8853a2e6a7ee42b63afd4977","modified":1531252146280},{"_id":"source/_posts/angular-2-in-asp-net-5-typescript-visual-studio-2015.md","hash":"58ec16aca43f1f0162d1f1975cb41d38a1b666b7","modified":1531252146280},{"_id":"source/_posts/angular-asp-net-mvc-5-angular-cli-visual-studio-2017.md","hash":"931d1a5b44f0072c6338e05a155bbe0e014560f6","modified":1531252146282},{"_id":"source/_posts/angular-material-2-angular-cli-webpack.md","hash":"93d9f4e13f259c994275cbfce7d32af6d63c516d","modified":1531252146281},{"_id":"source/_posts/angular-material-angular2-aspnet-core-visual-studio.md","hash":"e5fe4df325b08a5d04218afed1c5d8554c026aa2","modified":1531252146282},{"_id":"source/_posts/asp-net-core-visual-studio-code-yeoman.md","hash":"404d9d55c5481cc5336e4da1c066854157b90a6b","modified":1531252146280},{"_id":"source/_posts/aspnet-core-web-api-entity-framework-core.md","hash":"bcf48b44e7814cc868061ddc68961d9672a63266","modified":1531252146282},{"_id":"source/_posts/basic-types-typescript.md","hash":"4efc7f8cb800296a677156d8fc5b4d840e391654","modified":1531252146281},{"_id":"source/_posts/build-angular-apps-using-angular-2-cli.md","hash":"0e8d320551719d14ec36ed8f0e3a5d9334b27f5d","modified":1531252146281},{"_id":"source/_posts/building-asp-net-core-mvc-angular2-visual-studio.md","hash":"0bd1990b685a02b684c5d03b9fcd21b3cbdea686","modified":1531252146282},{"_id":"source/_posts/building-responsive-ui-using-async-await-csharp.md","hash":"0e6ce5a602e046c747b35246ab780febb62044b0","modified":1531252146277},{"_id":"source/_posts/create-aspnet-mvc-6-web-api-visual-studio-2017.md","hash":"d74ebd4697aa2b304e3c3062ecf11452cfbb5d2d","modified":1531252146280},{"_id":"source/_posts/clean-build-and-rebuild-in-visual-studio.md","hash":"27fffc2b8d63a77d129d9bba4b623e65e5215846","modified":1531252146277},{"_id":"source/_posts/creating-wcf-service-without-svc.md","hash":"57009fea6ff90fe37c8fedde5653b54429c6bd3e","modified":1531252146277},{"_id":"source/_posts/difference-between-asp-net-mvc6-asp-net-mvc5.md","hash":"4ab9f3807b53235c37a5a2f6a3b232c989e6075e","modified":1531252146277},{"_id":"source/_posts/fully-asynchronous-aspnet-core-2-web-api.md","hash":"666021f0cde53f4403fefe720999900c014239a5","modified":1531944493970},{"_id":"source/_posts/installation-sql-server-express-windows-10.md","hash":"944f4c62c2e26dc133d7a29ee099d29c69aa5ecd","modified":1531252146280},{"_id":"source/_posts/three-examples-deferred-immediate-executions-linq-csharp.md","hash":"dc27a46137c17b99c3b041fc7146a5738a5605d9","modified":1531252146277},{"_id":"source/_posts/learning-typescript-with-visual-studio-code.md","hash":"ac94c92cf8cd35fecee8f60e070c09ec6f709216","modified":1531252146280},{"_id":"source/_posts/typescript-in-asp-net-5-using-visual-studio-2015.md","hash":"066d861011944730714b65797de2d8efb0674911","modified":1531252146280},{"_id":"source/_posts/typescript-tutorials-setting-visual-studio-code.md","hash":"fa28d33244086264cbc04f1159f3e70ebe270e85","modified":1531252146281},{"_id":"source/_posts/user-secrets-asp-net-core.md","hash":"94363373f3af4c3be83d04d803a4a96c3b566e75","modified":1531252146281},{"_id":"source/_posts/using-angular-2-asp-net-mvc-5-visual-studio.md","hash":"3e01244ebf8e70658d38c386d4a11ac2d68556a9","modified":1531252146282},{"_id":"source/_posts/using-angular-elements-asp-net-core-angular-cli-visual-studio.md","hash":"060691bcdd42bd7b50cf78f58dbfb9d9ba711874","modified":1531252146282},{"_id":"source/_posts/using-typescript-with-asp-net-mvc5.md","hash":"d6b9c26085d871f48c1ce35013f53d117feef867","modified":1531252146282},{"_id":"source/_posts/write-custom-asp-net-core-middleware-web-api.md","hash":"f3adfc703f54b04970bf6b0945db6263e0b0b339","modified":1531252146281},{"_id":"source/_posts/working-vuejs-asp-net-mvc-5-visual-studio.md","hash":"3c06de80f05f339e3138a3de96f7762c61323614","modified":1531253449524},{"_id":"themes/hueman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1531251781018},{"_id":"themes/hueman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1531251781019},{"_id":"themes/hueman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1531251781020},{"_id":"themes/hueman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1531251781021},{"_id":"themes/hueman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1531251781023},{"_id":"themes/hueman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1531251781052},{"_id":"themes/hueman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1531251781054},{"_id":"themes/hueman/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1531251781055},{"_id":"themes/hueman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1531251781056},{"_id":"themes/hueman/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1531251781058},{"_id":"themes/hueman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1531251781061},{"_id":"themes/hueman/.git/logs/HEAD","hash":"3226776e81e3a23c4ec0f130bb6b7d8ac69af059","modified":1531251823949},{"_id":"themes/hueman/layout/comment/changyan.ejs","hash":"e61355aa3dd818cf0aa0c6d0456f5953236a3635","modified":1531251823988},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"9b6eaf3c6da487012483a6d930d0b50ac4f1a307","modified":1531251823988},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"84988da295ab8c509e24299c2c857d707cf78f77","modified":1531251823988},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1531251823988},{"_id":"themes/hueman/layout/comment/facebook.ejs","hash":"6a53104fc01fd4a7a34b46c2828e76d02cacb0dd","modified":1531251823988},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"abcd299083a456e92ca91707b92b0da0eead325f","modified":1531251823992},{"_id":"themes/hueman/layout/comment/isso.ejs","hash":"b8da0b50fad39ed39f6674c30112fc0b53acd07b","modified":1531251823992},{"_id":"themes/hueman/layout/comment/livere.ejs","hash":"d2d0d8113a5a7d2cddf1d8ce067e07d40874e56c","modified":1531251823992},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"47e8e1001dde153c1528812420335f8484d9e50d","modified":1531251823992},{"_id":"themes/hueman/layout/comment/valine.ejs","hash":"5ebbe64d73c91a08b3fdbe71f6cbd69c05b0feef","modified":1531251823992},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"e5f5561a26343013e57a1f5c049c4f22f878d013","modified":1531251823992},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"424647122986c501165b36a512cb48c392142f51","modified":1531251823996},{"_id":"themes/hueman/layout/common/article.ejs","hash":"dd859d371bd9194786b93ee368538e0b7b7e7bd8","modified":1532029372008},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"1e787b40398f6da1db9505c39bbe6fa70e096cdc","modified":1531251823997},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"1a18f070934ca300a4ae9672f975b6f9aa83b2f0","modified":1531251823997},{"_id":"themes/hueman/layout/common/head.ejs","hash":"8724ca0222477f216a3be73bb1235f28da63cd09","modified":1531251823997},{"_id":"themes/hueman/layout/common/header.ejs","hash":"a27f027fc60d49ca84381a08c7102aa7d3118ec4","modified":1531343985159},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"271ad89a94bbced9f3f7377c145d86b62df0fee9","modified":1531251824005},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"d9f3f3a9d5b02306d0c40eca6ac8b6450f760e36","modified":1531251824005},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"524837b7bbb4bdb681838554c2cb58b19af1d9da","modified":1531341511267},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"24cafe46466aa4b0b0f93e0028e5c977771ea3e5","modified":1531251824006},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"dc075c744e866c3cea8460439953fa2a073d6475","modified":1531251824006},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"6db533bb9d86cccdb1a855818d9c24bd8f268195","modified":1531251824010},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1531251824010},{"_id":"themes/hueman/layout/plugin/statcounter.ejs","hash":"e2fe080dc8f62cba6791bef3d4ecb6454024f2c4","modified":1531251824010},{"_id":"themes/hueman/layout/pwa/index.ejs","hash":"0ca08d5a308a82fbf372821c4f0fdef0df98af78","modified":1531251824010},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"46515988503a8b8dd07d0cf3ccabf519b4fad2d1","modified":1531251824014},{"_id":"themes/hueman/layout/search/index.ejs","hash":"1b232e45234638a08cdc34d33cd7378636649822","modified":1531251824014},{"_id":"themes/hueman/layout/search/insight.ejs","hash":"21ec59e4534ac2417d6b215b6cfe3825245ad340","modified":1531251824015},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1531251824016},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1531251824016},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"015715441fc4075e8c8d8c51f523634c19296bc7","modified":1531251824017},{"_id":"themes/hueman/layout/share/index.ejs","hash":"a0d5e32c68e1e6d3f2f954420bbb48675736b895","modified":1531251824017},{"_id":"themes/hueman/layout/share/default.ejs","hash":"9a12d26f8d01557f69ca403a4b6f96fab7b45bd7","modified":1531251824017},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"038b7d02aa765f6eb222c23356246ee3594b2965","modified":1531251824017},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"4bf2c1433166017450a3e7d265570b34d59195eb","modified":1531251824017},{"_id":"themes/hueman/layout/widget/catalog.ejs","hash":"02c7fe79b53e34f8aa3854c4c205ecfd7caffd6c","modified":1531251824022},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"4f39c49773590a8c854aab6c09623afb1de865b5","modified":1531251824023},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"a979a257a0e8720de8c052233840c1ddde95ea37","modified":1531251824024},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"dd092bbf28104482210b4c4a734e551f7536f525","modified":1531680191586},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"49c61ba1e57a76ab03053ef1b885ddeaa121c7ce","modified":1531251824026},{"_id":"themes/hueman/layout/widget/sticky_posts.ejs","hash":"c62a9abcf3d0f2941346f433510eb9bd843ee8c1","modified":1531251824025},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"744f0a0a9249745c7afd8abb0faba2cdb5b6811c","modified":1531251824026},{"_id":"themes/hueman/source/css/_extend.styl","hash":"8476764f75db59f94fbabebc5ddbf8fd4523c453","modified":1531251824030},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"0e41183083909fa8d0b9cd6d7ebc5bcacded1b8f","modified":1531251824085},{"_id":"themes/hueman/source/css/_variables.styl","hash":"5d8c6c0acda65f663b5cf7ccd19f25e495e9f4ea","modified":1531251824085},{"_id":"themes/hueman/source/css/style.styl","hash":"99623727296205ab418b220529a17bdd18ffa56c","modified":1531251824085},{"_id":"themes/hueman/source/js/insight.js","hash":"154c023c13d913984e9f70e22affea1ee8abe444","modified":1531251824089},{"_id":"themes/hueman/source/js/main.js","hash":"81684d2313285f2329465c59e82cc392c8f6a6e9","modified":1531251824090},{"_id":"themes/hueman/.git/objects/pack/pack-798acb8cbd7208dcfa3930ce990fdf8197704ed2.idx","hash":"eb229224d1c16f24711cecc1617f631a7f509bdb","modified":1531251823736},{"_id":"themes/hueman/.git/refs/heads/master","hash":"b8bcb5e8fc0d7fd71a8f4ba9902f743774501c56","modified":1531251823949},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"79c2a591274f863a78dcadaaf63f087ad7b9e7e1","modified":1531251823997},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"f7a755a93abed84337f2519eae788f20a88c4bf3","modified":1531251824003},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"7df16851b35da0ea09f7323bdbfb977198823f4c","modified":1531251824004},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"e164edee924be00641013f0fd4e53f55b51f90a8","modified":1531251824004},{"_id":"themes/hueman/layout/common/post/gallery.ejs","hash":"1ccdc66206e84668fa1f0d2440a8ed983aa321fd","modified":1531251824002},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1531251824032},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1531251824032},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1531251824033},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1531251824033},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1531251824034},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1531251824036},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1531251824035},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1531251824036},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1531251824036},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1531251824036},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1531251824036},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1531251824036},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1531251824036},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1531251824040},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1531251824040},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1531251824040},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1531251824040},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1531251824040},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1531251824044},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1531251824045},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1531251824045},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1531251824045},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1531251824045},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1531251824045},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1531251824049},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1531251824050},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1531251824051},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1531251824051},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1531251824051},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1531251824053},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1531251824054},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1531251824054},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1531251824054},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1531251824054},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1531251824054},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1531251824054},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1531251824058},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1531251824058},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1531251824058},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1531251824058},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1531251824058},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1531251824058},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"be660dbee7c8840d80654febaa97745a2f7f80eb","modified":1531251824058},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1531251824062},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1531251824063},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1531251824063},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1531251824064},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1531251824064},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1531251824064},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1531251824064},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1531251824064},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1531251824064},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1531251824064},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1531251824069},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1531251824070},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1531251824071},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1531251824071},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1531251824072},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1531251824073},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1531251824073},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1531251824073},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1531251824073},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1531251824073},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1531251824073},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1531251824073},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1531251824073},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1531251824078},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1531251824078},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1531251824078},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1531251824078},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"46aa36ef93ee77bfa97adad6ab2530a1057a1596","modified":1531251824078},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"1a8e73eafa536aeaa7a34725763c7d7164a621b1","modified":1531251824078},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"c42627622550f02395087c53a1a193f162fded65","modified":1531251824078},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"850f1f84987159da6fa2efdfa95cc82d0a2e59cd","modified":1531251824081},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"c5ab092de0661c344cb5176580443f126d6e31cc","modified":1531251824082},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"64e4b94f1e88d795c8866d261856680ca6faee2a","modified":1531251824083},{"_id":"themes/hueman/source/css/_partial/insight.styl","hash":"b29d88a9411f06974aa67381a3f3f39fb3b69feb","modified":1531251824084},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"b2941a6a171d2bfb3000be71664c04cc2a2c5964","modified":1531251824084},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"7533eddd2aba59663d21b14d248e485e3ca173d2","modified":1531251824085},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1531251824085},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1531251824085},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1531251824085},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1531251824085},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1531251824085},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1531251824120},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1531251824121},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1531251824154},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","hash":"5780e94a2a38ffa02322edaa780cb58c3199efa7","modified":1531251824158},{"_id":"themes/hueman/.git/logs/refs/heads/master","hash":"3226776e81e3a23c4ec0f130bb6b7d8ac69af059","modified":1531251823949},{"_id":"themes/hueman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1531251823947},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","hash":"bf188c224998b995d0119cfd18fade22e53f573c","modified":1531251824091},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","hash":"bd7c2763e15e568bdccc85e38432d79f65f8d9a1","modified":1531251824091},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1531251824122},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1531251824122},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1531251824122},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1531251824122},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1531251824122},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1531251824126},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1531251824127},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1531251824128},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1531251824128},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1531251824128},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1531251824128},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1531251824128},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1531251824128},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1531251824134},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1531251824135},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1531251824136},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1531251824136},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1531251824137},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1531251824138},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1531251824138},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1531251824138},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1531251824138},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1531251824138},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1531251824138},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1531251824142},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1531251824142},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1531251824142},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1531251824142},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1531251824142},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1531251824146},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1531251824147},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1531251824147},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1531251824148},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1531251824149},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1531251824152},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1531251824153},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1531251824154},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1531251824156},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1531251824157},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1531251824158},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1531251824158},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1531251824158},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1531251824158},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1531251824096},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1531251824099},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1531251824111},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1531251824115},{"_id":"themes/hueman/source/libs/jquery/3.3.1/jquery.min.js","hash":"0c3192b500a4fd550e483cf77a49806a5872185b","modified":1531251824115},{"_id":"themes/hueman/.git/logs/refs/remotes/origin/HEAD","hash":"3226776e81e3a23c4ec0f130bb6b7d8ac69af059","modified":1531251823947},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1531251824111},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1531251824107},{"_id":"themes/hueman/.git/objects/pack/pack-798acb8cbd7208dcfa3930ce990fdf8197704ed2.pack","hash":"342c6b7a7391104ef016f4332de90a5105da0eb2","modified":1531251823777}],"Category":[{"name":"ASP.NET Core 1.0","_id":"cjjt034ve0003s4tjbtejqzs8"},{"name":"Uncategorized","_id":"cjjt034ve0008s4tj7f044hqe"},{"name":"Angular 2","_id":"cjjt034vu000es4tjsrbkhzwr"},{"name":"Angular","_id":"cjjt034wa000ps4tjzvj8ytso"},{"name":"Visual Studio Code","parent":"cjjt034ve0003s4tjbtejqzs8","_id":"cjjt034we000ws4tjvvg6x3pp"},{"name":"ASP.NET Core 2","_id":"cjjt034wm001as4tja2rbkv0a"},{"name":"ASP.NET Core 1.0","parent":"cjjt034vu000es4tjsrbkhzwr","_id":"cjjt034wm001is4tj0jsuk8sg"},{"name":"TypeScript","_id":"cjjt034x5001ts4tjuqyhp825"},{"name":"ASP.NET MVC 5","parent":"cjjt034wa000ps4tjzvj8ytso","_id":"cjjt034xm002hs4tjxrri0dxt"},{"name":"Async","_id":"cjjt034xm002ls4tjamgs46ab"},{"name":"Dot Net","_id":"cjjt034xm002ps4tjp668d3q2"},{"name":"WCF","_id":"cjjt034xm002vs4tj0zma0t3i"},{"name":"ASP.NET Core 2","parent":"cjjt034ve0003s4tjbtejqzs8","_id":"cjjt034xm0031s4tjzslw7450"},{"name":"Install &amp; Configure","_id":"cjjt034y20038s4tj77hwg2hk"},{"name":"EF Core 2","parent":"cjjt034wm001as4tja2rbkv0a","_id":"cjjt034y3003fs4tj0quk7o36"},{"name":"LINQ","_id":"cjjt034y8003ks4tjnjr1xctq"},{"name":"TypeScript","parent":"cjjt034wm001is4tj0jsuk8sg","_id":"cjjt034y8003rs4tj77nb1rgs"},{"name":"TypeScript","parent":"cjjt034wm001as4tja2rbkv0a","_id":"cjjt034y8003vs4tj3w0uijog"},{"name":"ASP.NET Core 2","parent":"cjjt034wa000ps4tjzvj8ytso","_id":"cjjt034y80043s4tj7mymtcdv"},{"name":"Async","parent":"cjjt034wm001as4tja2rbkv0a","_id":"cjjt034y8004as4tj1dvuy3m5"},{"name":"Visual Studio Code","parent":"cjjt034x5001ts4tjuqyhp825","_id":"cjjt034y8004fs4tjs60b5uvs"},{"name":".Net","_id":"cjk2vaqvh00009ctj1tqj2fbr"},{"name":".NET","_id":"cjk2vayus00029ctjzffdt7ev"},{"name":"ASP.NET Core","_id":"cjk2w3rwc00099ctjr6nqlaqj"}],"Data":[],"Page":[{"title":"Sitemap","url":"110.html","id":110,"comments":0,"date":"2013-10-06T00:25:37.000Z","_content":"\n\\[wp\\_html\\_sitemap\\]","source":"html-sitemap/index.md","raw":"---\ntitle: Sitemap\nurl: 110.html\nid: 110\ncomments: false\ndate: 2013-10-06 05:55:37\n---\n\n\\[wp\\_html\\_sitemap\\]","updated":"2018-07-10T19:49:06.281Z","path":"html-sitemap/index.html","layout":"page","_id":"cjjt034ve0001s4tj1g9s4hvs","content":"<p>[wp_html_sitemap]</p>\n","site":{"data":{}},"excerpt":"","more":"<p>[wp_html_sitemap]</p>\n"}],"Post":[{"title":".Net Core Class Libraries - Build, Target, Use them","url":"492.html","id":"492","_content":"\n.NET [Core class libraries](http://dotnet.readthedocs.io/en/latest/concepts/class-libraries.html) combines the concept of platform*specific and portable library concept into a single model that provides the best of both.\n\nWhy .NET Core class libraries are special?\n------------------------------------------\n\n*   Write C# code in such a way you can target them for Full .NET framework or .NET Core\n*   Simplified way for maintaining code for different frameworks.\n*   Can leverage PCL (Portable Class Libraries) also.\n*   Better than using PCL for they support more APIs than PCL\n*   Most importantly, .NET Core class libraries can be cross platform esp for ASP.NET Core apps.\n\nWhat we will learn?\n\n1.  Build .NET Core class libraries using Visual Studio 2015.\n2.  Target them to use full .NET frameworks like .NET 4, .NET 5, .NET 6 and .NET Core apps like ASP.NET Core apps.\n3.  Use these class libraries in simple ASP.NET Core apps, WPF, Console Apps.\n\n> We need Visual Studio 2015 and .NET Core SDK installed with ASP.NET Core web tools\n\nOpen Visual Studio 2015, Create New","source":"_drafts/build-dotnet-core-class-libraries.md","raw":"---\ntitle: '.Net Core Class Libraries - Build, Target, Use them'\ntags:\n  - .Net Core\nurl: 492.html\nid: 492\ncategories:\n  - ASP.NET Core 1.0\n---\n\n.NET [Core class libraries](http://dotnet.readthedocs.io/en/latest/concepts/class-libraries.html) combines the concept of platform*specific and portable library concept into a single model that provides the best of both.\n\nWhy .NET Core class libraries are special?\n------------------------------------------\n\n*   Write C# code in such a way you can target them for Full .NET framework or .NET Core\n*   Simplified way for maintaining code for different frameworks.\n*   Can leverage PCL (Portable Class Libraries) also.\n*   Better than using PCL for they support more APIs than PCL\n*   Most importantly, .NET Core class libraries can be cross platform esp for ASP.NET Core apps.\n\nWhat we will learn?\n\n1.  Build .NET Core class libraries using Visual Studio 2015.\n2.  Target them to use full .NET frameworks like .NET 4, .NET 5, .NET 6 and .NET Core apps like ASP.NET Core apps.\n3.  Use these class libraries in simple ASP.NET Core apps, WPF, Console Apps.\n\n> We need Visual Studio 2015 and .NET Core SDK installed with ASP.NET Core web tools\n\nOpen Visual Studio 2015, Create New","slug":"build-dotnet-core-class-libraries","published":0,"date":"2018-07-10T19:49:06.282Z","updated":"2018-07-10T19:49:06.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034ve0000s4tjzv7rysxs","content":"<p>.NET <a href=\"http://dotnet.readthedocs.io/en/latest/concepts/class-libraries.html\" target=\"_blank\" rel=\"noopener\">Core class libraries</a> combines the concept of platform*specific and portable library concept into a single model that provides the best of both.</p>\n<h2 id=\"Why-NET-Core-class-libraries-are-special\"><a href=\"#Why-NET-Core-class-libraries-are-special\" class=\"headerlink\" title=\"Why .NET Core class libraries are special?\"></a>Why .NET Core class libraries are special?</h2><ul>\n<li>Write C# code in such a way you can target them for Full .NET framework or .NET Core</li>\n<li>Simplified way for maintaining code for different frameworks.</li>\n<li>Can leverage PCL (Portable Class Libraries) also.</li>\n<li>Better than using PCL for they support more APIs than PCL</li>\n<li>Most importantly, .NET Core class libraries can be cross platform esp for ASP.NET Core apps.</li>\n</ul>\n<p>What we will learn?</p>\n<ol>\n<li>Build .NET Core class libraries using Visual Studio 2015.</li>\n<li>Target them to use full .NET frameworks like .NET 4, .NET 5, .NET 6 and .NET Core apps like ASP.NET Core apps.</li>\n<li>Use these class libraries in simple ASP.NET Core apps, WPF, Console Apps.</li>\n</ol>\n<blockquote>\n<p>We need Visual Studio 2015 and .NET Core SDK installed with ASP.NET Core web tools</p>\n</blockquote>\n<p>Open Visual Studio 2015, Create New</p>\n","site":{"data":{}},"excerpt":"","more":"<p>.NET <a href=\"http://dotnet.readthedocs.io/en/latest/concepts/class-libraries.html\" target=\"_blank\" rel=\"noopener\">Core class libraries</a> combines the concept of platform*specific and portable library concept into a single model that provides the best of both.</p>\n<h2 id=\"Why-NET-Core-class-libraries-are-special\"><a href=\"#Why-NET-Core-class-libraries-are-special\" class=\"headerlink\" title=\"Why .NET Core class libraries are special?\"></a>Why .NET Core class libraries are special?</h2><ul>\n<li>Write C# code in such a way you can target them for Full .NET framework or .NET Core</li>\n<li>Simplified way for maintaining code for different frameworks.</li>\n<li>Can leverage PCL (Portable Class Libraries) also.</li>\n<li>Better than using PCL for they support more APIs than PCL</li>\n<li>Most importantly, .NET Core class libraries can be cross platform esp for ASP.NET Core apps.</li>\n</ul>\n<p>What we will learn?</p>\n<ol>\n<li>Build .NET Core class libraries using Visual Studio 2015.</li>\n<li>Target them to use full .NET frameworks like .NET 4, .NET 5, .NET 6 and .NET Core apps like ASP.NET Core apps.</li>\n<li>Use these class libraries in simple ASP.NET Core apps, WPF, Console Apps.</li>\n</ol>\n<blockquote>\n<p>We need Visual Studio 2015 and .NET Core SDK installed with ASP.NET Core web tools</p>\n</blockquote>\n<p>Open Visual Studio 2015, Create New</p>\n"},{"title":"GenFu - Understanding data & UI prototyping using ASP.NET Core 1.0","url":"403.html","id":"403","_content":"\n[![genfu](http://www.mithunvp.com/wp-content/uploads/2016/04/genfuintro-300x152.png)](http://www.mithunvp.com/wp-content/uploads/2016/04/genfuintro.png)","source":"_drafts/genfu-aspnet-core-web-api-mvc-6.md","raw":"---\ntitle: GenFu - Understanding data & UI prototyping using ASP.NET Core 1.0\nurl: 403.html\nid: 403\ncategories:\n  - Uncategorized\ntags:\n---\n\n[![genfu](http://www.mithunvp.com/wp-content/uploads/2016/04/genfuintro-300x152.png)](http://www.mithunvp.com/wp-content/uploads/2016/04/genfuintro.png)","slug":"genfu-aspnet-core-web-api-mvc-6","published":0,"date":"2018-07-10T19:49:06.280Z","updated":"2018-07-10T19:49:06.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034ve0002s4tjnmuno0jr","content":"<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2016/04/genfuintro.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/04/genfuintro-300x152.png\" alt=\"genfu\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2016/04/genfuintro.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/04/genfuintro-300x152.png\" alt=\"genfu\"></a></p>\n"},{"title":"Angular 2 in ASP.NET Core 1.0 using Visual Studio Code and TypeScript","url":"375.html","id":"375","date":"2016-02-19T14:20:28.000Z","_content":"\n![Angular 2](http://www.mithunvp.com/wp-content/uploads/2016/02/start-2-300x154.png)Angular 2 in ASP.NET Core 1.0 are going to redefine web development experience for developers. Thinking of creating ASP.NET website outside Visual Studio IDE was nightmare, but with advent of ASP.NET Core 1.0 as truly open source cross-platform technology it so exciting to create these apps without Visual Studio IDE In this tutorial I will summaries steps of  using Angular 2 in ASP.NET Core 1.0 using Visual Studio Code as editor not as IDE. These steps can be similar if want to work on Linux or Mac OS.\n\n> Updated to Angular 2 RC1 on ASP.NET Core 1.0\n\nWhat we will learn? 1. Create ASP.NET Core 1.0 web app using ASPNET Yeoman 2. Create package.json and npm install 3. Moving Angular 2 files to _**wwwroot**_ using Gulp tasks 4. Creating TypeScript project using _tsconfig.json_ 5\\. Creating Gulp task to transpile TypeScript 6. Adding Gulp watch tasks for any changes in code 7. Configure Build Tasks 8. Running application using lite-server So let's get started, I used Windows 7 OS with _NPM (Node)_, TypeScript, Gulp, lite-server installed globally. These steps might similar in Mac OS or Linux or other Windows OS. ASP.NET Core 1.0 needs to set up as well.\n\nStep 1: Create ASP.NET Core 1.0 web app using ASPNET Yeoman generator\n---------------------------------------------------------------------\n\nIt's interesting to know that ASP.NET is not confined to Visual Studio IDE alone, its must to refer [Create web applications using Yeoman in Visual Studio Code](http://www.mithunvp.com/asp-net-core-visual-studio-code-yeoman/)\n\nStep 2: Create package.json, add Angular 2 and other packages then run npm install\n----------------------------------------------------------------------------------\n\nAngular 2 along with other dependent packages needs to be included in **package.json**. List of packages needed can be found from [5 min quickstart of Angular2 website](https://angular.io/docs/ts/latest/quickstart.html) Create **package.json** file using _ASPNET yeoman generator_ or manually create and copy below code. After that open folder containing project in command prompt and run **npm install** to install all the packages. Along with Angular 2, I have included bootstrap and Jquery packages so that I can use them later.\n\n{\n    \"version\": \"0.0.0\",\n    \"name\": \"Angular2AspNetCoreDemo\",\n    \"dependencies\": {\n        \"@angular/common\": \"2.0.0-rc.1\",\n        \"@angular/compiler\": \"2.0.0-rc.1\",\n        \"@angular/core\": \"2.0.0-rc.1\",\n        \"@angular/http\": \"2.0.0-rc.1\",\n        \"@angular/platform-browser\": \"2.0.0-rc.1\",\n        \"@angular/platform-browser-dynamic\": \"2.0.0-rc.1\",\n        \"@angular/router\": \"2.0.0-rc.1\",\n        \"@angular/router-deprecated\": \"2.0.0-rc.1\",\n        \"@angular/upgrade\": \"2.0.0-rc.1\",\n\n        \"systemjs\": \"0.19.27\",\n        \"es6-shim\": \"^0.35.0\",\n        \"reflect-metadata\": \"^0.1.3\",\n        \"rxjs\": \"5.0.0-beta.6\",\n        \"zone.js\": \"^0.6.12\",\n\n        \"angular2-in-memory-web-api\": \"0.0.7\",\n        \"bootstrap\": \"^3.3.6\"\n    },\n    \"devDependencies\": {\n        \"typescript\": \"^1.8.10\",\n        \"gulp\": \"^3.9.1\",\n        \"path\": \"^0.12.7\",\n        \"gulp-clean\": \"^0.3.2\",\n        \"fs\": \"^0.0.2\",\n        \"gulp-concat\": \"^2.6.0\",\n        \"gulp-typescript\": \"^2.13.1\",\n        \"lite-server\": \"^2.2.0\",\n        \"typings\": \"^0.8.1\",\n        \"gulp-tsc\": \"^1.1.5\"\n    }\n}\n\n  \\[caption id=\"attachment_378\" align=\"alignleft\" width=\"1266\"\\][![Angular 2](http://www.mithunvp.com/wp-content/uploads/2016/02/npminstall-ng2.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/npminstall-ng2.png) package.json and NPM install (Older Image)\\[/caption\\] If you just observe now in explorer, **node_modules** folder will created with all packages downloaded as per _package.json_\n\nStep 3: Moving Angular 2 files to _wwwroot_ using Gulp tasks\n------------------------------------------------------------\n\nIn ASP.NET Core 1.0 the _**wwwroot**_ folder acts website root folder, so all static files like scripts, images, CSS etc should be placed this folder. Now that _Angular 2_ packages were downloaded into _**node_modules**_ folder, which contains numerous files. We are not really interested to include them project as well final deployment related files. With this intention in mind, we will move files from _node_modules_ to _wwwroot_ using **GULP** tasks. It will automate copying of the files. The code is provided in following steps, please refer Step 6\n\nStep 4: Creating TypeScript project using tsconfig.json\n-------------------------------------------------------\n\n**Angular 2** with **TypeScript** is something interesting to work with, in this web application we need TypeScript virtual project by including _tsconfig.json_ file.\n\n> **tsconfig.json** is TypeScript configuration file which does tell compiler what needs to be with TS files.\n\nCreate a folder \"**_scripts_**\", add _**tsconfig.json**_ using yo commands or add the file manually. Copy below code to _tsconfig.json_. It tells TypeScript compiler to move tranpiled TS files to \"outDir\" by targeting them es5 standards. Any TS files in _node_modules_ is excluded, _commonjs_ module loading is selected while initializing the JS files.\n\n{\n  \"compilerOptions\": {\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"module\": \"commonjs\",\n    \"noEmitOnError\": true,\n    \"noImplicitAny\": false,\n    \"outDir\": \"../wwwroot/appScripts/\",\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"es5\",\n    \"moduleResolution\": \"node\",\n    \"suppressImplicitAnyIndexErrors\": true\n  },\n  \"exclude\": \\[\n    \"node_modules\",\n    \"typings/main\",\n    \"typings/main.d.ts\"\n  \\]\n}\n\nStep 5: Creating Gulp tasks to transpile TypeScript code\n--------------------------------------------------------\n\nHowever if we had used Visual Studio IDE then this step was not necessary because IDE would have performed this work of transpile (compiling) TypeScript files to JavaScript files. We are working with Visual Studio Code, its just code editor so need to tell it to do transpile work for us because ultimately JS files are the one's that need to be referred in HTML files. The coolest option for this is to use **Gulp-TypeScript** package to perform this operation. After installing [_Gulp-Typescript_](https://www.npmjs.com/package/gulp-typescript), we need to tasks in _gulpfile.js_ so that we can do transpile work. I will be explaining gulp tasks in Step 6\n\nStep 6: Adding Gulp watch tasks to look for changes\n---------------------------------------------------\n\nImaging what if do any code changes in either Javascript, CSS or mostly importantly TypeScript files(they are doing actual Angular 2 work) and those changes are reflected instantly on browser. Yes, this is possible using Gulp tasks which is below. There are various ways to this, but Gulp Tasks are pretty easy to understand. Create **gulpfile.js** file and copy code\n\nvar ts = require('gulp-typescript');\nvar gulp = require('gulp');\nvar clean = require('gulp-clean');\n\nvar destPath = './wwwroot/libs/';\n\n// Delete the dist directory\ngulp.task('clean', function() {\n    return gulp.src(destPath)\n        .pipe(clean());\n});\n\n//Moves Angular 2 & related scripts to wwwroot folder of ASP.NET Core app\ngulp.task(\"scriptsNStyles\", () => {\n    gulp.src(\\[\n            'es6-shim/es6-shim.min.js',\n            'systemjs/dist/system-polyfills.js',\n            'systemjs/dist/system.src.js',\n            'reflect-metadata/Reflect.js',\n            'rxjs/**',\n            'zone.js/dist/**',\n            '@angular/**',\n            'jquery/dist/jquery.*js',\n            'bootstrap/dist/js/bootstrap*.js',\n        \\], {\n            cwd: \"node_modules/**\"\n        })\n        .pipe(gulp.dest(\"./wwwroot/libs\"));\n\n    gulp.src(\\[\n        'node_modules/bootstrap/dist/css/bootstrap.css'\n    \\]).pipe(gulp.dest('./wwwroot/libs/css'));\n});\n\n//ts - task to transpile TypeScript files to JavaScript using Gulp-TypeScript \nvar tsProject = ts.createProject('scripts/tsconfig.json');\ngulp.task('ts', function(done) {    \n    var tsResult = gulp.src(\\[\n            \"scripts/*.ts\"\n        \\])\n        .pipe(ts(tsProject), undefined, ts.reporter.fullReporter());\n    return tsResult.js.pipe(gulp.dest('./wwwroot/appScripts'));\n});\n\ngulp.task('watch', \\['watch.ts'\\]);\n\ngulp.task('watch.ts', \\['ts'\\], function() {\n    return gulp.watch('scripts/*.ts', \\['ts'\\]);\n});\n\ngulp.task('default', \\['scriptsNStyles', 'watch'\\]);\n\nThe gulp tasks code under is self explanatory with commented lines, to give much better visual representation go through below image. You might think so much get started with Angular 2 in ASP.NET Core 1.0, not really this is one time operation; once done you can just create html pages, add TypeScript to work with Angular 2. \\[caption id=\"attachment_380\" align=\"aligncenter\" width=\"1191\"\\][![Angular 2](http://www.mithunvp.com/wp-content/uploads/2016/02/gulpfileVisualRepresentaion.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/gulpfileVisualRepresentaion.png) Gulp Tasks for Angular 2 in ASP.NET Core 1.0\\[/caption\\]\n\nStep 7: Configure Build Tasks in Visual Studio Code\n---------------------------------------------------\n\nIf we want to run all gulp tasks above on _Alt+Cntrl+B (i.e. Build)_, we need to **tasks.json** file and add these gulp tasks so that we can work with them.\n\n>  **tasks.json** is Task Runner for Visual Studio Code\n\nJust do _Alt+Cntrl+B (i.e. Build), _it will prompt that no task runner is configured do you want one. Just click on \"**Configure Task Runner**\" and copy below code in it. \\[caption id=\"attachment_381\" align=\"aligncenter\" width=\"1207\"\\][![Angular 2](http://www.mithunvp.com/wp-content/uploads/2016/02/taskRunner.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/taskRunner.png) Configure Task Runner - tasks.json (older image)\\[/caption\\]\n\n{\n    \"version\": \"0.1.0\",\n    \"command\": \"gulp\",\n    \"isShellCommand\": true,\n    \"args\": \\[\n        \"--no-color\"\n    \\],\n    \"tasks\": \\[\n\t\t{\n\t\t\t\"taskName\": \"scriptsNStyles\",\n\t\t\t\"isBuildCommand\": true,\n\t\t\t\"showOutput\": \"always\"\n\t\t},\n\t\t{\n\t\t\t\"taskName\": \"clean\",\n\t\t\t\"isBuildCommand\": true,\n\t\t\t\"showOutput\": \"always\"\n\t\t},\n\t\t{\n\t\t\t\"taskName\": \"ts\",\n\t\t\t\"isBuildCommand\": true,\n\t\t\t\"showOutput\": \"always\",\n\t\t\t\"problemMatcher\": \"$tsc\"\n\t\t},\n\t\t{\n\t\t\t\"taskName\": \"watch\",\n\t\t\t\"isBuildCommand\": true,\n\t\t\t\"showOutput\": \"always\"\n\t\t},\n\t\t{\n\t\t\t\"taskName\": \"watch.ts\",\n\t\t\t\"isBuildCommand\": true,\n\t\t\t\"showOutput\": \"always\"\n\t\t},\n\t\t{\n\t\t\t\"taskName\": \"default\",\n\t\t\t\"isBuildCommand\": true,\n\t\t\t\"showOutput\": \"always\"\n\t\t}\n\t\\]\n}\n\nStep 8: Adding Angular 2 code & refer them in index.html\n--------------------------------------------------------\n\nFrom Angular 2 quick start link, it tells to create \"**app.ts**\" and \"**boot.ts**\" which acts as Angular component and bootstrap respectively. Just copy below code into _app.ts, boot.ts_ and _index.html. _We are set now, next step is running application.\n\n///<reference path=\"./../typings/browser/ambient/es6-shim/index.d.ts\"/>\nimport {bootstrap}    from '@angular/platform-browser-dynamic';\nimport {AppComponent} from './app';\n\nbootstrap(AppComponent);\n\nimport {\n    Component\n} from '@angular/core';\n@Component({\n    selector: 'my-app',\n    template: `<h2> My Skills are : { {mySkill }}</h2>`\n})\n\nexport class AppComponent {\n    mySkill: string;\n    skills = \\['ASP.NET Core 1.0', 'Angular', 'C#', 'SQL', 'JSON'\\];\n\n    constructor() {\n        this.mySkill = this.skills\\[1\\];\n    }\n}\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Angular 2 with ASP.NET Core 1.0</title>\n    <!\\-\\- 1\\. Load libraries -->\n    <link href=\"libs/css/bootstrap.css\" rel=\"stylesheet\" />\n    <script src=\"libs/es6-shim/es6-shim.min.js\"></script>\n    <script src=\"libs/zone.js/dist/zone.js\"></script>\n    <script src=\"libs/reflect-metadata/Reflect.js\"></script>    \n    <script src=\"libs/systemjs/dist/system.src.js\"></script>\n    \n    \n    <!\\-\\- 2\\. Configure SystemJS -->\n    <script src=\"systemjs.config.js\"></script>\n    <script>        \n        System.import('appScripts/boot')\n              .then(null, console.error.bind(console));\n    </script>\n\n</head>\n<body>    \n    <my-app>Loading...</my-app>    \n</body>\n</html>\n\n9\\. Using Systemjs to load Angular 2 scripts\n--------------------------------------------\n\nIf you observe \"index.html\" you will notice that we are referring _**systemjs.config.js**_, but where are Angular 2 related files. This is were the Systemjs configuration file will help us to load all necessary files. Create systemjs.config.js and copy below code. Configuration code is pretty simple - Looks for @Angular folder for packages, loads RxJs, hand written scripts related to application.\n\n(function(global) {\n\n  // map tells the System loader where to look for things\n  var map = {\n    'app':                        'appScripts', // 'dist',\n    'rxjs':                       'libs/rxjs',\n    'angular2-in-memory-web-api': 'libs/angular2-in-memory-web-api',\n    '@angular':                   'libs/@angular'\n  };\n\n  // packages tells the System loader how to load when no filename and/or no extension\n  var packages = {\n    'app':                        { main: 'boot.js',  defaultExtension: 'js' },\n    'rxjs':                       { defaultExtension: 'js' },\n    'angular2-in-memory-web-api': { defaultExtension: 'js' },\n  };\n\n  var packageNames = \\[\n    '@angular/common',\n    '@angular/compiler',\n    '@angular/core',\n    '@angular/http',\n    '@angular/platform-browser',\n    '@angular/platform-browser-dynamic',\n    '@angular/router',\n    '@angular/router-deprecated',\n    '@angular/testing',\n    '@angular/upgrade',\n  \\];\n\n  // add package entries for angular packages in the form '@angular/common': { main: 'index.js', defaultExtension: 'js' }\n  packageNames.forEach(function(pkgName) {\n    packages\\[pkgName\\] = { main: 'index.js', defaultExtension: 'js' };\n  });\n\n  var config = {\n    map: map,\n    packages: packages\n  }\n\n  // filterSystemConfig - index.html's chance to modify config before we register it.\n  if (global.filterSystemConfig) { global.filterSystemConfig(config); }\n\n  System.config(config);\n\n})(this);\n\n \n\n10\\. Running application using lite-server\n------------------------------------------\n\nI prefer using **lite-server** when working with Visual Studio Code is that it does lots of things like open browser, syncing any changes and more. When in VS Code, press F1 --> go for \"**Run Task**\" and click \"**default**\" \\- Gulp Task described above. It does create \"**libs**\", \"**appScripts**\" folder under _wwwroot_; ouput window shows that Gulp **watch** task is running and looking for changes. \\[caption id=\"attachment_385\" align=\"aligncenter\" width=\"1266\"\\][![Angular 2](http://www.mithunvp.com/wp-content/uploads/2016/02/runningTasks.gif)](http://www.mithunvp.com/wp-content/uploads/2016/02/runningTasks.gif) Running Gulp Tasks in VS Code\\[/caption\\] Open **wwwroot** in console and type \"_lite-server_\" to see magic, everything works perfectly !! \\[caption id=\"attachment_384\" align=\"aligncenter\" width=\"1266\"\\][![Everything get reflected on save !!](http://www.mithunvp.com/wp-content/uploads/2016/02/runHTML.gif)](http://www.mithunvp.com/wp-content/uploads/2016/02/runHTML.gif) Everything get reflected on save !!\\[/caption\\] This project is available on [Github](https://github.com/mithunvp/Angular2AspNetCoreDemo), have a look.  Also Checkout Angular 2 in ASP.NET Core 1.0 using [Visual Studio 2015 IDE](http://www.mithunvp.com/angular-2-in-asp-net-5-typescript-visual-studio-2015/).","source":"_posts/angular-2-asp-net-core-visual-studio-code-typescript.md","raw":"---\ntitle: Angular 2 in ASP.NET Core 1.0 using Visual Studio Code and TypeScript\ntags:\n  - Angular2\n  - Asp.NET Core 1.0\n  - Visual Studio Code\nurl: 375.html\nid: 375\ncategories:\n  - Angular 2\n  - ASP.NET Core 1.0\n  - TypeScript\ndate: 2016-02-19 19:50:28\n---\n\n![Angular 2](http://www.mithunvp.com/wp-content/uploads/2016/02/start-2-300x154.png)Angular 2 in ASP.NET Core 1.0 are going to redefine web development experience for developers. Thinking of creating ASP.NET website outside Visual Studio IDE was nightmare, but with advent of ASP.NET Core 1.0 as truly open source cross-platform technology it so exciting to create these apps without Visual Studio IDE In this tutorial I will summaries steps of  using Angular 2 in ASP.NET Core 1.0 using Visual Studio Code as editor not as IDE. These steps can be similar if want to work on Linux or Mac OS.\n\n> Updated to Angular 2 RC1 on ASP.NET Core 1.0\n\nWhat we will learn? 1. Create ASP.NET Core 1.0 web app using ASPNET Yeoman 2. Create package.json and npm install 3. Moving Angular 2 files to _**wwwroot**_ using Gulp tasks 4. Creating TypeScript project using _tsconfig.json_ 5\\. Creating Gulp task to transpile TypeScript 6. Adding Gulp watch tasks for any changes in code 7. Configure Build Tasks 8. Running application using lite-server So let's get started, I used Windows 7 OS with _NPM (Node)_, TypeScript, Gulp, lite-server installed globally. These steps might similar in Mac OS or Linux or other Windows OS. ASP.NET Core 1.0 needs to set up as well.\n\nStep 1: Create ASP.NET Core 1.0 web app using ASPNET Yeoman generator\n---------------------------------------------------------------------\n\nIt's interesting to know that ASP.NET is not confined to Visual Studio IDE alone, its must to refer [Create web applications using Yeoman in Visual Studio Code](http://www.mithunvp.com/asp-net-core-visual-studio-code-yeoman/)\n\nStep 2: Create package.json, add Angular 2 and other packages then run npm install\n----------------------------------------------------------------------------------\n\nAngular 2 along with other dependent packages needs to be included in **package.json**. List of packages needed can be found from [5 min quickstart of Angular2 website](https://angular.io/docs/ts/latest/quickstart.html) Create **package.json** file using _ASPNET yeoman generator_ or manually create and copy below code. After that open folder containing project in command prompt and run **npm install** to install all the packages. Along with Angular 2, I have included bootstrap and Jquery packages so that I can use them later.\n\n{\n    \"version\": \"0.0.0\",\n    \"name\": \"Angular2AspNetCoreDemo\",\n    \"dependencies\": {\n        \"@angular/common\": \"2.0.0-rc.1\",\n        \"@angular/compiler\": \"2.0.0-rc.1\",\n        \"@angular/core\": \"2.0.0-rc.1\",\n        \"@angular/http\": \"2.0.0-rc.1\",\n        \"@angular/platform-browser\": \"2.0.0-rc.1\",\n        \"@angular/platform-browser-dynamic\": \"2.0.0-rc.1\",\n        \"@angular/router\": \"2.0.0-rc.1\",\n        \"@angular/router-deprecated\": \"2.0.0-rc.1\",\n        \"@angular/upgrade\": \"2.0.0-rc.1\",\n\n        \"systemjs\": \"0.19.27\",\n        \"es6-shim\": \"^0.35.0\",\n        \"reflect-metadata\": \"^0.1.3\",\n        \"rxjs\": \"5.0.0-beta.6\",\n        \"zone.js\": \"^0.6.12\",\n\n        \"angular2-in-memory-web-api\": \"0.0.7\",\n        \"bootstrap\": \"^3.3.6\"\n    },\n    \"devDependencies\": {\n        \"typescript\": \"^1.8.10\",\n        \"gulp\": \"^3.9.1\",\n        \"path\": \"^0.12.7\",\n        \"gulp-clean\": \"^0.3.2\",\n        \"fs\": \"^0.0.2\",\n        \"gulp-concat\": \"^2.6.0\",\n        \"gulp-typescript\": \"^2.13.1\",\n        \"lite-server\": \"^2.2.0\",\n        \"typings\": \"^0.8.1\",\n        \"gulp-tsc\": \"^1.1.5\"\n    }\n}\n\n  \\[caption id=\"attachment_378\" align=\"alignleft\" width=\"1266\"\\][![Angular 2](http://www.mithunvp.com/wp-content/uploads/2016/02/npminstall-ng2.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/npminstall-ng2.png) package.json and NPM install (Older Image)\\[/caption\\] If you just observe now in explorer, **node_modules** folder will created with all packages downloaded as per _package.json_\n\nStep 3: Moving Angular 2 files to _wwwroot_ using Gulp tasks\n------------------------------------------------------------\n\nIn ASP.NET Core 1.0 the _**wwwroot**_ folder acts website root folder, so all static files like scripts, images, CSS etc should be placed this folder. Now that _Angular 2_ packages were downloaded into _**node_modules**_ folder, which contains numerous files. We are not really interested to include them project as well final deployment related files. With this intention in mind, we will move files from _node_modules_ to _wwwroot_ using **GULP** tasks. It will automate copying of the files. The code is provided in following steps, please refer Step 6\n\nStep 4: Creating TypeScript project using tsconfig.json\n-------------------------------------------------------\n\n**Angular 2** with **TypeScript** is something interesting to work with, in this web application we need TypeScript virtual project by including _tsconfig.json_ file.\n\n> **tsconfig.json** is TypeScript configuration file which does tell compiler what needs to be with TS files.\n\nCreate a folder \"**_scripts_**\", add _**tsconfig.json**_ using yo commands or add the file manually. Copy below code to _tsconfig.json_. It tells TypeScript compiler to move tranpiled TS files to \"outDir\" by targeting them es5 standards. Any TS files in _node_modules_ is excluded, _commonjs_ module loading is selected while initializing the JS files.\n\n{\n  \"compilerOptions\": {\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"module\": \"commonjs\",\n    \"noEmitOnError\": true,\n    \"noImplicitAny\": false,\n    \"outDir\": \"../wwwroot/appScripts/\",\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"es5\",\n    \"moduleResolution\": \"node\",\n    \"suppressImplicitAnyIndexErrors\": true\n  },\n  \"exclude\": \\[\n    \"node_modules\",\n    \"typings/main\",\n    \"typings/main.d.ts\"\n  \\]\n}\n\nStep 5: Creating Gulp tasks to transpile TypeScript code\n--------------------------------------------------------\n\nHowever if we had used Visual Studio IDE then this step was not necessary because IDE would have performed this work of transpile (compiling) TypeScript files to JavaScript files. We are working with Visual Studio Code, its just code editor so need to tell it to do transpile work for us because ultimately JS files are the one's that need to be referred in HTML files. The coolest option for this is to use **Gulp-TypeScript** package to perform this operation. After installing [_Gulp-Typescript_](https://www.npmjs.com/package/gulp-typescript), we need to tasks in _gulpfile.js_ so that we can do transpile work. I will be explaining gulp tasks in Step 6\n\nStep 6: Adding Gulp watch tasks to look for changes\n---------------------------------------------------\n\nImaging what if do any code changes in either Javascript, CSS or mostly importantly TypeScript files(they are doing actual Angular 2 work) and those changes are reflected instantly on browser. Yes, this is possible using Gulp tasks which is below. There are various ways to this, but Gulp Tasks are pretty easy to understand. Create **gulpfile.js** file and copy code\n\nvar ts = require('gulp-typescript');\nvar gulp = require('gulp');\nvar clean = require('gulp-clean');\n\nvar destPath = './wwwroot/libs/';\n\n// Delete the dist directory\ngulp.task('clean', function() {\n    return gulp.src(destPath)\n        .pipe(clean());\n});\n\n//Moves Angular 2 & related scripts to wwwroot folder of ASP.NET Core app\ngulp.task(\"scriptsNStyles\", () => {\n    gulp.src(\\[\n            'es6-shim/es6-shim.min.js',\n            'systemjs/dist/system-polyfills.js',\n            'systemjs/dist/system.src.js',\n            'reflect-metadata/Reflect.js',\n            'rxjs/**',\n            'zone.js/dist/**',\n            '@angular/**',\n            'jquery/dist/jquery.*js',\n            'bootstrap/dist/js/bootstrap*.js',\n        \\], {\n            cwd: \"node_modules/**\"\n        })\n        .pipe(gulp.dest(\"./wwwroot/libs\"));\n\n    gulp.src(\\[\n        'node_modules/bootstrap/dist/css/bootstrap.css'\n    \\]).pipe(gulp.dest('./wwwroot/libs/css'));\n});\n\n//ts - task to transpile TypeScript files to JavaScript using Gulp-TypeScript \nvar tsProject = ts.createProject('scripts/tsconfig.json');\ngulp.task('ts', function(done) {    \n    var tsResult = gulp.src(\\[\n            \"scripts/*.ts\"\n        \\])\n        .pipe(ts(tsProject), undefined, ts.reporter.fullReporter());\n    return tsResult.js.pipe(gulp.dest('./wwwroot/appScripts'));\n});\n\ngulp.task('watch', \\['watch.ts'\\]);\n\ngulp.task('watch.ts', \\['ts'\\], function() {\n    return gulp.watch('scripts/*.ts', \\['ts'\\]);\n});\n\ngulp.task('default', \\['scriptsNStyles', 'watch'\\]);\n\nThe gulp tasks code under is self explanatory with commented lines, to give much better visual representation go through below image. You might think so much get started with Angular 2 in ASP.NET Core 1.0, not really this is one time operation; once done you can just create html pages, add TypeScript to work with Angular 2. \\[caption id=\"attachment_380\" align=\"aligncenter\" width=\"1191\"\\][![Angular 2](http://www.mithunvp.com/wp-content/uploads/2016/02/gulpfileVisualRepresentaion.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/gulpfileVisualRepresentaion.png) Gulp Tasks for Angular 2 in ASP.NET Core 1.0\\[/caption\\]\n\nStep 7: Configure Build Tasks in Visual Studio Code\n---------------------------------------------------\n\nIf we want to run all gulp tasks above on _Alt+Cntrl+B (i.e. Build)_, we need to **tasks.json** file and add these gulp tasks so that we can work with them.\n\n>  **tasks.json** is Task Runner for Visual Studio Code\n\nJust do _Alt+Cntrl+B (i.e. Build), _it will prompt that no task runner is configured do you want one. Just click on \"**Configure Task Runner**\" and copy below code in it. \\[caption id=\"attachment_381\" align=\"aligncenter\" width=\"1207\"\\][![Angular 2](http://www.mithunvp.com/wp-content/uploads/2016/02/taskRunner.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/taskRunner.png) Configure Task Runner - tasks.json (older image)\\[/caption\\]\n\n{\n    \"version\": \"0.1.0\",\n    \"command\": \"gulp\",\n    \"isShellCommand\": true,\n    \"args\": \\[\n        \"--no-color\"\n    \\],\n    \"tasks\": \\[\n\t\t{\n\t\t\t\"taskName\": \"scriptsNStyles\",\n\t\t\t\"isBuildCommand\": true,\n\t\t\t\"showOutput\": \"always\"\n\t\t},\n\t\t{\n\t\t\t\"taskName\": \"clean\",\n\t\t\t\"isBuildCommand\": true,\n\t\t\t\"showOutput\": \"always\"\n\t\t},\n\t\t{\n\t\t\t\"taskName\": \"ts\",\n\t\t\t\"isBuildCommand\": true,\n\t\t\t\"showOutput\": \"always\",\n\t\t\t\"problemMatcher\": \"$tsc\"\n\t\t},\n\t\t{\n\t\t\t\"taskName\": \"watch\",\n\t\t\t\"isBuildCommand\": true,\n\t\t\t\"showOutput\": \"always\"\n\t\t},\n\t\t{\n\t\t\t\"taskName\": \"watch.ts\",\n\t\t\t\"isBuildCommand\": true,\n\t\t\t\"showOutput\": \"always\"\n\t\t},\n\t\t{\n\t\t\t\"taskName\": \"default\",\n\t\t\t\"isBuildCommand\": true,\n\t\t\t\"showOutput\": \"always\"\n\t\t}\n\t\\]\n}\n\nStep 8: Adding Angular 2 code & refer them in index.html\n--------------------------------------------------------\n\nFrom Angular 2 quick start link, it tells to create \"**app.ts**\" and \"**boot.ts**\" which acts as Angular component and bootstrap respectively. Just copy below code into _app.ts, boot.ts_ and _index.html. _We are set now, next step is running application.\n\n///<reference path=\"./../typings/browser/ambient/es6-shim/index.d.ts\"/>\nimport {bootstrap}    from '@angular/platform-browser-dynamic';\nimport {AppComponent} from './app';\n\nbootstrap(AppComponent);\n\nimport {\n    Component\n} from '@angular/core';\n@Component({\n    selector: 'my-app',\n    template: `<h2> My Skills are : { {mySkill }}</h2>`\n})\n\nexport class AppComponent {\n    mySkill: string;\n    skills = \\['ASP.NET Core 1.0', 'Angular', 'C#', 'SQL', 'JSON'\\];\n\n    constructor() {\n        this.mySkill = this.skills\\[1\\];\n    }\n}\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Angular 2 with ASP.NET Core 1.0</title>\n    <!\\-\\- 1\\. Load libraries -->\n    <link href=\"libs/css/bootstrap.css\" rel=\"stylesheet\" />\n    <script src=\"libs/es6-shim/es6-shim.min.js\"></script>\n    <script src=\"libs/zone.js/dist/zone.js\"></script>\n    <script src=\"libs/reflect-metadata/Reflect.js\"></script>    \n    <script src=\"libs/systemjs/dist/system.src.js\"></script>\n    \n    \n    <!\\-\\- 2\\. Configure SystemJS -->\n    <script src=\"systemjs.config.js\"></script>\n    <script>        \n        System.import('appScripts/boot')\n              .then(null, console.error.bind(console));\n    </script>\n\n</head>\n<body>    \n    <my-app>Loading...</my-app>    \n</body>\n</html>\n\n9\\. Using Systemjs to load Angular 2 scripts\n--------------------------------------------\n\nIf you observe \"index.html\" you will notice that we are referring _**systemjs.config.js**_, but where are Angular 2 related files. This is were the Systemjs configuration file will help us to load all necessary files. Create systemjs.config.js and copy below code. Configuration code is pretty simple - Looks for @Angular folder for packages, loads RxJs, hand written scripts related to application.\n\n(function(global) {\n\n  // map tells the System loader where to look for things\n  var map = {\n    'app':                        'appScripts', // 'dist',\n    'rxjs':                       'libs/rxjs',\n    'angular2-in-memory-web-api': 'libs/angular2-in-memory-web-api',\n    '@angular':                   'libs/@angular'\n  };\n\n  // packages tells the System loader how to load when no filename and/or no extension\n  var packages = {\n    'app':                        { main: 'boot.js',  defaultExtension: 'js' },\n    'rxjs':                       { defaultExtension: 'js' },\n    'angular2-in-memory-web-api': { defaultExtension: 'js' },\n  };\n\n  var packageNames = \\[\n    '@angular/common',\n    '@angular/compiler',\n    '@angular/core',\n    '@angular/http',\n    '@angular/platform-browser',\n    '@angular/platform-browser-dynamic',\n    '@angular/router',\n    '@angular/router-deprecated',\n    '@angular/testing',\n    '@angular/upgrade',\n  \\];\n\n  // add package entries for angular packages in the form '@angular/common': { main: 'index.js', defaultExtension: 'js' }\n  packageNames.forEach(function(pkgName) {\n    packages\\[pkgName\\] = { main: 'index.js', defaultExtension: 'js' };\n  });\n\n  var config = {\n    map: map,\n    packages: packages\n  }\n\n  // filterSystemConfig - index.html's chance to modify config before we register it.\n  if (global.filterSystemConfig) { global.filterSystemConfig(config); }\n\n  System.config(config);\n\n})(this);\n\n \n\n10\\. Running application using lite-server\n------------------------------------------\n\nI prefer using **lite-server** when working with Visual Studio Code is that it does lots of things like open browser, syncing any changes and more. When in VS Code, press F1 --> go for \"**Run Task**\" and click \"**default**\" \\- Gulp Task described above. It does create \"**libs**\", \"**appScripts**\" folder under _wwwroot_; ouput window shows that Gulp **watch** task is running and looking for changes. \\[caption id=\"attachment_385\" align=\"aligncenter\" width=\"1266\"\\][![Angular 2](http://www.mithunvp.com/wp-content/uploads/2016/02/runningTasks.gif)](http://www.mithunvp.com/wp-content/uploads/2016/02/runningTasks.gif) Running Gulp Tasks in VS Code\\[/caption\\] Open **wwwroot** in console and type \"_lite-server_\" to see magic, everything works perfectly !! \\[caption id=\"attachment_384\" align=\"aligncenter\" width=\"1266\"\\][![Everything get reflected on save !!](http://www.mithunvp.com/wp-content/uploads/2016/02/runHTML.gif)](http://www.mithunvp.com/wp-content/uploads/2016/02/runHTML.gif) Everything get reflected on save !!\\[/caption\\] This project is available on [Github](https://github.com/mithunvp/Angular2AspNetCoreDemo), have a look.  Also Checkout Angular 2 in ASP.NET Core 1.0 using [Visual Studio 2015 IDE](http://www.mithunvp.com/angular-2-in-asp-net-5-typescript-visual-studio-2015/).","slug":"angular-2-asp-net-core-visual-studio-code-typescript","published":1,"updated":"2018-07-10T19:49:06.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034ve0005s4tjzi0c5iou","content":"<p><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/start-2-300x154.png\" alt=\"Angular 2\">Angular 2 in ASP.NET Core 1.0 are going to redefine web development experience for developers. Thinking of creating ASP.NET website outside Visual Studio IDE was nightmare, but with advent of ASP.NET Core 1.0 as truly open source cross-platform technology it so exciting to create these apps without Visual Studio IDE In this tutorial I will summaries steps of  using Angular 2 in ASP.NET Core 1.0 using Visual Studio Code as editor not as IDE. These steps can be similar if want to work on Linux or Mac OS.</p>\n<blockquote>\n<p>Updated to Angular 2 RC1 on ASP.NET Core 1.0</p>\n</blockquote>\n<p>What we will learn? 1. Create ASP.NET Core 1.0 web app using ASPNET Yeoman 2. Create package.json and npm install 3. Moving Angular 2 files to <em><strong>wwwroot</strong></em> using Gulp tasks 4. Creating TypeScript project using <em>tsconfig.json</em> 5. Creating Gulp task to transpile TypeScript 6. Adding Gulp watch tasks for any changes in code 7. Configure Build Tasks 8. Running application using lite-server So let’s get started, I used Windows 7 OS with <em>NPM (Node)</em>, TypeScript, Gulp, lite-server installed globally. These steps might similar in Mac OS or Linux or other Windows OS. ASP.NET Core 1.0 needs to set up as well.</p>\n<h2 id=\"Step-1-Create-ASP-NET-Core-1-0-web-app-using-ASPNET-Yeoman-generator\"><a href=\"#Step-1-Create-ASP-NET-Core-1-0-web-app-using-ASPNET-Yeoman-generator\" class=\"headerlink\" title=\"Step 1: Create ASP.NET Core 1.0 web app using ASPNET Yeoman generator\"></a>Step 1: Create ASP.NET Core 1.0 web app using ASPNET Yeoman generator</h2><p>It’s interesting to know that ASP.NET is not confined to Visual Studio IDE alone, its must to refer <a href=\"http://www.mithunvp.com/asp-net-core-visual-studio-code-yeoman/\">Create web applications using Yeoman in Visual Studio Code</a></p>\n<h2 id=\"Step-2-Create-package-json-add-Angular-2-and-other-packages-then-run-npm-install\"><a href=\"#Step-2-Create-package-json-add-Angular-2-and-other-packages-then-run-npm-install\" class=\"headerlink\" title=\"Step 2: Create package.json, add Angular 2 and other packages then run npm install\"></a>Step 2: Create package.json, add Angular 2 and other packages then run npm install</h2><p>Angular 2 along with other dependent packages needs to be included in <strong>package.json</strong>. List of packages needed can be found from <a href=\"https://angular.io/docs/ts/latest/quickstart.html\" target=\"_blank\" rel=\"noopener\">5 min quickstart of Angular2 website</a> Create <strong>package.json</strong> file using <em>ASPNET yeoman generator</em> or manually create and copy below code. After that open folder containing project in command prompt and run <strong>npm install</strong> to install all the packages. Along with Angular 2, I have included bootstrap and Jquery packages so that I can use them later.</p>\n<p>{<br>    “version”: “0.0.0”,<br>    “name”: “Angular2AspNetCoreDemo”,<br>    “dependencies”: {<br>        “@angular/common”: “2.0.0-rc.1”,<br>        “@angular/compiler”: “2.0.0-rc.1”,<br>        “@angular/core”: “2.0.0-rc.1”,<br>        “@angular/http”: “2.0.0-rc.1”,<br>        “@angular/platform-browser”: “2.0.0-rc.1”,<br>        “@angular/platform-browser-dynamic”: “2.0.0-rc.1”,<br>        “@angular/router”: “2.0.0-rc.1”,<br>        “@angular/router-deprecated”: “2.0.0-rc.1”,<br>        “@angular/upgrade”: “2.0.0-rc.1”,</p>\n<pre><code>    &quot;systemjs&quot;: &quot;0.19.27&quot;,\n    &quot;es6-shim&quot;: &quot;^0.35.0&quot;,\n    &quot;reflect-metadata&quot;: &quot;^0.1.3&quot;,\n    &quot;rxjs&quot;: &quot;5.0.0-beta.6&quot;,\n    &quot;zone.js&quot;: &quot;^0.6.12&quot;,\n\n    &quot;angular2-in-memory-web-api&quot;: &quot;0.0.7&quot;,\n    &quot;bootstrap&quot;: &quot;^3.3.6&quot;\n},\n&quot;devDependencies&quot;: {\n    &quot;typescript&quot;: &quot;^1.8.10&quot;,\n    &quot;gulp&quot;: &quot;^3.9.1&quot;,\n    &quot;path&quot;: &quot;^0.12.7&quot;,\n    &quot;gulp-clean&quot;: &quot;^0.3.2&quot;,\n    &quot;fs&quot;: &quot;^0.0.2&quot;,\n    &quot;gulp-concat&quot;: &quot;^2.6.0&quot;,\n    &quot;gulp-typescript&quot;: &quot;^2.13.1&quot;,\n    &quot;lite-server&quot;: &quot;^2.2.0&quot;,\n    &quot;typings&quot;: &quot;^0.8.1&quot;,\n    &quot;gulp-tsc&quot;: &quot;^1.1.5&quot;\n}\n</code></pre><p>}</p>\n<p>  [caption id=”attachment_378” align=”alignleft” width=”1266”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/npminstall-ng2.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/npminstall-ng2.png\" alt=\"Angular 2\"></a> package.json and NPM install (Older Image)[/caption] If you just observe now in explorer, <strong>node_modules</strong> folder will created with all packages downloaded as per <em>package.json</em></p>\n<h2 id=\"Step-3-Moving-Angular-2-files-to-wwwroot-using-Gulp-tasks\"><a href=\"#Step-3-Moving-Angular-2-files-to-wwwroot-using-Gulp-tasks\" class=\"headerlink\" title=\"Step 3: Moving Angular 2 files to wwwroot using Gulp tasks\"></a>Step 3: Moving Angular 2 files to <em>wwwroot</em> using Gulp tasks</h2><p>In ASP.NET Core 1.0 the <em><strong>wwwroot</strong></em> folder acts website root folder, so all static files like scripts, images, CSS etc should be placed this folder. Now that <em>Angular 2</em> packages were downloaded into _<strong>node_modules</strong>_ folder, which contains numerous files. We are not really interested to include them project as well final deployment related files. With this intention in mind, we will move files from _node_modules_ to <em>wwwroot</em> using <strong>GULP</strong> tasks. It will automate copying of the files. The code is provided in following steps, please refer Step 6</p>\n<h2 id=\"Step-4-Creating-TypeScript-project-using-tsconfig-json\"><a href=\"#Step-4-Creating-TypeScript-project-using-tsconfig-json\" class=\"headerlink\" title=\"Step 4: Creating TypeScript project using tsconfig.json\"></a>Step 4: Creating TypeScript project using tsconfig.json</h2><p><strong>Angular 2</strong> with <strong>TypeScript</strong> is something interesting to work with, in this web application we need TypeScript virtual project by including <em>tsconfig.json</em> file.</p>\n<blockquote>\n<p><strong>tsconfig.json</strong> is TypeScript configuration file which does tell compiler what needs to be with TS files.</p>\n</blockquote>\n<p>Create a folder “<strong><em>scripts</em></strong>“, add <em><strong>tsconfig.json</strong></em> using yo commands or add the file manually. Copy below code to <em>tsconfig.json</em>. It tells TypeScript compiler to move tranpiled TS files to “outDir” by targeting them es5 standards. Any TS files in _node_modules_ is excluded, <em>commonjs</em> module loading is selected while initializing the JS files.</p>\n<p>{<br>  “compilerOptions”: {<br>    “emitDecoratorMetadata”: true,<br>    “experimentalDecorators”: true,<br>    “module”: “commonjs”,<br>    “noEmitOnError”: true,<br>    “noImplicitAny”: false,<br>    “outDir”: “../wwwroot/appScripts/“,<br>    “removeComments”: false,<br>    “sourceMap”: true,<br>    “target”: “es5”,<br>    “moduleResolution”: “node”,<br>    “suppressImplicitAnyIndexErrors”: true<br>  },<br>  “exclude”: [<br>    “node_modules”,<br>    “typings/main”,<br>    “typings/main.d.ts”<br>  ]<br>}</p>\n<h2 id=\"Step-5-Creating-Gulp-tasks-to-transpile-TypeScript-code\"><a href=\"#Step-5-Creating-Gulp-tasks-to-transpile-TypeScript-code\" class=\"headerlink\" title=\"Step 5: Creating Gulp tasks to transpile TypeScript code\"></a>Step 5: Creating Gulp tasks to transpile TypeScript code</h2><p>However if we had used Visual Studio IDE then this step was not necessary because IDE would have performed this work of transpile (compiling) TypeScript files to JavaScript files. We are working with Visual Studio Code, its just code editor so need to tell it to do transpile work for us because ultimately JS files are the one’s that need to be referred in HTML files. The coolest option for this is to use <strong>Gulp-TypeScript</strong> package to perform this operation. After installing <a href=\"https://www.npmjs.com/package/gulp-typescript\" target=\"_blank\" rel=\"noopener\"><em>Gulp-Typescript</em></a>, we need to tasks in <em>gulpfile.js</em> so that we can do transpile work. I will be explaining gulp tasks in Step 6</p>\n<h2 id=\"Step-6-Adding-Gulp-watch-tasks-to-look-for-changes\"><a href=\"#Step-6-Adding-Gulp-watch-tasks-to-look-for-changes\" class=\"headerlink\" title=\"Step 6: Adding Gulp watch tasks to look for changes\"></a>Step 6: Adding Gulp watch tasks to look for changes</h2><p>Imaging what if do any code changes in either Javascript, CSS or mostly importantly TypeScript files(they are doing actual Angular 2 work) and those changes are reflected instantly on browser. Yes, this is possible using Gulp tasks which is below. There are various ways to this, but Gulp Tasks are pretty easy to understand. Create <strong>gulpfile.js</strong> file and copy code</p>\n<p>var ts = require(‘gulp-typescript’);<br>var gulp = require(‘gulp’);<br>var clean = require(‘gulp-clean’);</p>\n<p>var destPath = ‘./wwwroot/libs/‘;</p>\n<p>// Delete the dist directory<br>gulp.task(‘clean’, function() {<br>    return gulp.src(destPath)<br>        .pipe(clean());<br>});</p>\n<p>//Moves Angular 2 &amp; related scripts to wwwroot folder of ASP.NET Core app<br>gulp.task(“scriptsNStyles”, () =&gt; {<br>    gulp.src([<br>            ‘es6-shim/es6-shim.min.js’,<br>            ‘systemjs/dist/system-polyfills.js’,<br>            ‘systemjs/dist/system.src.js’,<br>            ‘reflect-metadata/Reflect.js’,<br>            ‘rxjs/<strong>‘,<br>            ‘zone.js/dist/</strong>‘,<br>            ‘@angular/<strong>‘,<br>            ‘jquery/dist/jquery.<em>js’,<br>            ‘bootstrap/dist/js/bootstrap</em>.js’,<br>        ], {<br>            cwd: “node_modules/</strong>“<br>        })<br>        .pipe(gulp.dest(“./wwwroot/libs”));</p>\n<pre><code>gulp.src(\\[\n    &apos;node_modules/bootstrap/dist/css/bootstrap.css&apos;\n\\]).pipe(gulp.dest(&apos;./wwwroot/libs/css&apos;));\n</code></pre><p>});</p>\n<p>//ts - task to transpile TypeScript files to JavaScript using Gulp-TypeScript<br>var tsProject = ts.createProject(‘scripts/tsconfig.json’);<br>gulp.task(‘ts’, function(done) {<br>    var tsResult = gulp.src([<br>            “scripts/*.ts”<br>        ])<br>        .pipe(ts(tsProject), undefined, ts.reporter.fullReporter());<br>    return tsResult.js.pipe(gulp.dest(‘./wwwroot/appScripts’));<br>});</p>\n<p>gulp.task(‘watch’, [‘watch.ts’]);</p>\n<p>gulp.task(‘watch.ts’, [‘ts’], function() {<br>    return gulp.watch(‘scripts/*.ts’, [‘ts’]);<br>});</p>\n<p>gulp.task(‘default’, [‘scriptsNStyles’, ‘watch’]);</p>\n<p>The gulp tasks code under is self explanatory with commented lines, to give much better visual representation go through below image. You might think so much get started with Angular 2 in ASP.NET Core 1.0, not really this is one time operation; once done you can just create html pages, add TypeScript to work with Angular 2. [caption id=”attachment_380” align=”aligncenter” width=”1191”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/gulpfileVisualRepresentaion.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/gulpfileVisualRepresentaion.png\" alt=\"Angular 2\"></a> Gulp Tasks for Angular 2 in ASP.NET Core 1.0[/caption]</p>\n<h2 id=\"Step-7-Configure-Build-Tasks-in-Visual-Studio-Code\"><a href=\"#Step-7-Configure-Build-Tasks-in-Visual-Studio-Code\" class=\"headerlink\" title=\"Step 7: Configure Build Tasks in Visual Studio Code\"></a>Step 7: Configure Build Tasks in Visual Studio Code</h2><p>If we want to run all gulp tasks above on <em>Alt+Cntrl+B (i.e. Build)</em>, we need to <strong>tasks.json</strong> file and add these gulp tasks so that we can work with them.</p>\n<blockquote>\n<p> <strong>tasks.json</strong> is Task Runner for Visual Studio Code</p>\n</blockquote>\n<p>Just do _Alt+Cntrl+B (i.e. Build), _it will prompt that no task runner is configured do you want one. Just click on “<strong>Configure Task Runner</strong>“ and copy below code in it. [caption id=”attachment_381” align=”aligncenter” width=”1207”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/taskRunner.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/taskRunner.png\" alt=\"Angular 2\"></a> Configure Task Runner - tasks.json (older image)[/caption]</p>\n<p>{<br>    “version”: “0.1.0”,<br>    “command”: “gulp”,<br>    “isShellCommand”: true,<br>    “args”: [<br>        “–no-color”<br>    ],<br>    “tasks”: [<br>        {<br>            “taskName”: “scriptsNStyles”,<br>            “isBuildCommand”: true,<br>            “showOutput”: “always”<br>        },<br>        {<br>            “taskName”: “clean”,<br>            “isBuildCommand”: true,<br>            “showOutput”: “always”<br>        },<br>        {<br>            “taskName”: “ts”,<br>            “isBuildCommand”: true,<br>            “showOutput”: “always”,<br>            “problemMatcher”: “$tsc”<br>        },<br>        {<br>            “taskName”: “watch”,<br>            “isBuildCommand”: true,<br>            “showOutput”: “always”<br>        },<br>        {<br>            “taskName”: “watch.ts”,<br>            “isBuildCommand”: true,<br>            “showOutput”: “always”<br>        },<br>        {<br>            “taskName”: “default”,<br>            “isBuildCommand”: true,<br>            “showOutput”: “always”<br>        }<br>    ]<br>}</p>\n<h2 id=\"Step-8-Adding-Angular-2-code-amp-refer-them-in-index-html\"><a href=\"#Step-8-Adding-Angular-2-code-amp-refer-them-in-index-html\" class=\"headerlink\" title=\"Step 8: Adding Angular 2 code &amp; refer them in index.html\"></a>Step 8: Adding Angular 2 code &amp; refer them in index.html</h2><p>From Angular 2 quick start link, it tells to create “<strong>app.ts</strong>“ and “<strong>boot.ts</strong>“ which acts as Angular component and bootstrap respectively. Just copy below code into <em>app.ts, boot.ts</em> and _index.html. _We are set now, next step is running application.</p>\n<p>///<reference path=\"./../typings/browser/ambient/es6-shim/index.d.ts\"><br>import {bootstrap}    from ‘@angular/platform-browser-dynamic’;<br>import {AppComponent} from ‘./app’;</reference></p>\n<p>bootstrap(AppComponent);</p>\n<p>import {<br>    Component<br>} from ‘@angular/core’;<br>@Component({<br>    selector: ‘my-app’,<br>    template: <code>&lt;h2&gt; My Skills are : { {mySkill }}&lt;/h2&gt;</code><br>})</p>\n<p>export class AppComponent {<br>    mySkill: string;<br>    skills = [‘ASP.NET Core 1.0’, ‘Angular’, ‘C#’, ‘SQL’, ‘JSON’];</p>\n<pre><code>constructor() {\n    this.mySkill = this.skills\\[1\\];\n}\n</code></pre><p>}</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<html><br><head><br>    <meta charset=\"utf-8\"><br>    <title>Angular 2 with ASP.NET Core 1.0</title><br>    &lt;!-- 1. Load libraries –&gt;<br>    <link href=\"libs/css/bootstrap.css\" rel=\"stylesheet\"><br>    <script src=\"libs/es6-shim/es6-shim.min.js\"></script><br>    <script src=\"libs/zone.js/dist/zone.js\"></script><br>    <script src=\"libs/reflect-metadata/Reflect.js\"></script><br>    <script src=\"libs/systemjs/dist/system.src.js\"></script><br><br><br>    &lt;!-- 2. Configure SystemJS –&gt;<br>    <script src=\"systemjs.config.js\"></script><br>    <script><br>        System.import(‘appScripts/boot’)<br>              .then(null, console.error.bind(console));<br>    </script><br><br></head><br><body><br>    <my-app>Loading…</my-app><br></body><br></html>\n\n<h2 id=\"9-Using-Systemjs-to-load-Angular-2-scripts\"><a href=\"#9-Using-Systemjs-to-load-Angular-2-scripts\" class=\"headerlink\" title=\"9. Using Systemjs to load Angular 2 scripts\"></a>9. Using Systemjs to load Angular 2 scripts</h2><p>If you observe “index.html” you will notice that we are referring <em><strong>systemjs.config.js</strong></em>, but where are Angular 2 related files. This is were the Systemjs configuration file will help us to load all necessary files. Create systemjs.config.js and copy below code. Configuration code is pretty simple - Looks for @Angular folder for packages, loads RxJs, hand written scripts related to application.</p>\n<p>(function(global) {</p>\n<p>  // map tells the System loader where to look for things<br>  var map = {<br>    ‘app’:                        ‘appScripts’, // ‘dist’,<br>    ‘rxjs’:                       ‘libs/rxjs’,<br>    ‘angular2-in-memory-web-api’: ‘libs/angular2-in-memory-web-api’,<br>    ‘@angular’:                   ‘libs/@angular’<br>  };</p>\n<p>  // packages tells the System loader how to load when no filename and/or no extension<br>  var packages = {<br>    ‘app’:                        { main: ‘boot.js’,  defaultExtension: ‘js’ },<br>    ‘rxjs’:                       { defaultExtension: ‘js’ },<br>    ‘angular2-in-memory-web-api’: { defaultExtension: ‘js’ },<br>  };</p>\n<p>  var packageNames = [<br>    ‘@angular/common’,<br>    ‘@angular/compiler’,<br>    ‘@angular/core’,<br>    ‘@angular/http’,<br>    ‘@angular/platform-browser’,<br>    ‘@angular/platform-browser-dynamic’,<br>    ‘@angular/router’,<br>    ‘@angular/router-deprecated’,<br>    ‘@angular/testing’,<br>    ‘@angular/upgrade’,<br>  ];</p>\n<p>  // add package entries for angular packages in the form ‘@angular/common’: { main: ‘index.js’, defaultExtension: ‘js’ }<br>  packageNames.forEach(function(pkgName) {<br>    packages[pkgName] = { main: ‘index.js’, defaultExtension: ‘js’ };<br>  });</p>\n<p>  var config = {<br>    map: map,<br>    packages: packages<br>  }</p>\n<p>  // filterSystemConfig - index.html’s chance to modify config before we register it.<br>  if (global.filterSystemConfig) { global.filterSystemConfig(config); }</p>\n<p>  System.config(config);</p>\n<p>})(this);</p>\n<h2 id=\"10-Running-application-using-lite-server\"><a href=\"#10-Running-application-using-lite-server\" class=\"headerlink\" title=\"10. Running application using lite-server\"></a>10. Running application using lite-server</h2><p>I prefer using <strong>lite-server</strong> when working with Visual Studio Code is that it does lots of things like open browser, syncing any changes and more. When in VS Code, press F1 –&gt; go for “<strong>Run Task</strong>“ and click “<strong>default</strong>“ - Gulp Task described above. It does create “<strong>libs</strong>“, “<strong>appScripts</strong>“ folder under <em>wwwroot</em>; ouput window shows that Gulp <strong>watch</strong> task is running and looking for changes. [caption id=”attachment_385” align=”aligncenter” width=”1266”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/runningTasks.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/runningTasks.gif\" alt=\"Angular 2\"></a> Running Gulp Tasks in VS Code[/caption] Open <strong>wwwroot</strong> in console and type “<em>lite-server</em>“ to see magic, everything works perfectly !! [caption id=”attachment_384” align=”aligncenter” width=”1266”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/runHTML.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/runHTML.gif\" alt=\"Everything get reflected on save !!\"></a> Everything get reflected on save !![/caption] This project is available on <a href=\"https://github.com/mithunvp/Angular2AspNetCoreDemo\" target=\"_blank\" rel=\"noopener\">Github</a>, have a look.  Also Checkout Angular 2 in ASP.NET Core 1.0 using <a href=\"http://www.mithunvp.com/angular-2-in-asp-net-5-typescript-visual-studio-2015/\">Visual Studio 2015 IDE</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/start-2-300x154.png\" alt=\"Angular 2\">Angular 2 in ASP.NET Core 1.0 are going to redefine web development experience for developers. Thinking of creating ASP.NET website outside Visual Studio IDE was nightmare, but with advent of ASP.NET Core 1.0 as truly open source cross-platform technology it so exciting to create these apps without Visual Studio IDE In this tutorial I will summaries steps of  using Angular 2 in ASP.NET Core 1.0 using Visual Studio Code as editor not as IDE. These steps can be similar if want to work on Linux or Mac OS.</p>\n<blockquote>\n<p>Updated to Angular 2 RC1 on ASP.NET Core 1.0</p>\n</blockquote>\n<p>What we will learn? 1. Create ASP.NET Core 1.0 web app using ASPNET Yeoman 2. Create package.json and npm install 3. Moving Angular 2 files to <em><strong>wwwroot</strong></em> using Gulp tasks 4. Creating TypeScript project using <em>tsconfig.json</em> 5. Creating Gulp task to transpile TypeScript 6. Adding Gulp watch tasks for any changes in code 7. Configure Build Tasks 8. Running application using lite-server So let’s get started, I used Windows 7 OS with <em>NPM (Node)</em>, TypeScript, Gulp, lite-server installed globally. These steps might similar in Mac OS or Linux or other Windows OS. ASP.NET Core 1.0 needs to set up as well.</p>\n<h2 id=\"Step-1-Create-ASP-NET-Core-1-0-web-app-using-ASPNET-Yeoman-generator\"><a href=\"#Step-1-Create-ASP-NET-Core-1-0-web-app-using-ASPNET-Yeoman-generator\" class=\"headerlink\" title=\"Step 1: Create ASP.NET Core 1.0 web app using ASPNET Yeoman generator\"></a>Step 1: Create ASP.NET Core 1.0 web app using ASPNET Yeoman generator</h2><p>It’s interesting to know that ASP.NET is not confined to Visual Studio IDE alone, its must to refer <a href=\"http://www.mithunvp.com/asp-net-core-visual-studio-code-yeoman/\">Create web applications using Yeoman in Visual Studio Code</a></p>\n<h2 id=\"Step-2-Create-package-json-add-Angular-2-and-other-packages-then-run-npm-install\"><a href=\"#Step-2-Create-package-json-add-Angular-2-and-other-packages-then-run-npm-install\" class=\"headerlink\" title=\"Step 2: Create package.json, add Angular 2 and other packages then run npm install\"></a>Step 2: Create package.json, add Angular 2 and other packages then run npm install</h2><p>Angular 2 along with other dependent packages needs to be included in <strong>package.json</strong>. List of packages needed can be found from <a href=\"https://angular.io/docs/ts/latest/quickstart.html\" target=\"_blank\" rel=\"noopener\">5 min quickstart of Angular2 website</a> Create <strong>package.json</strong> file using <em>ASPNET yeoman generator</em> or manually create and copy below code. After that open folder containing project in command prompt and run <strong>npm install</strong> to install all the packages. Along with Angular 2, I have included bootstrap and Jquery packages so that I can use them later.</p>\n<p>{<br>    “version”: “0.0.0”,<br>    “name”: “Angular2AspNetCoreDemo”,<br>    “dependencies”: {<br>        “@angular/common”: “2.0.0-rc.1”,<br>        “@angular/compiler”: “2.0.0-rc.1”,<br>        “@angular/core”: “2.0.0-rc.1”,<br>        “@angular/http”: “2.0.0-rc.1”,<br>        “@angular/platform-browser”: “2.0.0-rc.1”,<br>        “@angular/platform-browser-dynamic”: “2.0.0-rc.1”,<br>        “@angular/router”: “2.0.0-rc.1”,<br>        “@angular/router-deprecated”: “2.0.0-rc.1”,<br>        “@angular/upgrade”: “2.0.0-rc.1”,</p>\n<pre><code>    &quot;systemjs&quot;: &quot;0.19.27&quot;,\n    &quot;es6-shim&quot;: &quot;^0.35.0&quot;,\n    &quot;reflect-metadata&quot;: &quot;^0.1.3&quot;,\n    &quot;rxjs&quot;: &quot;5.0.0-beta.6&quot;,\n    &quot;zone.js&quot;: &quot;^0.6.12&quot;,\n\n    &quot;angular2-in-memory-web-api&quot;: &quot;0.0.7&quot;,\n    &quot;bootstrap&quot;: &quot;^3.3.6&quot;\n},\n&quot;devDependencies&quot;: {\n    &quot;typescript&quot;: &quot;^1.8.10&quot;,\n    &quot;gulp&quot;: &quot;^3.9.1&quot;,\n    &quot;path&quot;: &quot;^0.12.7&quot;,\n    &quot;gulp-clean&quot;: &quot;^0.3.2&quot;,\n    &quot;fs&quot;: &quot;^0.0.2&quot;,\n    &quot;gulp-concat&quot;: &quot;^2.6.0&quot;,\n    &quot;gulp-typescript&quot;: &quot;^2.13.1&quot;,\n    &quot;lite-server&quot;: &quot;^2.2.0&quot;,\n    &quot;typings&quot;: &quot;^0.8.1&quot;,\n    &quot;gulp-tsc&quot;: &quot;^1.1.5&quot;\n}\n</code></pre><p>}</p>\n<p>  [caption id=”attachment_378” align=”alignleft” width=”1266”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/npminstall-ng2.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/npminstall-ng2.png\" alt=\"Angular 2\"></a> package.json and NPM install (Older Image)[/caption] If you just observe now in explorer, <strong>node_modules</strong> folder will created with all packages downloaded as per <em>package.json</em></p>\n<h2 id=\"Step-3-Moving-Angular-2-files-to-wwwroot-using-Gulp-tasks\"><a href=\"#Step-3-Moving-Angular-2-files-to-wwwroot-using-Gulp-tasks\" class=\"headerlink\" title=\"Step 3: Moving Angular 2 files to wwwroot using Gulp tasks\"></a>Step 3: Moving Angular 2 files to <em>wwwroot</em> using Gulp tasks</h2><p>In ASP.NET Core 1.0 the <em><strong>wwwroot</strong></em> folder acts website root folder, so all static files like scripts, images, CSS etc should be placed this folder. Now that <em>Angular 2</em> packages were downloaded into _<strong>node_modules</strong>_ folder, which contains numerous files. We are not really interested to include them project as well final deployment related files. With this intention in mind, we will move files from _node_modules_ to <em>wwwroot</em> using <strong>GULP</strong> tasks. It will automate copying of the files. The code is provided in following steps, please refer Step 6</p>\n<h2 id=\"Step-4-Creating-TypeScript-project-using-tsconfig-json\"><a href=\"#Step-4-Creating-TypeScript-project-using-tsconfig-json\" class=\"headerlink\" title=\"Step 4: Creating TypeScript project using tsconfig.json\"></a>Step 4: Creating TypeScript project using tsconfig.json</h2><p><strong>Angular 2</strong> with <strong>TypeScript</strong> is something interesting to work with, in this web application we need TypeScript virtual project by including <em>tsconfig.json</em> file.</p>\n<blockquote>\n<p><strong>tsconfig.json</strong> is TypeScript configuration file which does tell compiler what needs to be with TS files.</p>\n</blockquote>\n<p>Create a folder “<strong><em>scripts</em></strong>“, add <em><strong>tsconfig.json</strong></em> using yo commands or add the file manually. Copy below code to <em>tsconfig.json</em>. It tells TypeScript compiler to move tranpiled TS files to “outDir” by targeting them es5 standards. Any TS files in _node_modules_ is excluded, <em>commonjs</em> module loading is selected while initializing the JS files.</p>\n<p>{<br>  “compilerOptions”: {<br>    “emitDecoratorMetadata”: true,<br>    “experimentalDecorators”: true,<br>    “module”: “commonjs”,<br>    “noEmitOnError”: true,<br>    “noImplicitAny”: false,<br>    “outDir”: “../wwwroot/appScripts/“,<br>    “removeComments”: false,<br>    “sourceMap”: true,<br>    “target”: “es5”,<br>    “moduleResolution”: “node”,<br>    “suppressImplicitAnyIndexErrors”: true<br>  },<br>  “exclude”: [<br>    “node_modules”,<br>    “typings/main”,<br>    “typings/main.d.ts”<br>  ]<br>}</p>\n<h2 id=\"Step-5-Creating-Gulp-tasks-to-transpile-TypeScript-code\"><a href=\"#Step-5-Creating-Gulp-tasks-to-transpile-TypeScript-code\" class=\"headerlink\" title=\"Step 5: Creating Gulp tasks to transpile TypeScript code\"></a>Step 5: Creating Gulp tasks to transpile TypeScript code</h2><p>However if we had used Visual Studio IDE then this step was not necessary because IDE would have performed this work of transpile (compiling) TypeScript files to JavaScript files. We are working with Visual Studio Code, its just code editor so need to tell it to do transpile work for us because ultimately JS files are the one’s that need to be referred in HTML files. The coolest option for this is to use <strong>Gulp-TypeScript</strong> package to perform this operation. After installing <a href=\"https://www.npmjs.com/package/gulp-typescript\" target=\"_blank\" rel=\"noopener\"><em>Gulp-Typescript</em></a>, we need to tasks in <em>gulpfile.js</em> so that we can do transpile work. I will be explaining gulp tasks in Step 6</p>\n<h2 id=\"Step-6-Adding-Gulp-watch-tasks-to-look-for-changes\"><a href=\"#Step-6-Adding-Gulp-watch-tasks-to-look-for-changes\" class=\"headerlink\" title=\"Step 6: Adding Gulp watch tasks to look for changes\"></a>Step 6: Adding Gulp watch tasks to look for changes</h2><p>Imaging what if do any code changes in either Javascript, CSS or mostly importantly TypeScript files(they are doing actual Angular 2 work) and those changes are reflected instantly on browser. Yes, this is possible using Gulp tasks which is below. There are various ways to this, but Gulp Tasks are pretty easy to understand. Create <strong>gulpfile.js</strong> file and copy code</p>\n<p>var ts = require(‘gulp-typescript’);<br>var gulp = require(‘gulp’);<br>var clean = require(‘gulp-clean’);</p>\n<p>var destPath = ‘./wwwroot/libs/‘;</p>\n<p>// Delete the dist directory<br>gulp.task(‘clean’, function() {<br>    return gulp.src(destPath)<br>        .pipe(clean());<br>});</p>\n<p>//Moves Angular 2 &amp; related scripts to wwwroot folder of ASP.NET Core app<br>gulp.task(“scriptsNStyles”, () =&gt; {<br>    gulp.src([<br>            ‘es6-shim/es6-shim.min.js’,<br>            ‘systemjs/dist/system-polyfills.js’,<br>            ‘systemjs/dist/system.src.js’,<br>            ‘reflect-metadata/Reflect.js’,<br>            ‘rxjs/<strong>‘,<br>            ‘zone.js/dist/</strong>‘,<br>            ‘@angular/<strong>‘,<br>            ‘jquery/dist/jquery.<em>js’,<br>            ‘bootstrap/dist/js/bootstrap</em>.js’,<br>        ], {<br>            cwd: “node_modules/</strong>“<br>        })<br>        .pipe(gulp.dest(“./wwwroot/libs”));</p>\n<pre><code>gulp.src(\\[\n    &apos;node_modules/bootstrap/dist/css/bootstrap.css&apos;\n\\]).pipe(gulp.dest(&apos;./wwwroot/libs/css&apos;));\n</code></pre><p>});</p>\n<p>//ts - task to transpile TypeScript files to JavaScript using Gulp-TypeScript<br>var tsProject = ts.createProject(‘scripts/tsconfig.json’);<br>gulp.task(‘ts’, function(done) {<br>    var tsResult = gulp.src([<br>            “scripts/*.ts”<br>        ])<br>        .pipe(ts(tsProject), undefined, ts.reporter.fullReporter());<br>    return tsResult.js.pipe(gulp.dest(‘./wwwroot/appScripts’));<br>});</p>\n<p>gulp.task(‘watch’, [‘watch.ts’]);</p>\n<p>gulp.task(‘watch.ts’, [‘ts’], function() {<br>    return gulp.watch(‘scripts/*.ts’, [‘ts’]);<br>});</p>\n<p>gulp.task(‘default’, [‘scriptsNStyles’, ‘watch’]);</p>\n<p>The gulp tasks code under is self explanatory with commented lines, to give much better visual representation go through below image. You might think so much get started with Angular 2 in ASP.NET Core 1.0, not really this is one time operation; once done you can just create html pages, add TypeScript to work with Angular 2. [caption id=”attachment_380” align=”aligncenter” width=”1191”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/gulpfileVisualRepresentaion.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/gulpfileVisualRepresentaion.png\" alt=\"Angular 2\"></a> Gulp Tasks for Angular 2 in ASP.NET Core 1.0[/caption]</p>\n<h2 id=\"Step-7-Configure-Build-Tasks-in-Visual-Studio-Code\"><a href=\"#Step-7-Configure-Build-Tasks-in-Visual-Studio-Code\" class=\"headerlink\" title=\"Step 7: Configure Build Tasks in Visual Studio Code\"></a>Step 7: Configure Build Tasks in Visual Studio Code</h2><p>If we want to run all gulp tasks above on <em>Alt+Cntrl+B (i.e. Build)</em>, we need to <strong>tasks.json</strong> file and add these gulp tasks so that we can work with them.</p>\n<blockquote>\n<p> <strong>tasks.json</strong> is Task Runner for Visual Studio Code</p>\n</blockquote>\n<p>Just do _Alt+Cntrl+B (i.e. Build), _it will prompt that no task runner is configured do you want one. Just click on “<strong>Configure Task Runner</strong>“ and copy below code in it. [caption id=”attachment_381” align=”aligncenter” width=”1207”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/taskRunner.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/taskRunner.png\" alt=\"Angular 2\"></a> Configure Task Runner - tasks.json (older image)[/caption]</p>\n<p>{<br>    “version”: “0.1.0”,<br>    “command”: “gulp”,<br>    “isShellCommand”: true,<br>    “args”: [<br>        “–no-color”<br>    ],<br>    “tasks”: [<br>        {<br>            “taskName”: “scriptsNStyles”,<br>            “isBuildCommand”: true,<br>            “showOutput”: “always”<br>        },<br>        {<br>            “taskName”: “clean”,<br>            “isBuildCommand”: true,<br>            “showOutput”: “always”<br>        },<br>        {<br>            “taskName”: “ts”,<br>            “isBuildCommand”: true,<br>            “showOutput”: “always”,<br>            “problemMatcher”: “$tsc”<br>        },<br>        {<br>            “taskName”: “watch”,<br>            “isBuildCommand”: true,<br>            “showOutput”: “always”<br>        },<br>        {<br>            “taskName”: “watch.ts”,<br>            “isBuildCommand”: true,<br>            “showOutput”: “always”<br>        },<br>        {<br>            “taskName”: “default”,<br>            “isBuildCommand”: true,<br>            “showOutput”: “always”<br>        }<br>    ]<br>}</p>\n<h2 id=\"Step-8-Adding-Angular-2-code-amp-refer-them-in-index-html\"><a href=\"#Step-8-Adding-Angular-2-code-amp-refer-them-in-index-html\" class=\"headerlink\" title=\"Step 8: Adding Angular 2 code &amp; refer them in index.html\"></a>Step 8: Adding Angular 2 code &amp; refer them in index.html</h2><p>From Angular 2 quick start link, it tells to create “<strong>app.ts</strong>“ and “<strong>boot.ts</strong>“ which acts as Angular component and bootstrap respectively. Just copy below code into <em>app.ts, boot.ts</em> and _index.html. _We are set now, next step is running application.</p>\n<p>///<reference path=\"./../typings/browser/ambient/es6-shim/index.d.ts\"><br>import {bootstrap}    from ‘@angular/platform-browser-dynamic’;<br>import {AppComponent} from ‘./app’;</reference></p>\n<p>bootstrap(AppComponent);</p>\n<p>import {<br>    Component<br>} from ‘@angular/core’;<br>@Component({<br>    selector: ‘my-app’,<br>    template: <code>&lt;h2&gt; My Skills are : { {mySkill }}&lt;/h2&gt;</code><br>})</p>\n<p>export class AppComponent {<br>    mySkill: string;<br>    skills = [‘ASP.NET Core 1.0’, ‘Angular’, ‘C#’, ‘SQL’, ‘JSON’];</p>\n<pre><code>constructor() {\n    this.mySkill = this.skills\\[1\\];\n}\n</code></pre><p>}</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<html><br><head><br>    <meta charset=\"utf-8\"><br>    <title>Angular 2 with ASP.NET Core 1.0</title><br>    &lt;!-- 1. Load libraries –&gt;<br>    <link href=\"libs/css/bootstrap.css\" rel=\"stylesheet\"><br>    <script src=\"libs/es6-shim/es6-shim.min.js\"></script><br>    <script src=\"libs/zone.js/dist/zone.js\"></script><br>    <script src=\"libs/reflect-metadata/Reflect.js\"></script><br>    <script src=\"libs/systemjs/dist/system.src.js\"></script><br><br><br>    &lt;!-- 2. Configure SystemJS –&gt;<br>    <script src=\"systemjs.config.js\"></script><br>    <script><br>        System.import(‘appScripts/boot’)<br>              .then(null, console.error.bind(console));<br>    </script><br><br></head><br><body><br>    <my-app>Loading…</my-app><br></body><br></html>\n\n<h2 id=\"9-Using-Systemjs-to-load-Angular-2-scripts\"><a href=\"#9-Using-Systemjs-to-load-Angular-2-scripts\" class=\"headerlink\" title=\"9. Using Systemjs to load Angular 2 scripts\"></a>9. Using Systemjs to load Angular 2 scripts</h2><p>If you observe “index.html” you will notice that we are referring <em><strong>systemjs.config.js</strong></em>, but where are Angular 2 related files. This is were the Systemjs configuration file will help us to load all necessary files. Create systemjs.config.js and copy below code. Configuration code is pretty simple - Looks for @Angular folder for packages, loads RxJs, hand written scripts related to application.</p>\n<p>(function(global) {</p>\n<p>  // map tells the System loader where to look for things<br>  var map = {<br>    ‘app’:                        ‘appScripts’, // ‘dist’,<br>    ‘rxjs’:                       ‘libs/rxjs’,<br>    ‘angular2-in-memory-web-api’: ‘libs/angular2-in-memory-web-api’,<br>    ‘@angular’:                   ‘libs/@angular’<br>  };</p>\n<p>  // packages tells the System loader how to load when no filename and/or no extension<br>  var packages = {<br>    ‘app’:                        { main: ‘boot.js’,  defaultExtension: ‘js’ },<br>    ‘rxjs’:                       { defaultExtension: ‘js’ },<br>    ‘angular2-in-memory-web-api’: { defaultExtension: ‘js’ },<br>  };</p>\n<p>  var packageNames = [<br>    ‘@angular/common’,<br>    ‘@angular/compiler’,<br>    ‘@angular/core’,<br>    ‘@angular/http’,<br>    ‘@angular/platform-browser’,<br>    ‘@angular/platform-browser-dynamic’,<br>    ‘@angular/router’,<br>    ‘@angular/router-deprecated’,<br>    ‘@angular/testing’,<br>    ‘@angular/upgrade’,<br>  ];</p>\n<p>  // add package entries for angular packages in the form ‘@angular/common’: { main: ‘index.js’, defaultExtension: ‘js’ }<br>  packageNames.forEach(function(pkgName) {<br>    packages[pkgName] = { main: ‘index.js’, defaultExtension: ‘js’ };<br>  });</p>\n<p>  var config = {<br>    map: map,<br>    packages: packages<br>  }</p>\n<p>  // filterSystemConfig - index.html’s chance to modify config before we register it.<br>  if (global.filterSystemConfig) { global.filterSystemConfig(config); }</p>\n<p>  System.config(config);</p>\n<p>})(this);</p>\n<h2 id=\"10-Running-application-using-lite-server\"><a href=\"#10-Running-application-using-lite-server\" class=\"headerlink\" title=\"10. Running application using lite-server\"></a>10. Running application using lite-server</h2><p>I prefer using <strong>lite-server</strong> when working with Visual Studio Code is that it does lots of things like open browser, syncing any changes and more. When in VS Code, press F1 –&gt; go for “<strong>Run Task</strong>“ and click “<strong>default</strong>“ - Gulp Task described above. It does create “<strong>libs</strong>“, “<strong>appScripts</strong>“ folder under <em>wwwroot</em>; ouput window shows that Gulp <strong>watch</strong> task is running and looking for changes. [caption id=”attachment_385” align=”aligncenter” width=”1266”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/runningTasks.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/runningTasks.gif\" alt=\"Angular 2\"></a> Running Gulp Tasks in VS Code[/caption] Open <strong>wwwroot</strong> in console and type “<em>lite-server</em>“ to see magic, everything works perfectly !! [caption id=”attachment_384” align=”aligncenter” width=”1266”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/runHTML.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/runHTML.gif\" alt=\"Everything get reflected on save !!\"></a> Everything get reflected on save !![/caption] This project is available on <a href=\"https://github.com/mithunvp/Angular2AspNetCoreDemo\" target=\"_blank\" rel=\"noopener\">Github</a>, have a look.  Also Checkout Angular 2 in ASP.NET Core 1.0 using <a href=\"http://www.mithunvp.com/angular-2-in-asp-net-5-typescript-visual-studio-2015/\">Visual Studio 2015 IDE</a>.</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Angular 2 in ASP.NET Core 1.0 using Visual Studio Code and TypeScript","path":"angular-2-asp-net-core-visual-studio-code-typescript/","eyeCatchImage":null,"excerpt":null,"date":"2016-02-19T14:20:28.000Z","pv":0,"totalPV":0,"categories":"Angular 2 > ASP.NET Core 1.0 > TypeScript","tags":["Angular2","Asp.NET Core 1.0","Visual Studio Code"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Starting Angular 2 in ASP.NET Core with TypeScript using Visual Studio 2015","url":"303.html","id":"303","date":"2016-01-06T17:43:06.000Z","_content":"\nThis tutorial aims for starting Angular 2 in ASP.NET Core using Visual Studio 2015. The release of Angular 2, ASP.NET Core RC is becoming interesting to build SPA. I have compiled the steps involved in starting to learn Angular 2. This is detailed explanation, you will feel much easier at end of article.\n\n> _October 1 2016 - Article updated with ASP.NET Core, Angular 2 Final release with Webpack as module bundler ._\n\nStep 1 : Creating an empty ASP.NET Core project\n-----------------------------------------------\n\nOpen Visual Studio 2015 Community Edition Update 3, Select New Web Project naming it “**ngCoreContacts**” and select “_Empty_” project template. _**Don't forget to install new web tools for [ASP.NET Core 1.0](http://www.asp.net/core)**_ \\[caption id=\"attachment_445\" align=\"aligncenter\" width=\"476\"\\][![Angular 2 in ASP.Net Core](http://www.mithunvp.com/wp-content/uploads/2016/01/aspnetcore.png)](http://www.mithunvp.com/wp-content/uploads/2016/01/aspnetcore.png) Creating Empty Asp.NET Core app\\[/caption\\] I used Visual Studio 2015 Community Edition Update 3(Must update), **TypeScript 2.0 (must)**, latest NPM, Gulp.\n\n> We are writing Angular 2 in ASP.NET Core with **TypeScript** but we can use **_JavaScript_** and _**Dart** . TypeScript is personal choice._\n\nStep 2: Configure ASP.NET Core to serve Static Files\n----------------------------------------------------\n\n_ASP.NET Core_ is designed as pluggable framework to include and use only necessary packages, instead of including too many initial stuff. Lets create HTML file named “**_index.html_**” under **wwwroot** folder. Right click on **wwwroot** folder, Add New Item and create _index.html_ file. This HTML page will act as default page.\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Angular 2 with ASP.NET Core</title>\n</head>\n<body>\n    <h1>Demo of Angular 2 using ASP.NET Core with Visual Studio 2015</h1>\n</body>\n</html>\n\nFor ASP.NET Core to serve static files, we need to add _**StaticFiles**_ middle ware in Configure method of **Startup.cs** page. Ensure that packages are restored properly. _**project.json**_ is redesigned to make it better, we have **Static Files middleware** to serve static assets like HTML, JS files etc.\n\npublic void Configure(IApplicationBuilder app)\n        {\n            app.UseDefaultFiles();\n            app.UseStaticFiles();\n        }\n\n{\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.1\",\n      \"type\": \"platform\"\n    },\n    \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0\",\n    \"Microsoft.AspNetCore.StaticFiles\": \"1.0.0\"\n  },\n\n  \"tools\": {\n    \"Microsoft.AspNetCore.Server.IISIntegration.Tools\": \"1.0.0-preview2-final\"\n  },\n\n  \"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"imports\": \\[\n        \"dotnet5.6\",\n        \"portable-net45+win8\"\n      \\]\n    }\n  },\n\n  \"buildOptions\": {\n    \"emitEntryPoint\": true,\n    \"preserveCompilationContext\": true,\n    \"compile\": {\n      \"exclude\": \\[ \"node_modules\" \\]\n    }\n  },\n\n  \"runtimeOptions\": {\n    \"configProperties\": {\n      \"System.GC.Server\": true\n    }\n  },\n\n  \"publishOptions\": {\n    \"include\": \\[\n      \"wwwroot\",\n      \"web.config\"\n    \\]\n  },\n\n  \"scripts\": {    \n    \"postpublish\": \\[ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" \\]\n  }\n}\n\n> Interestingly _**Program.cs**_ is entry point of application execution just like void main().\n\nRun the application now, ASP.NET Core renders static HTML page. **Delete this index.html page**, we will be injecting this dynamically later. Till now you saw demonstration of **\"**wwwroot**\"** as root folder for ASP.NET Core web apps.\n\nStep 3: Angular 2 in ASP.NET Core\n---------------------------------\n\nAngular 2 is famously claiming to be ONE Framework for MOBILE and DESKTOP apps. There's won't be any breaking changes after final release. This tutorial refers [5 MIN QUICK START](https://angular.io/docs/ts/latest/quickstart.html) for getting started, it's more focused on other light weight code editors; but here we are using Visual Studio 2015 Community Edition Update 3 for its built in TypeScript tooling and other features. We will be using **Webpack** for module bundler, it's an excellent alternative to the systemJS approach. To know more about inner details of read [\"webpack and Angular 2](https://angular.io/docs/ts/latest/guide/webpack.html#!#configure-webpack) Majority of webpack scripting is based on AngularClass's [angular2-webpack-starter](https://github.com/AngularClass/angular2-webpack-starter). I have modified according to ASP.NET Core web apps.\n\n> ASP.NET Core used here is SPA type of website, no MVC used here.\n\nWhy I choose Webpack for Angular 2 in ASP.NET Core?\n\n*   Webpack is much simpler to code, plugins based working with static files.\n*   Webpack 2 with dev-server runs application in memory, live reloading & compilation is easy. It provides tree shaking to eliminate unused code.\n*   Integrating with 3rd party packages like Angular Material 2, AngularFire, bootstrap are just one line inclusion\n*   AngularClass webpack  starter kit provides HMR (Hot Module Replacement) - maintain execution state while code gets modified.\n*   Webpack is adopted by Angular CLI, AngularService by Microsoft for making bundles much smaller.\n\nStep 4: Adding NPM Configuration file for Angular 2 packages\n------------------------------------------------------------\n\nAngular 2 team is pushing the code changes using NPM rather than CDN or any other source, due to this we need to add NPM configuration file (_package.json_) to this ASP.NET Core application. Right Click on \"**ngCoreContacts**\", add new file \"_NPM Configuration File_\"; by default **package.json** is added to ASP.NET Core project. _This acts Node Package Manager (NPM) file, a must for adding packages for Angular 2_ From the Angular 2 Quick start provided above, we need to add dependencies for required for Angular 2 in ASP.NET Core application. Copy Paste below configuration in **package.json** file\n\n{\n    \"version\": \"1.0.0\",\n    \"description\": \"ngcorecontacts\",\n    \"main\": \"wwwroot/index.html\",\n  \"scripts\": {\n    \"build:dev\": \"webpack --config config/webpack.dev.js --progress --profile\",    \n    \"build:prod\": \"webpack --config config/webpack.prod.js  --progress --profile --bail\",\n    \"build\": \"npm run build:dev\",    \n    \"server:dev:hmr\": \"npm run server:dev -- --inline --hot\",\n    \"server:dev\": \"webpack-dev-server --config config/webpack.dev.js --progress --profile --watch --content-base clientsrc/\",\n    \"server:prod\": \"http-server dist --cors\",\n    \"server\": \"npm run server:dev\",\n    \"start:hmr\": \"npm run server:dev:hmr\",\n    \"start\": \"npm run server:dev\",\n    \"version\": \"npm run build\",\n    \"watch:dev:hmr\": \"npm run watch:dev -- --hot\",\n    \"watch:dev\": \"npm run build:dev -- --watch\",\n    \"watch:prod\": \"npm run build:prod -- --watch\",\n    \"watch:test\": \"npm run test -- --auto-watch --no-single-run\",\n    \"watch\": \"npm run watch:dev\",    \n    \"webpack-dev-server\": \"webpack-dev-server\",\n    \"webpack\": \"webpack\"\n  },\n  \"dependencies\": {\n    \"@angular/common\": \"~2.0.1\",\n    \"@angular/compiler\": \"~2.0.1\",\n    \"@angular/core\": \"~2.0.1\",\n    \"@angular/forms\": \"~2.0.1\",\n    \"@angular/http\": \"~2.0.1\",\n    \"@angular/platform-browser\": \"~2.0.1\",\n    \"@angular/platform-browser-dynamic\": \"~2.0.1\",\n    \"@angular/router\": \"~3.0.1\",\n    \"@angular/upgrade\": \"~2.0.1\",\n    \"angular-in-memory-web-api\": \"~0.1.1\",\n    \"@angularclass/conventions-loader\": \"^1.0.2\",\n    \"@angularclass/hmr\": \"~1.2.0\",\n    \"@angularclass/hmr-loader\": \"~3.0.2\",\n    \"@angularclass/request-idle-callback\": \"^1.0.7\",\n    \"@angularclass/webpack-toolkit\": \"^1.3.3\",\n    \"assets-webpack-plugin\": \"^3.4.0\",\n    \"core-js\": \"^2.4.1\",\n    \"http-server\": \"^0.9.0\",\n    \"ie-shim\": \"^0.1.0\",\n    \"rxjs\": \"5.0.0-beta.12\",\n    \"zone.js\": \"~0.6.17\",\n    \"@angular/material\": \"^2.0.0-alpha.9\",\n    \"hammerjs\": \"^2.0.8\"\n  },\n  \"devDependencies\": {\n    \"@types/hammerjs\": \"^2.0.33\",\n    \"@types/jasmine\": \"^2.2.34\",\n    \"@types/node\": \"^6.0.38\",\n    \"@types/source-map\": \"^0.1.27\",\n    \"@types/uglify-js\": \"^2.0.27\",\n    \"@types/webpack\": \"^1.12.34\",\n    \"angular2-template-loader\": \"^0.5.0\",\n    \"awesome-typescript-loader\": \"^2.2.1\",\n    \"codelyzer\": \"~0.0.28\",\n    \"copy-webpack-plugin\": \"^3.0.1\",\n    \"clean-webpack-plugin\": \"^0.1.10\",\n    \"css-loader\": \"^0.25.0\",\n    \"exports-loader\": \"^0.6.3\",\n    \"expose-loader\": \"^0.7.1\",\n    \"file-loader\": \"^0.9.0\",\n    \"gh-pages\": \"^0.11.0\",\n    \"html-webpack-plugin\": \"^2.21.0\",\n    \"imports-loader\": \"^0.6.5\",\n    \"json-loader\": \"^0.5.4\",\n    \"parse5\": \"^1.3.2\",\n    \"phantomjs\": \"^2.1.7\",\n    \"raw-loader\": \"0.5.1\",\n    \"rimraf\": \"^2.5.2\",\n    \"source-map-loader\": \"^0.1.5\",\n    \"string-replace-loader\": \"1.0.5\",\n    \"style-loader\": \"^0.13.1\",\n    \"sass-loader\": \"^3.1.2\",    \n    \"to-string-loader\": \"^1.1.4\",\n    \"ts-helpers\": \"1.1.1\",\n    \"ts-node\": \"^1.3.0\",\n    \"tslint\": \"3.15.1\",\n    \"tslint-loader\": \"^2.1.3\",\n    \"typedoc\": \"^0.4.5\",\n    \"typescript\": \"2.0.3\",\n    \"url-loader\": \"^0.5.7\",\n    \"webpack\": \"2.1.0-beta.22\",\n    \"webpack-dev-middleware\": \"^1.6.1\",\n    \"webpack-dev-server\": \"^2.1.0-beta.2\",\n    \"webpack-md5-hash\": \"^0.0.5\",\n    \"webpack-merge\": \"^0.14.1\"\n  }\n}\n\nRight after saving this, ASP.NET Core starts restoring the packages. It would download all packages mentioned in _dependencies_ section of above _package.json_. Sometimes in solution explorer you might see 'Dependencies - not installed', don't worry this bug in tooling. All the npm packages are installed.\n\nStep 5: Add TypeScript configuration file - must for Angular 2 in ASP.NET Core using TypeScript\n-----------------------------------------------------------------------------------------------\n\nWe are creating Angular 2 in ASP.NET Core starting with TypeScript, this obvious reason adds to include TypeScript Configuration file which does work of transpiling it to JavaScript, module loading, target ES5 standards. Refer my article on [Getting Started with TypeScript](http://www.mithunvp.com/typescript-in-asp-net-5-using-visual-studio-2015/) if you just want beginner intro on it. Add \"_**tsconfig.json**_\" in the project, copy paste below configuration.\n\n> \"**baseUrl**\" ensures that TypeScript files are transpiled to JavaScript from the '**./clientsrc**'. This folder is virtual directory for TypeScript\n\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"sourceMap\": true,\n    \"noEmitHelpers\": true,\n    \"strictNullChecks\": false,\n    \"baseUrl\": \"./clientsrc\",\n    \"paths\": \\[\\],\n    \"lib\": \\[\n      \"dom\",\n      \"es6\"\n    \\],\n    \"types\": \\[\n      \"hammerjs\",      \n      \"node\",      \n      \"source-map\",\n      \"uglify-js\",\n      \"webpack\"\n    \\]\n  },\n  \"exclude\": \\[\n    \"node_modules\",\n    \"dist\"\n  \\],\n  \"awesomeTypescriptLoaderOptions\": {\n    \"forkChecker\": true,\n    \"useWebpackText\": true\n  },\n  \"compileOnSave\": false,\n  \"buildOnSave\": false,\n  \"atom\": { \"rewriteTsconfig\": false }\n}\n\n**It's mandatory to install TypeScript 2.o for working with Angular 2.** At present **typings.json** is not required because we are using [**@types** with TypeScript](https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/). However if your using any other packages which don't have entries in @types then **typings.json** has to be added.\n\nStep 6: Usage of Webpack as module bundler\n------------------------------------------\n\n#### What is Webpack?\n\nWebpack is a powerful module bundler. A bundle is a JavaScript file that incorporate assets that belong together and should be served to the client in a response to a single file request. A bundle can include JavaScript, CSS styles, HTML, and almost any other kind of file. Webpack roams over your application source code, looking for import statements, building a dependency graph, and emitting one (or more) bundles. With plugin \"loaders\" Webpack can preprocess and minify different non-JavaScript files such as TypeScript, SASS, and LESS files. In package.json, we have added **\"**webpack**\"** packages as **\"**devdependencies**\"**. They will perform all bundling work. What webpack does is written in a JavaScript configuration file know as **webpack.config.js**. As always the applications are run in **Development**, **Test** and **Production** environment. There are some common functionalities and some specific to environments. We will focus on **development** and **production** environment to write accordingly. **Development** environment should have source maps for debugging TypeScript files, _minifying bundles of JS, CSS etc files not necessary._ **Production** environment should minify bundles to reduce loading time, do not include source maps. Webpack 2 also does tree shaking i.e. eliminate unused code to further reduce bundle sizes.\n\n> The entire source code is on my [github repo](https://github.com/mithunvp/ng2CoreContacts), fork or clone to play with it.\n\n**webpack.config.js** – Based on environment set **process.env.NODE_ENV**, it runs either dev or prod configurations. **Webpack.common.js** before bundling environment specific files, it performs tasks meant to be used for both environment.\n\n1.  Webpack splits Angular 2 apps into 3 files **polyfills**(to maintain backward compatibility with older browsers) , **vendors**(all JS, CSS, HTML, SCSS, images, JSON etc into one file) and **boot** (application specific files)\n2.  resolve based on various file extensions\n3.  Webpack itself doesn't know what to do with a non-JavaScript file. We teach it to process such files into JavaScript with _**loaders**_. For this, we have written loaders TS, HTML, JSON, Fonts, images\n4.  Any static assets placed in **\"**clientsrc**/assets\"** will be copied to **assets** folder using **CopyWebpackPlugin**\n5.  **CleanWebpackPlugin** cleans **\"**wwwroot**/dist\"** folder every time we run it, so that we get fresh set of files.\n6.  _I told you above to delete the index.html file_, now the **clientsrc/index.html** will be moved to wwwroot using **HtmlWebpackPlugin**. Plus Webpack injects the bundle files i.e. _polyfills_, _vendor_, _boot_ JS files and includes them in HTML script reference.\n\nNow let’s see **webpack.dev.js** for development purpose\n\n1.  Running **\"**webpack**-dev-server\"** – this runs entire application in memory, any changes to source file gets applied immediately\n2.  Loads application in debug mode with source map. Everything run in memory i.e. html, js, static files are loaded in memory.\n3.  Runs the application on localhost 3000 port. _Port can be changed as your convenience_\n\nNow let’s see **webpack.prod.js** for production purpose\n\n1.  Merges all the bundle files and copies to wwwroot.\n2.  Minifies all files to load faster using **UglifyJsPlugin** plugin\n\nStep 7: Writing Angular 2 application\n-------------------------------------\n\nUntil now we created ASP.NET Core app, added TSconfig file, webpack configuration. Now it’s time to write Angular 2 application In the github repo, you can see **\"clientsrc\"** folder. This contains the angular 2 app which gets bundled into using webpack configurations we wrote **\"**Clientsrc**\"** folder has index.html, polyfills.browses.ts, vendor.browsers.ts and mostly importantly **boot.ts** We have **app** folder containing HTML, Angular 2 components and root level module (**app.module.ts**) which gets loaded while bootstrapping application. Some of files might be not interesting now, will focus them in separate articles later.\n\nStep 8: Running the application\n-------------------------------\n\nBefore running make sure you have run command \"npm **install\"**. This might not be needed but still it will ensure all packages are installed. **Now let’s run the application in development mode**\n\n1.  From command line (directory should be same as package.json), type \"**npm start\"** & hit enter. It will start running the webpack_**-dev-server**_ which loads application and listens on localhost:3000.\n2.  When on console it says “bundle is now VALID” then open a browser and navigate to [http://localhost:3000](http://localhost:3000) to see application getting loaded.\n\nNotice **wwwroot** folder, we don’t see any files copied because everything is running in memory. Now that application runs properly on browser, let’s understand how Angular 2 app loads\n\n1.  When browser starts rendering **index.html** page, it encounters **<my-app>Loading...</my-app>** tag.\n2.  Then Angular’s module **platformBrowserDynamic** bootstraps _clientsrc/app/AppModule_ through line _platformBrowserDynamic().bootstrapModule(AppModule)_\n3.  _AppModule_ then loads the component _**app.component.ts**_ which is mentioned in **@NgModule** as bootstrap entry\n4.  **Clientsrc/src/Appcomponent** then resolves the **<my-app>** tag as selector in it and renders UI with TypeScript code.\n\nWhen we enter **\"**npm **start\"** in console to run the application, execution points scripts section of package.json to below code\n\nwebpack-dev-server --config config/webpack.dev.js --progress --profile --watch --content-base clientsrc/\n\nThis invokes webpack_-dev-server_, runs the development config and watches for any changes in _**clientsrc**_ folder. Any changes in this folder will reload application with changes.\n\n> Here ASP.NET Core is just HTML based web app, so running this app as **npm start** to use AngularClass features of reloading, using webpack, Hot module replacement feature.\n\n**Running the application in Production mode** Assuming the application is now ready to deployed, we need to have PROD build. For this run command\n\n//builds app and copies in wwwroot\nNpm run build:prod\n\nNow if you see wwwroot folder, we see the HTML, JS bundle files. This wwwroot folder can be deployed on any web server like IIS or nginx You can either do F5 to run from Visual Studio IDE or run command **npm run server:prod**   \\[caption id=\"attachment_554\" align=\"aligncenter\" width=\"583\"\\][![Angular 2 in ASP.NET Core](http://www.mithunvp.com/wp-content/uploads/2016/01/npmstart.png)](http://www.mithunvp.com/wp-content/uploads/2016/01/npmstart.png) Angular 2 running on ASP.NET Core using Web pack\\[/caption\\] There is Angular 2 application development using [Angular 2 Command Line Interface](http://www.mithunvp.com/build-angular-apps-using-angular-2-cli/) also, it's interesting !!\n\n> Check out source code on my [Github repo ng2CoreContacts](https://github.com/mithunvp/ng2CoreContacts)","source":"_posts/angular-2-in-asp-net-5-typescript-visual-studio-2015.md","raw":"---\ntitle: Starting Angular 2 in ASP.NET Core with TypeScript using Visual Studio 2015\ntags:\n  - Angular2\n  - Asp.NET Core 1.0\nurl: 303.html\nid: 303\ncategories:\n  - Angular 2\n  - ASP.NET Core 1.0\ndate: 2016-01-06 23:13:06\n---\n\nThis tutorial aims for starting Angular 2 in ASP.NET Core using Visual Studio 2015. The release of Angular 2, ASP.NET Core RC is becoming interesting to build SPA. I have compiled the steps involved in starting to learn Angular 2. This is detailed explanation, you will feel much easier at end of article.\n\n> _October 1 2016 - Article updated with ASP.NET Core, Angular 2 Final release with Webpack as module bundler ._\n\nStep 1 : Creating an empty ASP.NET Core project\n-----------------------------------------------\n\nOpen Visual Studio 2015 Community Edition Update 3, Select New Web Project naming it “**ngCoreContacts**” and select “_Empty_” project template. _**Don't forget to install new web tools for [ASP.NET Core 1.0](http://www.asp.net/core)**_ \\[caption id=\"attachment_445\" align=\"aligncenter\" width=\"476\"\\][![Angular 2 in ASP.Net Core](http://www.mithunvp.com/wp-content/uploads/2016/01/aspnetcore.png)](http://www.mithunvp.com/wp-content/uploads/2016/01/aspnetcore.png) Creating Empty Asp.NET Core app\\[/caption\\] I used Visual Studio 2015 Community Edition Update 3(Must update), **TypeScript 2.0 (must)**, latest NPM, Gulp.\n\n> We are writing Angular 2 in ASP.NET Core with **TypeScript** but we can use **_JavaScript_** and _**Dart** . TypeScript is personal choice._\n\nStep 2: Configure ASP.NET Core to serve Static Files\n----------------------------------------------------\n\n_ASP.NET Core_ is designed as pluggable framework to include and use only necessary packages, instead of including too many initial stuff. Lets create HTML file named “**_index.html_**” under **wwwroot** folder. Right click on **wwwroot** folder, Add New Item and create _index.html_ file. This HTML page will act as default page.\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Angular 2 with ASP.NET Core</title>\n</head>\n<body>\n    <h1>Demo of Angular 2 using ASP.NET Core with Visual Studio 2015</h1>\n</body>\n</html>\n\nFor ASP.NET Core to serve static files, we need to add _**StaticFiles**_ middle ware in Configure method of **Startup.cs** page. Ensure that packages are restored properly. _**project.json**_ is redesigned to make it better, we have **Static Files middleware** to serve static assets like HTML, JS files etc.\n\npublic void Configure(IApplicationBuilder app)\n        {\n            app.UseDefaultFiles();\n            app.UseStaticFiles();\n        }\n\n{\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.1\",\n      \"type\": \"platform\"\n    },\n    \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0\",\n    \"Microsoft.AspNetCore.StaticFiles\": \"1.0.0\"\n  },\n\n  \"tools\": {\n    \"Microsoft.AspNetCore.Server.IISIntegration.Tools\": \"1.0.0-preview2-final\"\n  },\n\n  \"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"imports\": \\[\n        \"dotnet5.6\",\n        \"portable-net45+win8\"\n      \\]\n    }\n  },\n\n  \"buildOptions\": {\n    \"emitEntryPoint\": true,\n    \"preserveCompilationContext\": true,\n    \"compile\": {\n      \"exclude\": \\[ \"node_modules\" \\]\n    }\n  },\n\n  \"runtimeOptions\": {\n    \"configProperties\": {\n      \"System.GC.Server\": true\n    }\n  },\n\n  \"publishOptions\": {\n    \"include\": \\[\n      \"wwwroot\",\n      \"web.config\"\n    \\]\n  },\n\n  \"scripts\": {    \n    \"postpublish\": \\[ \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\" \\]\n  }\n}\n\n> Interestingly _**Program.cs**_ is entry point of application execution just like void main().\n\nRun the application now, ASP.NET Core renders static HTML page. **Delete this index.html page**, we will be injecting this dynamically later. Till now you saw demonstration of **\"**wwwroot**\"** as root folder for ASP.NET Core web apps.\n\nStep 3: Angular 2 in ASP.NET Core\n---------------------------------\n\nAngular 2 is famously claiming to be ONE Framework for MOBILE and DESKTOP apps. There's won't be any breaking changes after final release. This tutorial refers [5 MIN QUICK START](https://angular.io/docs/ts/latest/quickstart.html) for getting started, it's more focused on other light weight code editors; but here we are using Visual Studio 2015 Community Edition Update 3 for its built in TypeScript tooling and other features. We will be using **Webpack** for module bundler, it's an excellent alternative to the systemJS approach. To know more about inner details of read [\"webpack and Angular 2](https://angular.io/docs/ts/latest/guide/webpack.html#!#configure-webpack) Majority of webpack scripting is based on AngularClass's [angular2-webpack-starter](https://github.com/AngularClass/angular2-webpack-starter). I have modified according to ASP.NET Core web apps.\n\n> ASP.NET Core used here is SPA type of website, no MVC used here.\n\nWhy I choose Webpack for Angular 2 in ASP.NET Core?\n\n*   Webpack is much simpler to code, plugins based working with static files.\n*   Webpack 2 with dev-server runs application in memory, live reloading & compilation is easy. It provides tree shaking to eliminate unused code.\n*   Integrating with 3rd party packages like Angular Material 2, AngularFire, bootstrap are just one line inclusion\n*   AngularClass webpack  starter kit provides HMR (Hot Module Replacement) - maintain execution state while code gets modified.\n*   Webpack is adopted by Angular CLI, AngularService by Microsoft for making bundles much smaller.\n\nStep 4: Adding NPM Configuration file for Angular 2 packages\n------------------------------------------------------------\n\nAngular 2 team is pushing the code changes using NPM rather than CDN or any other source, due to this we need to add NPM configuration file (_package.json_) to this ASP.NET Core application. Right Click on \"**ngCoreContacts**\", add new file \"_NPM Configuration File_\"; by default **package.json** is added to ASP.NET Core project. _This acts Node Package Manager (NPM) file, a must for adding packages for Angular 2_ From the Angular 2 Quick start provided above, we need to add dependencies for required for Angular 2 in ASP.NET Core application. Copy Paste below configuration in **package.json** file\n\n{\n    \"version\": \"1.0.0\",\n    \"description\": \"ngcorecontacts\",\n    \"main\": \"wwwroot/index.html\",\n  \"scripts\": {\n    \"build:dev\": \"webpack --config config/webpack.dev.js --progress --profile\",    \n    \"build:prod\": \"webpack --config config/webpack.prod.js  --progress --profile --bail\",\n    \"build\": \"npm run build:dev\",    \n    \"server:dev:hmr\": \"npm run server:dev -- --inline --hot\",\n    \"server:dev\": \"webpack-dev-server --config config/webpack.dev.js --progress --profile --watch --content-base clientsrc/\",\n    \"server:prod\": \"http-server dist --cors\",\n    \"server\": \"npm run server:dev\",\n    \"start:hmr\": \"npm run server:dev:hmr\",\n    \"start\": \"npm run server:dev\",\n    \"version\": \"npm run build\",\n    \"watch:dev:hmr\": \"npm run watch:dev -- --hot\",\n    \"watch:dev\": \"npm run build:dev -- --watch\",\n    \"watch:prod\": \"npm run build:prod -- --watch\",\n    \"watch:test\": \"npm run test -- --auto-watch --no-single-run\",\n    \"watch\": \"npm run watch:dev\",    \n    \"webpack-dev-server\": \"webpack-dev-server\",\n    \"webpack\": \"webpack\"\n  },\n  \"dependencies\": {\n    \"@angular/common\": \"~2.0.1\",\n    \"@angular/compiler\": \"~2.0.1\",\n    \"@angular/core\": \"~2.0.1\",\n    \"@angular/forms\": \"~2.0.1\",\n    \"@angular/http\": \"~2.0.1\",\n    \"@angular/platform-browser\": \"~2.0.1\",\n    \"@angular/platform-browser-dynamic\": \"~2.0.1\",\n    \"@angular/router\": \"~3.0.1\",\n    \"@angular/upgrade\": \"~2.0.1\",\n    \"angular-in-memory-web-api\": \"~0.1.1\",\n    \"@angularclass/conventions-loader\": \"^1.0.2\",\n    \"@angularclass/hmr\": \"~1.2.0\",\n    \"@angularclass/hmr-loader\": \"~3.0.2\",\n    \"@angularclass/request-idle-callback\": \"^1.0.7\",\n    \"@angularclass/webpack-toolkit\": \"^1.3.3\",\n    \"assets-webpack-plugin\": \"^3.4.0\",\n    \"core-js\": \"^2.4.1\",\n    \"http-server\": \"^0.9.0\",\n    \"ie-shim\": \"^0.1.0\",\n    \"rxjs\": \"5.0.0-beta.12\",\n    \"zone.js\": \"~0.6.17\",\n    \"@angular/material\": \"^2.0.0-alpha.9\",\n    \"hammerjs\": \"^2.0.8\"\n  },\n  \"devDependencies\": {\n    \"@types/hammerjs\": \"^2.0.33\",\n    \"@types/jasmine\": \"^2.2.34\",\n    \"@types/node\": \"^6.0.38\",\n    \"@types/source-map\": \"^0.1.27\",\n    \"@types/uglify-js\": \"^2.0.27\",\n    \"@types/webpack\": \"^1.12.34\",\n    \"angular2-template-loader\": \"^0.5.0\",\n    \"awesome-typescript-loader\": \"^2.2.1\",\n    \"codelyzer\": \"~0.0.28\",\n    \"copy-webpack-plugin\": \"^3.0.1\",\n    \"clean-webpack-plugin\": \"^0.1.10\",\n    \"css-loader\": \"^0.25.0\",\n    \"exports-loader\": \"^0.6.3\",\n    \"expose-loader\": \"^0.7.1\",\n    \"file-loader\": \"^0.9.0\",\n    \"gh-pages\": \"^0.11.0\",\n    \"html-webpack-plugin\": \"^2.21.0\",\n    \"imports-loader\": \"^0.6.5\",\n    \"json-loader\": \"^0.5.4\",\n    \"parse5\": \"^1.3.2\",\n    \"phantomjs\": \"^2.1.7\",\n    \"raw-loader\": \"0.5.1\",\n    \"rimraf\": \"^2.5.2\",\n    \"source-map-loader\": \"^0.1.5\",\n    \"string-replace-loader\": \"1.0.5\",\n    \"style-loader\": \"^0.13.1\",\n    \"sass-loader\": \"^3.1.2\",    \n    \"to-string-loader\": \"^1.1.4\",\n    \"ts-helpers\": \"1.1.1\",\n    \"ts-node\": \"^1.3.0\",\n    \"tslint\": \"3.15.1\",\n    \"tslint-loader\": \"^2.1.3\",\n    \"typedoc\": \"^0.4.5\",\n    \"typescript\": \"2.0.3\",\n    \"url-loader\": \"^0.5.7\",\n    \"webpack\": \"2.1.0-beta.22\",\n    \"webpack-dev-middleware\": \"^1.6.1\",\n    \"webpack-dev-server\": \"^2.1.0-beta.2\",\n    \"webpack-md5-hash\": \"^0.0.5\",\n    \"webpack-merge\": \"^0.14.1\"\n  }\n}\n\nRight after saving this, ASP.NET Core starts restoring the packages. It would download all packages mentioned in _dependencies_ section of above _package.json_. Sometimes in solution explorer you might see 'Dependencies - not installed', don't worry this bug in tooling. All the npm packages are installed.\n\nStep 5: Add TypeScript configuration file - must for Angular 2 in ASP.NET Core using TypeScript\n-----------------------------------------------------------------------------------------------\n\nWe are creating Angular 2 in ASP.NET Core starting with TypeScript, this obvious reason adds to include TypeScript Configuration file which does work of transpiling it to JavaScript, module loading, target ES5 standards. Refer my article on [Getting Started with TypeScript](http://www.mithunvp.com/typescript-in-asp-net-5-using-visual-studio-2015/) if you just want beginner intro on it. Add \"_**tsconfig.json**_\" in the project, copy paste below configuration.\n\n> \"**baseUrl**\" ensures that TypeScript files are transpiled to JavaScript from the '**./clientsrc**'. This folder is virtual directory for TypeScript\n\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"sourceMap\": true,\n    \"noEmitHelpers\": true,\n    \"strictNullChecks\": false,\n    \"baseUrl\": \"./clientsrc\",\n    \"paths\": \\[\\],\n    \"lib\": \\[\n      \"dom\",\n      \"es6\"\n    \\],\n    \"types\": \\[\n      \"hammerjs\",      \n      \"node\",      \n      \"source-map\",\n      \"uglify-js\",\n      \"webpack\"\n    \\]\n  },\n  \"exclude\": \\[\n    \"node_modules\",\n    \"dist\"\n  \\],\n  \"awesomeTypescriptLoaderOptions\": {\n    \"forkChecker\": true,\n    \"useWebpackText\": true\n  },\n  \"compileOnSave\": false,\n  \"buildOnSave\": false,\n  \"atom\": { \"rewriteTsconfig\": false }\n}\n\n**It's mandatory to install TypeScript 2.o for working with Angular 2.** At present **typings.json** is not required because we are using [**@types** with TypeScript](https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/). However if your using any other packages which don't have entries in @types then **typings.json** has to be added.\n\nStep 6: Usage of Webpack as module bundler\n------------------------------------------\n\n#### What is Webpack?\n\nWebpack is a powerful module bundler. A bundle is a JavaScript file that incorporate assets that belong together and should be served to the client in a response to a single file request. A bundle can include JavaScript, CSS styles, HTML, and almost any other kind of file. Webpack roams over your application source code, looking for import statements, building a dependency graph, and emitting one (or more) bundles. With plugin \"loaders\" Webpack can preprocess and minify different non-JavaScript files such as TypeScript, SASS, and LESS files. In package.json, we have added **\"**webpack**\"** packages as **\"**devdependencies**\"**. They will perform all bundling work. What webpack does is written in a JavaScript configuration file know as **webpack.config.js**. As always the applications are run in **Development**, **Test** and **Production** environment. There are some common functionalities and some specific to environments. We will focus on **development** and **production** environment to write accordingly. **Development** environment should have source maps for debugging TypeScript files, _minifying bundles of JS, CSS etc files not necessary._ **Production** environment should minify bundles to reduce loading time, do not include source maps. Webpack 2 also does tree shaking i.e. eliminate unused code to further reduce bundle sizes.\n\n> The entire source code is on my [github repo](https://github.com/mithunvp/ng2CoreContacts), fork or clone to play with it.\n\n**webpack.config.js** – Based on environment set **process.env.NODE_ENV**, it runs either dev or prod configurations. **Webpack.common.js** before bundling environment specific files, it performs tasks meant to be used for both environment.\n\n1.  Webpack splits Angular 2 apps into 3 files **polyfills**(to maintain backward compatibility with older browsers) , **vendors**(all JS, CSS, HTML, SCSS, images, JSON etc into one file) and **boot** (application specific files)\n2.  resolve based on various file extensions\n3.  Webpack itself doesn't know what to do with a non-JavaScript file. We teach it to process such files into JavaScript with _**loaders**_. For this, we have written loaders TS, HTML, JSON, Fonts, images\n4.  Any static assets placed in **\"**clientsrc**/assets\"** will be copied to **assets** folder using **CopyWebpackPlugin**\n5.  **CleanWebpackPlugin** cleans **\"**wwwroot**/dist\"** folder every time we run it, so that we get fresh set of files.\n6.  _I told you above to delete the index.html file_, now the **clientsrc/index.html** will be moved to wwwroot using **HtmlWebpackPlugin**. Plus Webpack injects the bundle files i.e. _polyfills_, _vendor_, _boot_ JS files and includes them in HTML script reference.\n\nNow let’s see **webpack.dev.js** for development purpose\n\n1.  Running **\"**webpack**-dev-server\"** – this runs entire application in memory, any changes to source file gets applied immediately\n2.  Loads application in debug mode with source map. Everything run in memory i.e. html, js, static files are loaded in memory.\n3.  Runs the application on localhost 3000 port. _Port can be changed as your convenience_\n\nNow let’s see **webpack.prod.js** for production purpose\n\n1.  Merges all the bundle files and copies to wwwroot.\n2.  Minifies all files to load faster using **UglifyJsPlugin** plugin\n\nStep 7: Writing Angular 2 application\n-------------------------------------\n\nUntil now we created ASP.NET Core app, added TSconfig file, webpack configuration. Now it’s time to write Angular 2 application In the github repo, you can see **\"clientsrc\"** folder. This contains the angular 2 app which gets bundled into using webpack configurations we wrote **\"**Clientsrc**\"** folder has index.html, polyfills.browses.ts, vendor.browsers.ts and mostly importantly **boot.ts** We have **app** folder containing HTML, Angular 2 components and root level module (**app.module.ts**) which gets loaded while bootstrapping application. Some of files might be not interesting now, will focus them in separate articles later.\n\nStep 8: Running the application\n-------------------------------\n\nBefore running make sure you have run command \"npm **install\"**. This might not be needed but still it will ensure all packages are installed. **Now let’s run the application in development mode**\n\n1.  From command line (directory should be same as package.json), type \"**npm start\"** & hit enter. It will start running the webpack_**-dev-server**_ which loads application and listens on localhost:3000.\n2.  When on console it says “bundle is now VALID” then open a browser and navigate to [http://localhost:3000](http://localhost:3000) to see application getting loaded.\n\nNotice **wwwroot** folder, we don’t see any files copied because everything is running in memory. Now that application runs properly on browser, let’s understand how Angular 2 app loads\n\n1.  When browser starts rendering **index.html** page, it encounters **<my-app>Loading...</my-app>** tag.\n2.  Then Angular’s module **platformBrowserDynamic** bootstraps _clientsrc/app/AppModule_ through line _platformBrowserDynamic().bootstrapModule(AppModule)_\n3.  _AppModule_ then loads the component _**app.component.ts**_ which is mentioned in **@NgModule** as bootstrap entry\n4.  **Clientsrc/src/Appcomponent** then resolves the **<my-app>** tag as selector in it and renders UI with TypeScript code.\n\nWhen we enter **\"**npm **start\"** in console to run the application, execution points scripts section of package.json to below code\n\nwebpack-dev-server --config config/webpack.dev.js --progress --profile --watch --content-base clientsrc/\n\nThis invokes webpack_-dev-server_, runs the development config and watches for any changes in _**clientsrc**_ folder. Any changes in this folder will reload application with changes.\n\n> Here ASP.NET Core is just HTML based web app, so running this app as **npm start** to use AngularClass features of reloading, using webpack, Hot module replacement feature.\n\n**Running the application in Production mode** Assuming the application is now ready to deployed, we need to have PROD build. For this run command\n\n//builds app and copies in wwwroot\nNpm run build:prod\n\nNow if you see wwwroot folder, we see the HTML, JS bundle files. This wwwroot folder can be deployed on any web server like IIS or nginx You can either do F5 to run from Visual Studio IDE or run command **npm run server:prod**   \\[caption id=\"attachment_554\" align=\"aligncenter\" width=\"583\"\\][![Angular 2 in ASP.NET Core](http://www.mithunvp.com/wp-content/uploads/2016/01/npmstart.png)](http://www.mithunvp.com/wp-content/uploads/2016/01/npmstart.png) Angular 2 running on ASP.NET Core using Web pack\\[/caption\\] There is Angular 2 application development using [Angular 2 Command Line Interface](http://www.mithunvp.com/build-angular-apps-using-angular-2-cli/) also, it's interesting !!\n\n> Check out source code on my [Github repo ng2CoreContacts](https://github.com/mithunvp/ng2CoreContacts)","slug":"angular-2-in-asp-net-5-typescript-visual-studio-2015","published":1,"updated":"2018-07-10T19:49:06.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034ve0006s4tj2vxan715","content":"<p>This tutorial aims for starting Angular 2 in ASP.NET Core using Visual Studio 2015. The release of Angular 2, ASP.NET Core RC is becoming interesting to build SPA. I have compiled the steps involved in starting to learn Angular 2. This is detailed explanation, you will feel much easier at end of article.</p>\n<blockquote>\n<p><em>October 1 2016 - Article updated with ASP.NET Core, Angular 2 Final release with Webpack as module bundler .</em></p>\n</blockquote>\n<h2 id=\"Step-1-Creating-an-empty-ASP-NET-Core-project\"><a href=\"#Step-1-Creating-an-empty-ASP-NET-Core-project\" class=\"headerlink\" title=\"Step 1 : Creating an empty ASP.NET Core project\"></a>Step 1 : Creating an empty ASP.NET Core project</h2><p>Open Visual Studio 2015 Community Edition Update 3, Select New Web Project naming it “<strong>ngCoreContacts</strong>” and select “<em>Empty</em>” project template. <em><strong>Don’t forget to install new web tools for <a href=\"http://www.asp.net/core\" target=\"_blank\" rel=\"noopener\">ASP.NET Core 1.0</a></strong></em> [caption id=”attachment_445” align=”aligncenter” width=”476”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/01/aspnetcore.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/01/aspnetcore.png\" alt=\"Angular 2 in ASP.Net Core\"></a> Creating Empty Asp.NET Core app[/caption] I used Visual Studio 2015 Community Edition Update 3(Must update), <strong>TypeScript 2.0 (must)</strong>, latest NPM, Gulp.</p>\n<blockquote>\n<p>We are writing Angular 2 in ASP.NET Core with <strong>TypeScript</strong> but we can use <strong><em>JavaScript</em></strong> and <em><strong>Dart</strong> . TypeScript is personal choice.</em></p>\n</blockquote>\n<h2 id=\"Step-2-Configure-ASP-NET-Core-to-serve-Static-Files\"><a href=\"#Step-2-Configure-ASP-NET-Core-to-serve-Static-Files\" class=\"headerlink\" title=\"Step 2: Configure ASP.NET Core to serve Static Files\"></a>Step 2: Configure ASP.NET Core to serve Static Files</h2><p><em>ASP.NET Core</em> is designed as pluggable framework to include and use only necessary packages, instead of including too many initial stuff. Lets create HTML file named “<strong><em>index.html</em></strong>” under <strong>wwwroot</strong> folder. Right click on <strong>wwwroot</strong> folder, Add New Item and create <em>index.html</em> file. This HTML page will act as default page.</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<html><br><head><br>    <meta charset=\"utf-8\"><br>    <title>Angular 2 with ASP.NET Core</title><br></head><br><body><br>    <h1>Demo of Angular 2 using ASP.NET Core with Visual Studio 2015</h1><br></body><br></html>\n\n<p>For ASP.NET Core to serve static files, we need to add <em><strong>StaticFiles</strong></em> middle ware in Configure method of <strong>Startup.cs</strong> page. Ensure that packages are restored properly. <em><strong>project.json</strong></em> is redesigned to make it better, we have <strong>Static Files middleware</strong> to serve static assets like HTML, JS files etc.</p>\n<p>public void Configure(IApplicationBuilder app)<br>        {<br>            app.UseDefaultFiles();<br>            app.UseStaticFiles();<br>        }</p>\n<p>{<br>  “dependencies”: {<br>    “Microsoft.NETCore.App”: {<br>      “version”: “1.0.1”,<br>      “type”: “platform”<br>    },<br>    “Microsoft.AspNetCore.Diagnostics”: “1.0.0”,<br>    “Microsoft.AspNetCore.Server.IISIntegration”: “1.0.0”,<br>    “Microsoft.AspNetCore.Server.Kestrel”: “1.0.1”,<br>    “Microsoft.Extensions.Logging.Console”: “1.0.0”,<br>    “Microsoft.AspNetCore.StaticFiles”: “1.0.0”<br>  },</p>\n<p>  “tools”: {<br>    “Microsoft.AspNetCore.Server.IISIntegration.Tools”: “1.0.0-preview2-final”<br>  },</p>\n<p>  “frameworks”: {<br>    “netcoreapp1.0”: {<br>      “imports”: [<br>        “dotnet5.6”,<br>        “portable-net45+win8”<br>      ]<br>    }<br>  },</p>\n<p>  “buildOptions”: {<br>    “emitEntryPoint”: true,<br>    “preserveCompilationContext”: true,<br>    “compile”: {<br>      “exclude”: [ “node_modules” ]<br>    }<br>  },</p>\n<p>  “runtimeOptions”: {<br>    “configProperties”: {<br>      “System.GC.Server”: true<br>    }<br>  },</p>\n<p>  “publishOptions”: {<br>    “include”: [<br>      “wwwroot”,<br>      “web.config”<br>    ]<br>  },</p>\n<p>  “scripts”: {<br>    “postpublish”: [ “dotnet publish-iis –publish-folder %publish:OutputPath% –framework %publish:FullTargetFramework%” ]<br>  }<br>}</p>\n<blockquote>\n<p>Interestingly <em><strong>Program.cs</strong></em> is entry point of application execution just like void main().</p>\n</blockquote>\n<p>Run the application now, ASP.NET Core renders static HTML page. <strong>Delete this index.html page</strong>, we will be injecting this dynamically later. Till now you saw demonstration of <strong>“</strong>wwwroot<strong>“</strong> as root folder for ASP.NET Core web apps.</p>\n<h2 id=\"Step-3-Angular-2-in-ASP-NET-Core\"><a href=\"#Step-3-Angular-2-in-ASP-NET-Core\" class=\"headerlink\" title=\"Step 3: Angular 2 in ASP.NET Core\"></a>Step 3: Angular 2 in ASP.NET Core</h2><p>Angular 2 is famously claiming to be ONE Framework for MOBILE and DESKTOP apps. There’s won’t be any breaking changes after final release. This tutorial refers <a href=\"https://angular.io/docs/ts/latest/quickstart.html\" target=\"_blank\" rel=\"noopener\">5 MIN QUICK START</a> for getting started, it’s more focused on other light weight code editors; but here we are using Visual Studio 2015 Community Edition Update 3 for its built in TypeScript tooling and other features. We will be using <strong>Webpack</strong> for module bundler, it’s an excellent alternative to the systemJS approach. To know more about inner details of read <a href=\"https://angular.io/docs/ts/latest/guide/webpack.html#!#configure-webpack\" target=\"_blank\" rel=\"noopener\">“webpack and Angular 2</a> Majority of webpack scripting is based on AngularClass’s <a href=\"https://github.com/AngularClass/angular2-webpack-starter\" target=\"_blank\" rel=\"noopener\">angular2-webpack-starter</a>. I have modified according to ASP.NET Core web apps.</p>\n<blockquote>\n<p>ASP.NET Core used here is SPA type of website, no MVC used here.</p>\n</blockquote>\n<p>Why I choose Webpack for Angular 2 in ASP.NET Core?</p>\n<ul>\n<li>Webpack is much simpler to code, plugins based working with static files.</li>\n<li>Webpack 2 with dev-server runs application in memory, live reloading &amp; compilation is easy. It provides tree shaking to eliminate unused code.</li>\n<li>Integrating with 3rd party packages like Angular Material 2, AngularFire, bootstrap are just one line inclusion</li>\n<li>AngularClass webpack  starter kit provides HMR (Hot Module Replacement) - maintain execution state while code gets modified.</li>\n<li>Webpack is adopted by Angular CLI, AngularService by Microsoft for making bundles much smaller.</li>\n</ul>\n<h2 id=\"Step-4-Adding-NPM-Configuration-file-for-Angular-2-packages\"><a href=\"#Step-4-Adding-NPM-Configuration-file-for-Angular-2-packages\" class=\"headerlink\" title=\"Step 4: Adding NPM Configuration file for Angular 2 packages\"></a>Step 4: Adding NPM Configuration file for Angular 2 packages</h2><p>Angular 2 team is pushing the code changes using NPM rather than CDN or any other source, due to this we need to add NPM configuration file (<em>package.json</em>) to this ASP.NET Core application. Right Click on “<strong>ngCoreContacts</strong>“, add new file “<em>NPM Configuration File</em>“; by default <strong>package.json</strong> is added to ASP.NET Core project. <em>This acts Node Package Manager (NPM) file, a must for adding packages for Angular 2</em> From the Angular 2 Quick start provided above, we need to add dependencies for required for Angular 2 in ASP.NET Core application. Copy Paste below configuration in <strong>package.json</strong> file</p>\n<p>{<br>    “version”: “1.0.0”,<br>    “description”: “ngcorecontacts”,<br>    “main”: “wwwroot/index.html”,<br>  “scripts”: {<br>    “build:dev”: “webpack –config config/webpack.dev.js –progress –profile”,<br>    “build:prod”: “webpack –config config/webpack.prod.js  –progress –profile –bail”,<br>    “build”: “npm run build:dev”,<br>    “server:dev:hmr”: “npm run server:dev – –inline –hot”,<br>    “server:dev”: “webpack-dev-server –config config/webpack.dev.js –progress –profile –watch –content-base clientsrc/“,<br>    “server:prod”: “http-server dist –cors”,<br>    “server”: “npm run server:dev”,<br>    “start:hmr”: “npm run server:dev:hmr”,<br>    “start”: “npm run server:dev”,<br>    “version”: “npm run build”,<br>    “watch:dev:hmr”: “npm run watch:dev – –hot”,<br>    “watch:dev”: “npm run build:dev – –watch”,<br>    “watch:prod”: “npm run build:prod – –watch”,<br>    “watch:test”: “npm run test – –auto-watch –no-single-run”,<br>    “watch”: “npm run watch:dev”,<br>    “webpack-dev-server”: “webpack-dev-server”,<br>    “webpack”: “webpack”<br>  },<br>  “dependencies”: {<br>    “@angular/common”: “~2.0.1”,<br>    “@angular/compiler”: “~2.0.1”,<br>    “@angular/core”: “~2.0.1”,<br>    “@angular/forms”: “~2.0.1”,<br>    “@angular/http”: “~2.0.1”,<br>    “@angular/platform-browser”: “~2.0.1”,<br>    “@angular/platform-browser-dynamic”: “~2.0.1”,<br>    “@angular/router”: “~3.0.1”,<br>    “@angular/upgrade”: “~2.0.1”,<br>    “angular-in-memory-web-api”: “~0.1.1”,<br>    “@angularclass/conventions-loader”: “^1.0.2”,<br>    “@angularclass/hmr”: “~1.2.0”,<br>    “@angularclass/hmr-loader”: “~3.0.2”,<br>    “@angularclass/request-idle-callback”: “^1.0.7”,<br>    “@angularclass/webpack-toolkit”: “^1.3.3”,<br>    “assets-webpack-plugin”: “^3.4.0”,<br>    “core-js”: “^2.4.1”,<br>    “http-server”: “^0.9.0”,<br>    “ie-shim”: “^0.1.0”,<br>    “rxjs”: “5.0.0-beta.12”,<br>    “zone.js”: “~0.6.17”,<br>    “@angular/material”: “^2.0.0-alpha.9”,<br>    “hammerjs”: “^2.0.8”<br>  },<br>  “devDependencies”: {<br>    “@types/hammerjs”: “^2.0.33”,<br>    “@types/jasmine”: “^2.2.34”,<br>    “@types/node”: “^6.0.38”,<br>    “@types/source-map”: “^0.1.27”,<br>    “@types/uglify-js”: “^2.0.27”,<br>    “@types/webpack”: “^1.12.34”,<br>    “angular2-template-loader”: “^0.5.0”,<br>    “awesome-typescript-loader”: “^2.2.1”,<br>    “codelyzer”: “~0.0.28”,<br>    “copy-webpack-plugin”: “^3.0.1”,<br>    “clean-webpack-plugin”: “^0.1.10”,<br>    “css-loader”: “^0.25.0”,<br>    “exports-loader”: “^0.6.3”,<br>    “expose-loader”: “^0.7.1”,<br>    “file-loader”: “^0.9.0”,<br>    “gh-pages”: “^0.11.0”,<br>    “html-webpack-plugin”: “^2.21.0”,<br>    “imports-loader”: “^0.6.5”,<br>    “json-loader”: “^0.5.4”,<br>    “parse5”: “^1.3.2”,<br>    “phantomjs”: “^2.1.7”,<br>    “raw-loader”: “0.5.1”,<br>    “rimraf”: “^2.5.2”,<br>    “source-map-loader”: “^0.1.5”,<br>    “string-replace-loader”: “1.0.5”,<br>    “style-loader”: “^0.13.1”,<br>    “sass-loader”: “^3.1.2”,<br>    “to-string-loader”: “^1.1.4”,<br>    “ts-helpers”: “1.1.1”,<br>    “ts-node”: “^1.3.0”,<br>    “tslint”: “3.15.1”,<br>    “tslint-loader”: “^2.1.3”,<br>    “typedoc”: “^0.4.5”,<br>    “typescript”: “2.0.3”,<br>    “url-loader”: “^0.5.7”,<br>    “webpack”: “2.1.0-beta.22”,<br>    “webpack-dev-middleware”: “^1.6.1”,<br>    “webpack-dev-server”: “^2.1.0-beta.2”,<br>    “webpack-md5-hash”: “^0.0.5”,<br>    “webpack-merge”: “^0.14.1”<br>  }<br>}</p>\n<p>Right after saving this, ASP.NET Core starts restoring the packages. It would download all packages mentioned in <em>dependencies</em> section of above <em>package.json</em>. Sometimes in solution explorer you might see ‘Dependencies - not installed’, don’t worry this bug in tooling. All the npm packages are installed.</p>\n<h2 id=\"Step-5-Add-TypeScript-configuration-file-must-for-Angular-2-in-ASP-NET-Core-using-TypeScript\"><a href=\"#Step-5-Add-TypeScript-configuration-file-must-for-Angular-2-in-ASP-NET-Core-using-TypeScript\" class=\"headerlink\" title=\"Step 5: Add TypeScript configuration file - must for Angular 2 in ASP.NET Core using TypeScript\"></a>Step 5: Add TypeScript configuration file - must for Angular 2 in ASP.NET Core using TypeScript</h2><p>We are creating Angular 2 in ASP.NET Core starting with TypeScript, this obvious reason adds to include TypeScript Configuration file which does work of transpiling it to JavaScript, module loading, target ES5 standards. Refer my article on <a href=\"http://www.mithunvp.com/typescript-in-asp-net-5-using-visual-studio-2015/\">Getting Started with TypeScript</a> if you just want beginner intro on it. Add “<em><strong>tsconfig.json</strong></em>“ in the project, copy paste below configuration.</p>\n<blockquote>\n<p>“<strong>baseUrl</strong>“ ensures that TypeScript files are transpiled to JavaScript from the ‘<strong>./clientsrc</strong>‘. This folder is virtual directory for TypeScript</p>\n</blockquote>\n<p>{<br>  “compilerOptions”: {<br>    “target”: “es5”,<br>    “module”: “commonjs”,<br>    “moduleResolution”: “node”,<br>    “emitDecoratorMetadata”: true,<br>    “experimentalDecorators”: true,<br>    “allowSyntheticDefaultImports”: true,<br>    “sourceMap”: true,<br>    “noEmitHelpers”: true,<br>    “strictNullChecks”: false,<br>    “baseUrl”: “./clientsrc”,<br>    “paths”: [],<br>    “lib”: [<br>      “dom”,<br>      “es6”<br>    ],<br>    “types”: [<br>      “hammerjs”,<br>      “node”,<br>      “source-map”,<br>      “uglify-js”,<br>      “webpack”<br>    ]<br>  },<br>  “exclude”: [<br>    “node_modules”,<br>    “dist”<br>  ],<br>  “awesomeTypescriptLoaderOptions”: {<br>    “forkChecker”: true,<br>    “useWebpackText”: true<br>  },<br>  “compileOnSave”: false,<br>  “buildOnSave”: false,<br>  “atom”: { “rewriteTsconfig”: false }<br>}</p>\n<p><strong>It’s mandatory to install TypeScript 2.o for working with Angular 2.</strong> At present <strong>typings.json</strong> is not required because we are using <a href=\"https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/\" target=\"_blank\" rel=\"noopener\"><strong>@types</strong> with TypeScript</a>. However if your using any other packages which don’t have entries in @types then <strong>typings.json</strong> has to be added.</p>\n<h2 id=\"Step-6-Usage-of-Webpack-as-module-bundler\"><a href=\"#Step-6-Usage-of-Webpack-as-module-bundler\" class=\"headerlink\" title=\"Step 6: Usage of Webpack as module bundler\"></a>Step 6: Usage of Webpack as module bundler</h2><h4 id=\"What-is-Webpack\"><a href=\"#What-is-Webpack\" class=\"headerlink\" title=\"What is Webpack?\"></a>What is Webpack?</h4><p>Webpack is a powerful module bundler. A bundle is a JavaScript file that incorporate assets that belong together and should be served to the client in a response to a single file request. A bundle can include JavaScript, CSS styles, HTML, and almost any other kind of file. Webpack roams over your application source code, looking for import statements, building a dependency graph, and emitting one (or more) bundles. With plugin “loaders” Webpack can preprocess and minify different non-JavaScript files such as TypeScript, SASS, and LESS files. In package.json, we have added <strong>“</strong>webpack<strong>“</strong> packages as <strong>“</strong>devdependencies<strong>“</strong>. They will perform all bundling work. What webpack does is written in a JavaScript configuration file know as <strong>webpack.config.js</strong>. As always the applications are run in <strong>Development</strong>, <strong>Test</strong> and <strong>Production</strong> environment. There are some common functionalities and some specific to environments. We will focus on <strong>development</strong> and <strong>production</strong> environment to write accordingly. <strong>Development</strong> environment should have source maps for debugging TypeScript files, <em>minifying bundles of JS, CSS etc files not necessary.</em> <strong>Production</strong> environment should minify bundles to reduce loading time, do not include source maps. Webpack 2 also does tree shaking i.e. eliminate unused code to further reduce bundle sizes.</p>\n<blockquote>\n<p>The entire source code is on my <a href=\"https://github.com/mithunvp/ng2CoreContacts\" target=\"_blank\" rel=\"noopener\">github repo</a>, fork or clone to play with it.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong> – Based on environment set <strong>process.env.NODE_ENV</strong>, it runs either dev or prod configurations. <strong>Webpack.common.js</strong> before bundling environment specific files, it performs tasks meant to be used for both environment.</p>\n<ol>\n<li>Webpack splits Angular 2 apps into 3 files <strong>polyfills</strong>(to maintain backward compatibility with older browsers) , <strong>vendors</strong>(all JS, CSS, HTML, SCSS, images, JSON etc into one file) and <strong>boot</strong> (application specific files)</li>\n<li>resolve based on various file extensions</li>\n<li>Webpack itself doesn’t know what to do with a non-JavaScript file. We teach it to process such files into JavaScript with <em><strong>loaders</strong></em>. For this, we have written loaders TS, HTML, JSON, Fonts, images</li>\n<li>Any static assets placed in <strong>“</strong>clientsrc<strong>/assets”</strong> will be copied to <strong>assets</strong> folder using <strong>CopyWebpackPlugin</strong></li>\n<li><strong>CleanWebpackPlugin</strong> cleans <strong>“</strong>wwwroot<strong>/dist”</strong> folder every time we run it, so that we get fresh set of files.</li>\n<li><em>I told you above to delete the index.html file</em>, now the <strong>clientsrc/index.html</strong> will be moved to wwwroot using <strong>HtmlWebpackPlugin</strong>. Plus Webpack injects the bundle files i.e. <em>polyfills</em>, <em>vendor</em>, <em>boot</em> JS files and includes them in HTML script reference.</li>\n</ol>\n<p>Now let’s see <strong>webpack.dev.js</strong> for development purpose</p>\n<ol>\n<li>Running <strong>“</strong>webpack<strong>-dev-server”</strong> – this runs entire application in memory, any changes to source file gets applied immediately</li>\n<li>Loads application in debug mode with source map. Everything run in memory i.e. html, js, static files are loaded in memory.</li>\n<li>Runs the application on localhost 3000 port. <em>Port can be changed as your convenience</em></li>\n</ol>\n<p>Now let’s see <strong>webpack.prod.js</strong> for production purpose</p>\n<ol>\n<li>Merges all the bundle files and copies to wwwroot.</li>\n<li>Minifies all files to load faster using <strong>UglifyJsPlugin</strong> plugin</li>\n</ol>\n<h2 id=\"Step-7-Writing-Angular-2-application\"><a href=\"#Step-7-Writing-Angular-2-application\" class=\"headerlink\" title=\"Step 7: Writing Angular 2 application\"></a>Step 7: Writing Angular 2 application</h2><p>Until now we created ASP.NET Core app, added TSconfig file, webpack configuration. Now it’s time to write Angular 2 application In the github repo, you can see <strong>“clientsrc”</strong> folder. This contains the angular 2 app which gets bundled into using webpack configurations we wrote <strong>“</strong>Clientsrc<strong>“</strong> folder has index.html, polyfills.browses.ts, vendor.browsers.ts and mostly importantly <strong>boot.ts</strong> We have <strong>app</strong> folder containing HTML, Angular 2 components and root level module (<strong>app.module.ts</strong>) which gets loaded while bootstrapping application. Some of files might be not interesting now, will focus them in separate articles later.</p>\n<h2 id=\"Step-8-Running-the-application\"><a href=\"#Step-8-Running-the-application\" class=\"headerlink\" title=\"Step 8: Running the application\"></a>Step 8: Running the application</h2><p>Before running make sure you have run command “npm <strong>install”</strong>. This might not be needed but still it will ensure all packages are installed. <strong>Now let’s run the application in development mode</strong></p>\n<ol>\n<li>From command line (directory should be same as package.json), type “<strong>npm start”</strong> &amp; hit enter. It will start running the webpack_<strong>-dev-server</strong>_ which loads application and listens on localhost:3000.</li>\n<li>When on console it says “bundle is now VALID” then open a browser and navigate to <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a> to see application getting loaded.</li>\n</ol>\n<p>Notice <strong>wwwroot</strong> folder, we don’t see any files copied because everything is running in memory. Now that application runs properly on browser, let’s understand how Angular 2 app loads</p>\n<ol>\n<li>When browser starts rendering <strong>index.html</strong> page, it encounters <strong><my-app>Loading…</my-app></strong> tag.</li>\n<li>Then Angular’s module <strong>platformBrowserDynamic</strong> bootstraps <em>clientsrc/app/AppModule</em> through line <em>platformBrowserDynamic().bootstrapModule(AppModule)</em></li>\n<li><em>AppModule</em> then loads the component <em><strong>app.component.ts</strong></em> which is mentioned in <strong>@NgModule</strong> as bootstrap entry</li>\n<li><strong>Clientsrc/src/Appcomponent</strong> then resolves the <strong><my-app></my-app></strong> tag as selector in it and renders UI with TypeScript code.</li>\n</ol>\n<p>When we enter <strong>“</strong>npm <strong>start”</strong> in console to run the application, execution points scripts section of package.json to below code</p>\n<p>webpack-dev-server –config config/webpack.dev.js –progress –profile –watch –content-base clientsrc/</p>\n<p>This invokes webpack_-dev-server_, runs the development config and watches for any changes in <em><strong>clientsrc</strong></em> folder. Any changes in this folder will reload application with changes.</p>\n<blockquote>\n<p>Here ASP.NET Core is just HTML based web app, so running this app as <strong>npm start</strong> to use AngularClass features of reloading, using webpack, Hot module replacement feature.</p>\n</blockquote>\n<p><strong>Running the application in Production mode</strong> Assuming the application is now ready to deployed, we need to have PROD build. For this run command</p>\n<p>//builds app and copies in wwwroot<br>Npm run build:prod</p>\n<p>Now if you see wwwroot folder, we see the HTML, JS bundle files. This wwwroot folder can be deployed on any web server like IIS or nginx You can either do F5 to run from Visual Studio IDE or run command <strong>npm run server:prod</strong>   [caption id=”attachment_554” align=”aligncenter” width=”583”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/01/npmstart.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/01/npmstart.png\" alt=\"Angular 2 in ASP.NET Core\"></a> Angular 2 running on ASP.NET Core using Web pack[/caption] There is Angular 2 application development using <a href=\"http://www.mithunvp.com/build-angular-apps-using-angular-2-cli/\">Angular 2 Command Line Interface</a> also, it’s interesting !!</p>\n<blockquote>\n<p>Check out source code on my <a href=\"https://github.com/mithunvp/ng2CoreContacts\" target=\"_blank\" rel=\"noopener\">Github repo ng2CoreContacts</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>This tutorial aims for starting Angular 2 in ASP.NET Core using Visual Studio 2015. The release of Angular 2, ASP.NET Core RC is becoming interesting to build SPA. I have compiled the steps involved in starting to learn Angular 2. This is detailed explanation, you will feel much easier at end of article.</p>\n<blockquote>\n<p><em>October 1 2016 - Article updated with ASP.NET Core, Angular 2 Final release with Webpack as module bundler .</em></p>\n</blockquote>\n<h2 id=\"Step-1-Creating-an-empty-ASP-NET-Core-project\"><a href=\"#Step-1-Creating-an-empty-ASP-NET-Core-project\" class=\"headerlink\" title=\"Step 1 : Creating an empty ASP.NET Core project\"></a>Step 1 : Creating an empty ASP.NET Core project</h2><p>Open Visual Studio 2015 Community Edition Update 3, Select New Web Project naming it “<strong>ngCoreContacts</strong>” and select “<em>Empty</em>” project template. <em><strong>Don’t forget to install new web tools for <a href=\"http://www.asp.net/core\" target=\"_blank\" rel=\"noopener\">ASP.NET Core 1.0</a></strong></em> [caption id=”attachment_445” align=”aligncenter” width=”476”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/01/aspnetcore.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/01/aspnetcore.png\" alt=\"Angular 2 in ASP.Net Core\"></a> Creating Empty Asp.NET Core app[/caption] I used Visual Studio 2015 Community Edition Update 3(Must update), <strong>TypeScript 2.0 (must)</strong>, latest NPM, Gulp.</p>\n<blockquote>\n<p>We are writing Angular 2 in ASP.NET Core with <strong>TypeScript</strong> but we can use <strong><em>JavaScript</em></strong> and <em><strong>Dart</strong> . TypeScript is personal choice.</em></p>\n</blockquote>\n<h2 id=\"Step-2-Configure-ASP-NET-Core-to-serve-Static-Files\"><a href=\"#Step-2-Configure-ASP-NET-Core-to-serve-Static-Files\" class=\"headerlink\" title=\"Step 2: Configure ASP.NET Core to serve Static Files\"></a>Step 2: Configure ASP.NET Core to serve Static Files</h2><p><em>ASP.NET Core</em> is designed as pluggable framework to include and use only necessary packages, instead of including too many initial stuff. Lets create HTML file named “<strong><em>index.html</em></strong>” under <strong>wwwroot</strong> folder. Right click on <strong>wwwroot</strong> folder, Add New Item and create <em>index.html</em> file. This HTML page will act as default page.</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<html><br><head><br>    <meta charset=\"utf-8\"><br>    <title>Angular 2 with ASP.NET Core</title><br></head><br><body><br>    <h1>Demo of Angular 2 using ASP.NET Core with Visual Studio 2015</h1><br></body><br></html>\n\n<p>For ASP.NET Core to serve static files, we need to add <em><strong>StaticFiles</strong></em> middle ware in Configure method of <strong>Startup.cs</strong> page. Ensure that packages are restored properly. <em><strong>project.json</strong></em> is redesigned to make it better, we have <strong>Static Files middleware</strong> to serve static assets like HTML, JS files etc.</p>\n<p>public void Configure(IApplicationBuilder app)<br>        {<br>            app.UseDefaultFiles();<br>            app.UseStaticFiles();<br>        }</p>\n<p>{<br>  “dependencies”: {<br>    “Microsoft.NETCore.App”: {<br>      “version”: “1.0.1”,<br>      “type”: “platform”<br>    },<br>    “Microsoft.AspNetCore.Diagnostics”: “1.0.0”,<br>    “Microsoft.AspNetCore.Server.IISIntegration”: “1.0.0”,<br>    “Microsoft.AspNetCore.Server.Kestrel”: “1.0.1”,<br>    “Microsoft.Extensions.Logging.Console”: “1.0.0”,<br>    “Microsoft.AspNetCore.StaticFiles”: “1.0.0”<br>  },</p>\n<p>  “tools”: {<br>    “Microsoft.AspNetCore.Server.IISIntegration.Tools”: “1.0.0-preview2-final”<br>  },</p>\n<p>  “frameworks”: {<br>    “netcoreapp1.0”: {<br>      “imports”: [<br>        “dotnet5.6”,<br>        “portable-net45+win8”<br>      ]<br>    }<br>  },</p>\n<p>  “buildOptions”: {<br>    “emitEntryPoint”: true,<br>    “preserveCompilationContext”: true,<br>    “compile”: {<br>      “exclude”: [ “node_modules” ]<br>    }<br>  },</p>\n<p>  “runtimeOptions”: {<br>    “configProperties”: {<br>      “System.GC.Server”: true<br>    }<br>  },</p>\n<p>  “publishOptions”: {<br>    “include”: [<br>      “wwwroot”,<br>      “web.config”<br>    ]<br>  },</p>\n<p>  “scripts”: {<br>    “postpublish”: [ “dotnet publish-iis –publish-folder %publish:OutputPath% –framework %publish:FullTargetFramework%” ]<br>  }<br>}</p>\n<blockquote>\n<p>Interestingly <em><strong>Program.cs</strong></em> is entry point of application execution just like void main().</p>\n</blockquote>\n<p>Run the application now, ASP.NET Core renders static HTML page. <strong>Delete this index.html page</strong>, we will be injecting this dynamically later. Till now you saw demonstration of <strong>“</strong>wwwroot<strong>“</strong> as root folder for ASP.NET Core web apps.</p>\n<h2 id=\"Step-3-Angular-2-in-ASP-NET-Core\"><a href=\"#Step-3-Angular-2-in-ASP-NET-Core\" class=\"headerlink\" title=\"Step 3: Angular 2 in ASP.NET Core\"></a>Step 3: Angular 2 in ASP.NET Core</h2><p>Angular 2 is famously claiming to be ONE Framework for MOBILE and DESKTOP apps. There’s won’t be any breaking changes after final release. This tutorial refers <a href=\"https://angular.io/docs/ts/latest/quickstart.html\" target=\"_blank\" rel=\"noopener\">5 MIN QUICK START</a> for getting started, it’s more focused on other light weight code editors; but here we are using Visual Studio 2015 Community Edition Update 3 for its built in TypeScript tooling and other features. We will be using <strong>Webpack</strong> for module bundler, it’s an excellent alternative to the systemJS approach. To know more about inner details of read <a href=\"https://angular.io/docs/ts/latest/guide/webpack.html#!#configure-webpack\" target=\"_blank\" rel=\"noopener\">“webpack and Angular 2</a> Majority of webpack scripting is based on AngularClass’s <a href=\"https://github.com/AngularClass/angular2-webpack-starter\" target=\"_blank\" rel=\"noopener\">angular2-webpack-starter</a>. I have modified according to ASP.NET Core web apps.</p>\n<blockquote>\n<p>ASP.NET Core used here is SPA type of website, no MVC used here.</p>\n</blockquote>\n<p>Why I choose Webpack for Angular 2 in ASP.NET Core?</p>\n<ul>\n<li>Webpack is much simpler to code, plugins based working with static files.</li>\n<li>Webpack 2 with dev-server runs application in memory, live reloading &amp; compilation is easy. It provides tree shaking to eliminate unused code.</li>\n<li>Integrating with 3rd party packages like Angular Material 2, AngularFire, bootstrap are just one line inclusion</li>\n<li>AngularClass webpack  starter kit provides HMR (Hot Module Replacement) - maintain execution state while code gets modified.</li>\n<li>Webpack is adopted by Angular CLI, AngularService by Microsoft for making bundles much smaller.</li>\n</ul>\n<h2 id=\"Step-4-Adding-NPM-Configuration-file-for-Angular-2-packages\"><a href=\"#Step-4-Adding-NPM-Configuration-file-for-Angular-2-packages\" class=\"headerlink\" title=\"Step 4: Adding NPM Configuration file for Angular 2 packages\"></a>Step 4: Adding NPM Configuration file for Angular 2 packages</h2><p>Angular 2 team is pushing the code changes using NPM rather than CDN or any other source, due to this we need to add NPM configuration file (<em>package.json</em>) to this ASP.NET Core application. Right Click on “<strong>ngCoreContacts</strong>“, add new file “<em>NPM Configuration File</em>“; by default <strong>package.json</strong> is added to ASP.NET Core project. <em>This acts Node Package Manager (NPM) file, a must for adding packages for Angular 2</em> From the Angular 2 Quick start provided above, we need to add dependencies for required for Angular 2 in ASP.NET Core application. Copy Paste below configuration in <strong>package.json</strong> file</p>\n<p>{<br>    “version”: “1.0.0”,<br>    “description”: “ngcorecontacts”,<br>    “main”: “wwwroot/index.html”,<br>  “scripts”: {<br>    “build:dev”: “webpack –config config/webpack.dev.js –progress –profile”,<br>    “build:prod”: “webpack –config config/webpack.prod.js  –progress –profile –bail”,<br>    “build”: “npm run build:dev”,<br>    “server:dev:hmr”: “npm run server:dev – –inline –hot”,<br>    “server:dev”: “webpack-dev-server –config config/webpack.dev.js –progress –profile –watch –content-base clientsrc/“,<br>    “server:prod”: “http-server dist –cors”,<br>    “server”: “npm run server:dev”,<br>    “start:hmr”: “npm run server:dev:hmr”,<br>    “start”: “npm run server:dev”,<br>    “version”: “npm run build”,<br>    “watch:dev:hmr”: “npm run watch:dev – –hot”,<br>    “watch:dev”: “npm run build:dev – –watch”,<br>    “watch:prod”: “npm run build:prod – –watch”,<br>    “watch:test”: “npm run test – –auto-watch –no-single-run”,<br>    “watch”: “npm run watch:dev”,<br>    “webpack-dev-server”: “webpack-dev-server”,<br>    “webpack”: “webpack”<br>  },<br>  “dependencies”: {<br>    “@angular/common”: “~2.0.1”,<br>    “@angular/compiler”: “~2.0.1”,<br>    “@angular/core”: “~2.0.1”,<br>    “@angular/forms”: “~2.0.1”,<br>    “@angular/http”: “~2.0.1”,<br>    “@angular/platform-browser”: “~2.0.1”,<br>    “@angular/platform-browser-dynamic”: “~2.0.1”,<br>    “@angular/router”: “~3.0.1”,<br>    “@angular/upgrade”: “~2.0.1”,<br>    “angular-in-memory-web-api”: “~0.1.1”,<br>    “@angularclass/conventions-loader”: “^1.0.2”,<br>    “@angularclass/hmr”: “~1.2.0”,<br>    “@angularclass/hmr-loader”: “~3.0.2”,<br>    “@angularclass/request-idle-callback”: “^1.0.7”,<br>    “@angularclass/webpack-toolkit”: “^1.3.3”,<br>    “assets-webpack-plugin”: “^3.4.0”,<br>    “core-js”: “^2.4.1”,<br>    “http-server”: “^0.9.0”,<br>    “ie-shim”: “^0.1.0”,<br>    “rxjs”: “5.0.0-beta.12”,<br>    “zone.js”: “~0.6.17”,<br>    “@angular/material”: “^2.0.0-alpha.9”,<br>    “hammerjs”: “^2.0.8”<br>  },<br>  “devDependencies”: {<br>    “@types/hammerjs”: “^2.0.33”,<br>    “@types/jasmine”: “^2.2.34”,<br>    “@types/node”: “^6.0.38”,<br>    “@types/source-map”: “^0.1.27”,<br>    “@types/uglify-js”: “^2.0.27”,<br>    “@types/webpack”: “^1.12.34”,<br>    “angular2-template-loader”: “^0.5.0”,<br>    “awesome-typescript-loader”: “^2.2.1”,<br>    “codelyzer”: “~0.0.28”,<br>    “copy-webpack-plugin”: “^3.0.1”,<br>    “clean-webpack-plugin”: “^0.1.10”,<br>    “css-loader”: “^0.25.0”,<br>    “exports-loader”: “^0.6.3”,<br>    “expose-loader”: “^0.7.1”,<br>    “file-loader”: “^0.9.0”,<br>    “gh-pages”: “^0.11.0”,<br>    “html-webpack-plugin”: “^2.21.0”,<br>    “imports-loader”: “^0.6.5”,<br>    “json-loader”: “^0.5.4”,<br>    “parse5”: “^1.3.2”,<br>    “phantomjs”: “^2.1.7”,<br>    “raw-loader”: “0.5.1”,<br>    “rimraf”: “^2.5.2”,<br>    “source-map-loader”: “^0.1.5”,<br>    “string-replace-loader”: “1.0.5”,<br>    “style-loader”: “^0.13.1”,<br>    “sass-loader”: “^3.1.2”,<br>    “to-string-loader”: “^1.1.4”,<br>    “ts-helpers”: “1.1.1”,<br>    “ts-node”: “^1.3.0”,<br>    “tslint”: “3.15.1”,<br>    “tslint-loader”: “^2.1.3”,<br>    “typedoc”: “^0.4.5”,<br>    “typescript”: “2.0.3”,<br>    “url-loader”: “^0.5.7”,<br>    “webpack”: “2.1.0-beta.22”,<br>    “webpack-dev-middleware”: “^1.6.1”,<br>    “webpack-dev-server”: “^2.1.0-beta.2”,<br>    “webpack-md5-hash”: “^0.0.5”,<br>    “webpack-merge”: “^0.14.1”<br>  }<br>}</p>\n<p>Right after saving this, ASP.NET Core starts restoring the packages. It would download all packages mentioned in <em>dependencies</em> section of above <em>package.json</em>. Sometimes in solution explorer you might see ‘Dependencies - not installed’, don’t worry this bug in tooling. All the npm packages are installed.</p>\n<h2 id=\"Step-5-Add-TypeScript-configuration-file-must-for-Angular-2-in-ASP-NET-Core-using-TypeScript\"><a href=\"#Step-5-Add-TypeScript-configuration-file-must-for-Angular-2-in-ASP-NET-Core-using-TypeScript\" class=\"headerlink\" title=\"Step 5: Add TypeScript configuration file - must for Angular 2 in ASP.NET Core using TypeScript\"></a>Step 5: Add TypeScript configuration file - must for Angular 2 in ASP.NET Core using TypeScript</h2><p>We are creating Angular 2 in ASP.NET Core starting with TypeScript, this obvious reason adds to include TypeScript Configuration file which does work of transpiling it to JavaScript, module loading, target ES5 standards. Refer my article on <a href=\"http://www.mithunvp.com/typescript-in-asp-net-5-using-visual-studio-2015/\">Getting Started with TypeScript</a> if you just want beginner intro on it. Add “<em><strong>tsconfig.json</strong></em>“ in the project, copy paste below configuration.</p>\n<blockquote>\n<p>“<strong>baseUrl</strong>“ ensures that TypeScript files are transpiled to JavaScript from the ‘<strong>./clientsrc</strong>‘. This folder is virtual directory for TypeScript</p>\n</blockquote>\n<p>{<br>  “compilerOptions”: {<br>    “target”: “es5”,<br>    “module”: “commonjs”,<br>    “moduleResolution”: “node”,<br>    “emitDecoratorMetadata”: true,<br>    “experimentalDecorators”: true,<br>    “allowSyntheticDefaultImports”: true,<br>    “sourceMap”: true,<br>    “noEmitHelpers”: true,<br>    “strictNullChecks”: false,<br>    “baseUrl”: “./clientsrc”,<br>    “paths”: [],<br>    “lib”: [<br>      “dom”,<br>      “es6”<br>    ],<br>    “types”: [<br>      “hammerjs”,<br>      “node”,<br>      “source-map”,<br>      “uglify-js”,<br>      “webpack”<br>    ]<br>  },<br>  “exclude”: [<br>    “node_modules”,<br>    “dist”<br>  ],<br>  “awesomeTypescriptLoaderOptions”: {<br>    “forkChecker”: true,<br>    “useWebpackText”: true<br>  },<br>  “compileOnSave”: false,<br>  “buildOnSave”: false,<br>  “atom”: { “rewriteTsconfig”: false }<br>}</p>\n<p><strong>It’s mandatory to install TypeScript 2.o for working with Angular 2.</strong> At present <strong>typings.json</strong> is not required because we are using <a href=\"https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/\" target=\"_blank\" rel=\"noopener\"><strong>@types</strong> with TypeScript</a>. However if your using any other packages which don’t have entries in @types then <strong>typings.json</strong> has to be added.</p>\n<h2 id=\"Step-6-Usage-of-Webpack-as-module-bundler\"><a href=\"#Step-6-Usage-of-Webpack-as-module-bundler\" class=\"headerlink\" title=\"Step 6: Usage of Webpack as module bundler\"></a>Step 6: Usage of Webpack as module bundler</h2><h4 id=\"What-is-Webpack\"><a href=\"#What-is-Webpack\" class=\"headerlink\" title=\"What is Webpack?\"></a>What is Webpack?</h4><p>Webpack is a powerful module bundler. A bundle is a JavaScript file that incorporate assets that belong together and should be served to the client in a response to a single file request. A bundle can include JavaScript, CSS styles, HTML, and almost any other kind of file. Webpack roams over your application source code, looking for import statements, building a dependency graph, and emitting one (or more) bundles. With plugin “loaders” Webpack can preprocess and minify different non-JavaScript files such as TypeScript, SASS, and LESS files. In package.json, we have added <strong>“</strong>webpack<strong>“</strong> packages as <strong>“</strong>devdependencies<strong>“</strong>. They will perform all bundling work. What webpack does is written in a JavaScript configuration file know as <strong>webpack.config.js</strong>. As always the applications are run in <strong>Development</strong>, <strong>Test</strong> and <strong>Production</strong> environment. There are some common functionalities and some specific to environments. We will focus on <strong>development</strong> and <strong>production</strong> environment to write accordingly. <strong>Development</strong> environment should have source maps for debugging TypeScript files, <em>minifying bundles of JS, CSS etc files not necessary.</em> <strong>Production</strong> environment should minify bundles to reduce loading time, do not include source maps. Webpack 2 also does tree shaking i.e. eliminate unused code to further reduce bundle sizes.</p>\n<blockquote>\n<p>The entire source code is on my <a href=\"https://github.com/mithunvp/ng2CoreContacts\" target=\"_blank\" rel=\"noopener\">github repo</a>, fork or clone to play with it.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong> – Based on environment set <strong>process.env.NODE_ENV</strong>, it runs either dev or prod configurations. <strong>Webpack.common.js</strong> before bundling environment specific files, it performs tasks meant to be used for both environment.</p>\n<ol>\n<li>Webpack splits Angular 2 apps into 3 files <strong>polyfills</strong>(to maintain backward compatibility with older browsers) , <strong>vendors</strong>(all JS, CSS, HTML, SCSS, images, JSON etc into one file) and <strong>boot</strong> (application specific files)</li>\n<li>resolve based on various file extensions</li>\n<li>Webpack itself doesn’t know what to do with a non-JavaScript file. We teach it to process such files into JavaScript with <em><strong>loaders</strong></em>. For this, we have written loaders TS, HTML, JSON, Fonts, images</li>\n<li>Any static assets placed in <strong>“</strong>clientsrc<strong>/assets”</strong> will be copied to <strong>assets</strong> folder using <strong>CopyWebpackPlugin</strong></li>\n<li><strong>CleanWebpackPlugin</strong> cleans <strong>“</strong>wwwroot<strong>/dist”</strong> folder every time we run it, so that we get fresh set of files.</li>\n<li><em>I told you above to delete the index.html file</em>, now the <strong>clientsrc/index.html</strong> will be moved to wwwroot using <strong>HtmlWebpackPlugin</strong>. Plus Webpack injects the bundle files i.e. <em>polyfills</em>, <em>vendor</em>, <em>boot</em> JS files and includes them in HTML script reference.</li>\n</ol>\n<p>Now let’s see <strong>webpack.dev.js</strong> for development purpose</p>\n<ol>\n<li>Running <strong>“</strong>webpack<strong>-dev-server”</strong> – this runs entire application in memory, any changes to source file gets applied immediately</li>\n<li>Loads application in debug mode with source map. Everything run in memory i.e. html, js, static files are loaded in memory.</li>\n<li>Runs the application on localhost 3000 port. <em>Port can be changed as your convenience</em></li>\n</ol>\n<p>Now let’s see <strong>webpack.prod.js</strong> for production purpose</p>\n<ol>\n<li>Merges all the bundle files and copies to wwwroot.</li>\n<li>Minifies all files to load faster using <strong>UglifyJsPlugin</strong> plugin</li>\n</ol>\n<h2 id=\"Step-7-Writing-Angular-2-application\"><a href=\"#Step-7-Writing-Angular-2-application\" class=\"headerlink\" title=\"Step 7: Writing Angular 2 application\"></a>Step 7: Writing Angular 2 application</h2><p>Until now we created ASP.NET Core app, added TSconfig file, webpack configuration. Now it’s time to write Angular 2 application In the github repo, you can see <strong>“clientsrc”</strong> folder. This contains the angular 2 app which gets bundled into using webpack configurations we wrote <strong>“</strong>Clientsrc<strong>“</strong> folder has index.html, polyfills.browses.ts, vendor.browsers.ts and mostly importantly <strong>boot.ts</strong> We have <strong>app</strong> folder containing HTML, Angular 2 components and root level module (<strong>app.module.ts</strong>) which gets loaded while bootstrapping application. Some of files might be not interesting now, will focus them in separate articles later.</p>\n<h2 id=\"Step-8-Running-the-application\"><a href=\"#Step-8-Running-the-application\" class=\"headerlink\" title=\"Step 8: Running the application\"></a>Step 8: Running the application</h2><p>Before running make sure you have run command “npm <strong>install”</strong>. This might not be needed but still it will ensure all packages are installed. <strong>Now let’s run the application in development mode</strong></p>\n<ol>\n<li>From command line (directory should be same as package.json), type “<strong>npm start”</strong> &amp; hit enter. It will start running the webpack_<strong>-dev-server</strong>_ which loads application and listens on localhost:3000.</li>\n<li>When on console it says “bundle is now VALID” then open a browser and navigate to <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a> to see application getting loaded.</li>\n</ol>\n<p>Notice <strong>wwwroot</strong> folder, we don’t see any files copied because everything is running in memory. Now that application runs properly on browser, let’s understand how Angular 2 app loads</p>\n<ol>\n<li>When browser starts rendering <strong>index.html</strong> page, it encounters <strong><my-app>Loading…</my-app></strong> tag.</li>\n<li>Then Angular’s module <strong>platformBrowserDynamic</strong> bootstraps <em>clientsrc/app/AppModule</em> through line <em>platformBrowserDynamic().bootstrapModule(AppModule)</em></li>\n<li><em>AppModule</em> then loads the component <em><strong>app.component.ts</strong></em> which is mentioned in <strong>@NgModule</strong> as bootstrap entry</li>\n<li><strong>Clientsrc/src/Appcomponent</strong> then resolves the <strong><my-app></my-app></strong> tag as selector in it and renders UI with TypeScript code.</li>\n</ol>\n<p>When we enter <strong>“</strong>npm <strong>start”</strong> in console to run the application, execution points scripts section of package.json to below code</p>\n<p>webpack-dev-server –config config/webpack.dev.js –progress –profile –watch –content-base clientsrc/</p>\n<p>This invokes webpack_-dev-server_, runs the development config and watches for any changes in <em><strong>clientsrc</strong></em> folder. Any changes in this folder will reload application with changes.</p>\n<blockquote>\n<p>Here ASP.NET Core is just HTML based web app, so running this app as <strong>npm start</strong> to use AngularClass features of reloading, using webpack, Hot module replacement feature.</p>\n</blockquote>\n<p><strong>Running the application in Production mode</strong> Assuming the application is now ready to deployed, we need to have PROD build. For this run command</p>\n<p>//builds app and copies in wwwroot<br>Npm run build:prod</p>\n<p>Now if you see wwwroot folder, we see the HTML, JS bundle files. This wwwroot folder can be deployed on any web server like IIS or nginx You can either do F5 to run from Visual Studio IDE or run command <strong>npm run server:prod</strong>   [caption id=”attachment_554” align=”aligncenter” width=”583”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/01/npmstart.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/01/npmstart.png\" alt=\"Angular 2 in ASP.NET Core\"></a> Angular 2 running on ASP.NET Core using Web pack[/caption] There is Angular 2 application development using <a href=\"http://www.mithunvp.com/build-angular-apps-using-angular-2-cli/\">Angular 2 Command Line Interface</a> also, it’s interesting !!</p>\n<blockquote>\n<p>Check out source code on my <a href=\"https://github.com/mithunvp/ng2CoreContacts\" target=\"_blank\" rel=\"noopener\">Github repo ng2CoreContacts</a></p>\n</blockquote>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Starting Angular 2 in ASP.NET Core with TypeScript using Visual Studio 2015","path":"angular-2-in-asp-net-5-typescript-visual-studio-2015/","eyeCatchImage":null,"excerpt":null,"date":"2016-01-06T17:43:06.000Z","pv":0,"totalPV":0,"categories":"Angular 2 > ASP.NET Core 1.0","tags":["Angular2","Asp.NET Core 1.0"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Using Angular in ASP.NET MVC 5 with Angular CLI and Visual Studio 2017","url":"698.html","id":"698","date":"2018-05-29T13:04:47.000Z","_content":"\n**Angular** is one of most in-demand web front-end frameworks developed by Google, it gets integrated with any Server side technology. In this article, let's learn how to use Angular (Version 6) with ASP.NET MVC 5 using Angular-CLI. I had written a post a year back on Using Angular4 in [ASP.NET MVC 5](http://www.mithunvp.com/using-angular-2-asp-net-mvc-5-visual-studio/), I felt it was little tedious to get it working as so many technologies are involved. This article describes minimal steps to get started. Software pre-requites\n\n*   Microsoft Visual Studio 2017 (Community Edition)\n*   Install Latest [NodeJs](https://nodejs.org/en/)\n*   TypeScript 2.6 minimum.\n\nInstalling Angular CLI\n----------------------\n\nAngular CLI is a tool for developing an Angular-based (web, PWA) application, everything is out of the box like generating components, services, pipes, unit tests etc. For installing CLI, its must-have NodeJS installed previously. Use this command to install CLI\n\n> **npm install -g @angular/cli**\n\nCreate ASP.NET MVC 5 & Angular app together\n-------------------------------------------\n\nWith Visual Studio 2017 installed, create an ASP.NET MVC 5 application. Named it as _ngGitHouse_. Nothing fancy in this but its first step. Once the CLI is installed, we create a brand new Angular application by running this command **_ng new gitHouseApp –minimal_** inside MVC 5 application folder structure. \\[caption id=\"attachment_703\" align=\"aligncenter\" width=\"721\"\\][![angular](http://www.mithunvp.com/wp-content/uploads/2018/05/ng-new.png)](http://www.mithunvp.com/wp-content/uploads/2018/05/ng-new.png) Create Angular app inside MVC 5\\[/caption\\] It would take few minutes to get all node modules downloaded. You can see in the folder structure that _githouseapp_ folder is created in MVC 5 application folder structure. To ensure that the _githouseapp_ is set up properly; navigate to folder path in command prompt and run the following command **ng build**. If this succeeds then your good to go.\n\nMoving essentials files & folder to root\n----------------------------------------\n\nOur intention is to use Angular framework inside MVC 5 views, to make it easy for understanding and maintenance lets move some essentials files and folder to root of MVC 5 application. The files & folder to be moved are\n\n*   **Src** folder - This is actual source folder of the Angular application, entire project structure is present in this folder.\n*   **package.json** \\- file containing the list of NPM packages needed to develop client application\n*   **angular.json** \\- file containing Configuration settings for the Angular application. This file is essential for Angular-CLI to work seamlessly.\n*   **tsconfig.json** \\- configuration file must for all TypeScript files to transpile to JavaScript.\n*   **node_modules** \\- folder containing all downloaded node modules. This folder is always heavy.\n\n> Do NOT forget to include the above files & folder in Solution Explorer except node_modules\n\n  \\[caption id=\"attachment_705\" align=\"aligncenter\" width=\"265\"\\][![angular](http://www.mithunvp.com/wp-content/uploads/2018/05/folder.png)](http://www.mithunvp.com/wp-content/uploads/2018/05/folder.png) ASP.NET MVC 5 & Angular files together in the folder strucutre\\[/caption\\]  \n\nUpdate configuration settings\n-----------------------------\n\nWe have altered how AngularCLI generates the folder structure because we indent to use it in ASP.NET MVC 5 application. For CLI to work well, we have to update settings in the below configuration file **tsconfig.json **\\- This file is used by TypeScript compiler to transpile to JavaScript. It's a mandatory file wherever TypeScript is used. The _**include**_ config entry tells us to compile TypeScript from **src** folder only instead of entire project structure. If you plan to use TypeScript in another folder, do add in this section. The _**outDir**_ entry in _compilerOptions_ provides a folder for placing all transpiled files with source maps. Source Maps helps us to debug the TypeScript (Angular in this case) code in the browser just like JavaScript code.\n\n{\n  \"compileOnSave\": false,\n  \"include\": \\[\n    \"./src\"\n  \\],\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./scripts/out-tsc\",\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"moduleResolution\": \"node\",\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"target\": \"es5\",\n    \"typeRoots\": \\[\n      \"node_modules/@types\"\n    \\],\n    \"lib\": \\[\n      \"es2017\",\n      \"dom\"\n    \\]\n  }\n}\n\n**angular.json** \\- This is the heart of AngularCLI, it contains all options necessary to play around Angular artifacts like generating components, pipes, service provider, class, directives etc. The _sourceRoot_ now points to _src_ folder, the _**outputPath**_ is now pointing to **./Scripts/libs** folder as part of MVC 5 project. The output files of _ng build command_ will be copied here. \\[caption id=\"attachment_706\" align=\"aligncenter\" width=\"585\"\\][![angular](http://www.mithunvp.com/wp-content/uploads/2018/05/ngCOnf.png)](http://www.mithunvp.com/wp-content/uploads/2018/05/ngCOnf.png) OutputPath updated in Angular.json\\[/caption\\] _I recommend removing the **githouseapp** created by CLI project._\n\n**Building the application**\n----------------------------\n\nAs we moved folder location, configuration files got updated, its best to run the command _**ng build**_ in project root folder from command prompt. If done successfully, you would see a similar image as below. _Don't forget to include **scripts/libs** folder in Solution Explorer._\n\n> **ng build --watch** will run the build when file changes\n\n\\[caption id=\"attachment_708\" align=\"aligncenter\" width=\"884\"\\][![angular ng build](http://www.mithunvp.com/wp-content/uploads/2018/05/ngnuild.png)](http://www.mithunvp.com/wp-content/uploads/2018/05/ngnuild.png) ng build running successfully\\[/caption\\]\n\nLoading Angular in MVC 5 views\n------------------------------\n\nNow that everything is building properly, let's load the Angular app in ASP.NET MVC 5 views. I will be using _Contact._cshtml file generated while scaffolding MVC application. I removed the existing code to include our code to load the component as below. The **app-root** is an Angular Component generated by default using CLI\n\n@section Scripts {\n    <script type=\"text/javascript\" src=\"~/Scripts/libs/runtime.js\"></script>\n    <script type=\"text/javascript\" src=\"~/Scripts/libs/polyfills.js\"></script>\n    <script type=\"text/javascript\" src=\"~/Scripts/libs/styles.js\"></script>\n    <script type=\"text/javascript\" src=\"~/Scripts/libs/vendor.js\"></script>\n    <script type=\"text/javascript\" src=\"~/Scripts/libs/main.js\"></script>\n}\n\n<app-root></app-root>\n\nThe _Scripts_ section includes the link to files created in **libs** folder run from above step. **The JS files referencing order is important here. ** Run the application, click on the Contact link on the navbar to load the Angular. **[Source code for this on my Github](https://github.com/mithunvp/ngGitHouse) account, click here to play around with it**\n\nDebugging the app\n-----------------\n\nWe successfully ran the Angular code in ASP.NET MVC 5, debugging the code in the browser (chrome) involves press F12, select _Sources_ tab. Check out below image for file location while running application. Do run the command _**ng build --watch**_ to compile Angular code automatically \\[caption id=\"attachment_709\" align=\"aligncenter\" width=\"1024\"\\][![angular](http://www.mithunvp.com/wp-content/uploads/2018/05/runningDebugging-1024x389.png)](http://www.mithunvp.com/wp-content/uploads/2018/05/runningDebugging.png) Running & Debugging Angular Code in ASP.NET MVC 5\\[/caption\\]","source":"_posts/angular-asp-net-mvc-5-angular-cli-visual-studio-2017.md","raw":"---\ntitle: Using Angular in ASP.NET MVC 5 with Angular CLI and Visual Studio 2017\ntags:\n  - Angular\n  - MVC 5\nurl: 698.html\nid: 698\ncategories:\n  - Angular\n  - ASP.NET MVC 5\ndate: 2018-05-29 18:34:47\n---\n\n**Angular** is one of most in-demand web front-end frameworks developed by Google, it gets integrated with any Server side technology. In this article, let's learn how to use Angular (Version 6) with ASP.NET MVC 5 using Angular-CLI. I had written a post a year back on Using Angular4 in [ASP.NET MVC 5](http://www.mithunvp.com/using-angular-2-asp-net-mvc-5-visual-studio/), I felt it was little tedious to get it working as so many technologies are involved. This article describes minimal steps to get started. Software pre-requites\n\n*   Microsoft Visual Studio 2017 (Community Edition)\n*   Install Latest [NodeJs](https://nodejs.org/en/)\n*   TypeScript 2.6 minimum.\n\nInstalling Angular CLI\n----------------------\n\nAngular CLI is a tool for developing an Angular-based (web, PWA) application, everything is out of the box like generating components, services, pipes, unit tests etc. For installing CLI, its must-have NodeJS installed previously. Use this command to install CLI\n\n> **npm install -g @angular/cli**\n\nCreate ASP.NET MVC 5 & Angular app together\n-------------------------------------------\n\nWith Visual Studio 2017 installed, create an ASP.NET MVC 5 application. Named it as _ngGitHouse_. Nothing fancy in this but its first step. Once the CLI is installed, we create a brand new Angular application by running this command **_ng new gitHouseApp –minimal_** inside MVC 5 application folder structure. \\[caption id=\"attachment_703\" align=\"aligncenter\" width=\"721\"\\][![angular](http://www.mithunvp.com/wp-content/uploads/2018/05/ng-new.png)](http://www.mithunvp.com/wp-content/uploads/2018/05/ng-new.png) Create Angular app inside MVC 5\\[/caption\\] It would take few minutes to get all node modules downloaded. You can see in the folder structure that _githouseapp_ folder is created in MVC 5 application folder structure. To ensure that the _githouseapp_ is set up properly; navigate to folder path in command prompt and run the following command **ng build**. If this succeeds then your good to go.\n\nMoving essentials files & folder to root\n----------------------------------------\n\nOur intention is to use Angular framework inside MVC 5 views, to make it easy for understanding and maintenance lets move some essentials files and folder to root of MVC 5 application. The files & folder to be moved are\n\n*   **Src** folder - This is actual source folder of the Angular application, entire project structure is present in this folder.\n*   **package.json** \\- file containing the list of NPM packages needed to develop client application\n*   **angular.json** \\- file containing Configuration settings for the Angular application. This file is essential for Angular-CLI to work seamlessly.\n*   **tsconfig.json** \\- configuration file must for all TypeScript files to transpile to JavaScript.\n*   **node_modules** \\- folder containing all downloaded node modules. This folder is always heavy.\n\n> Do NOT forget to include the above files & folder in Solution Explorer except node_modules\n\n  \\[caption id=\"attachment_705\" align=\"aligncenter\" width=\"265\"\\][![angular](http://www.mithunvp.com/wp-content/uploads/2018/05/folder.png)](http://www.mithunvp.com/wp-content/uploads/2018/05/folder.png) ASP.NET MVC 5 & Angular files together in the folder strucutre\\[/caption\\]  \n\nUpdate configuration settings\n-----------------------------\n\nWe have altered how AngularCLI generates the folder structure because we indent to use it in ASP.NET MVC 5 application. For CLI to work well, we have to update settings in the below configuration file **tsconfig.json **\\- This file is used by TypeScript compiler to transpile to JavaScript. It's a mandatory file wherever TypeScript is used. The _**include**_ config entry tells us to compile TypeScript from **src** folder only instead of entire project structure. If you plan to use TypeScript in another folder, do add in this section. The _**outDir**_ entry in _compilerOptions_ provides a folder for placing all transpiled files with source maps. Source Maps helps us to debug the TypeScript (Angular in this case) code in the browser just like JavaScript code.\n\n{\n  \"compileOnSave\": false,\n  \"include\": \\[\n    \"./src\"\n  \\],\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./scripts/out-tsc\",\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"moduleResolution\": \"node\",\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"target\": \"es5\",\n    \"typeRoots\": \\[\n      \"node_modules/@types\"\n    \\],\n    \"lib\": \\[\n      \"es2017\",\n      \"dom\"\n    \\]\n  }\n}\n\n**angular.json** \\- This is the heart of AngularCLI, it contains all options necessary to play around Angular artifacts like generating components, pipes, service provider, class, directives etc. The _sourceRoot_ now points to _src_ folder, the _**outputPath**_ is now pointing to **./Scripts/libs** folder as part of MVC 5 project. The output files of _ng build command_ will be copied here. \\[caption id=\"attachment_706\" align=\"aligncenter\" width=\"585\"\\][![angular](http://www.mithunvp.com/wp-content/uploads/2018/05/ngCOnf.png)](http://www.mithunvp.com/wp-content/uploads/2018/05/ngCOnf.png) OutputPath updated in Angular.json\\[/caption\\] _I recommend removing the **githouseapp** created by CLI project._\n\n**Building the application**\n----------------------------\n\nAs we moved folder location, configuration files got updated, its best to run the command _**ng build**_ in project root folder from command prompt. If done successfully, you would see a similar image as below. _Don't forget to include **scripts/libs** folder in Solution Explorer._\n\n> **ng build --watch** will run the build when file changes\n\n\\[caption id=\"attachment_708\" align=\"aligncenter\" width=\"884\"\\][![angular ng build](http://www.mithunvp.com/wp-content/uploads/2018/05/ngnuild.png)](http://www.mithunvp.com/wp-content/uploads/2018/05/ngnuild.png) ng build running successfully\\[/caption\\]\n\nLoading Angular in MVC 5 views\n------------------------------\n\nNow that everything is building properly, let's load the Angular app in ASP.NET MVC 5 views. I will be using _Contact._cshtml file generated while scaffolding MVC application. I removed the existing code to include our code to load the component as below. The **app-root** is an Angular Component generated by default using CLI\n\n@section Scripts {\n    <script type=\"text/javascript\" src=\"~/Scripts/libs/runtime.js\"></script>\n    <script type=\"text/javascript\" src=\"~/Scripts/libs/polyfills.js\"></script>\n    <script type=\"text/javascript\" src=\"~/Scripts/libs/styles.js\"></script>\n    <script type=\"text/javascript\" src=\"~/Scripts/libs/vendor.js\"></script>\n    <script type=\"text/javascript\" src=\"~/Scripts/libs/main.js\"></script>\n}\n\n<app-root></app-root>\n\nThe _Scripts_ section includes the link to files created in **libs** folder run from above step. **The JS files referencing order is important here. ** Run the application, click on the Contact link on the navbar to load the Angular. **[Source code for this on my Github](https://github.com/mithunvp/ngGitHouse) account, click here to play around with it**\n\nDebugging the app\n-----------------\n\nWe successfully ran the Angular code in ASP.NET MVC 5, debugging the code in the browser (chrome) involves press F12, select _Sources_ tab. Check out below image for file location while running application. Do run the command _**ng build --watch**_ to compile Angular code automatically \\[caption id=\"attachment_709\" align=\"aligncenter\" width=\"1024\"\\][![angular](http://www.mithunvp.com/wp-content/uploads/2018/05/runningDebugging-1024x389.png)](http://www.mithunvp.com/wp-content/uploads/2018/05/runningDebugging.png) Running & Debugging Angular Code in ASP.NET MVC 5\\[/caption\\]","slug":"angular-asp-net-mvc-5-angular-cli-visual-studio-2017","published":1,"updated":"2018-07-10T19:49:06.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034ve0007s4tj0wl6f0h0","content":"<p><strong>Angular</strong> is one of most in-demand web front-end frameworks developed by Google, it gets integrated with any Server side technology. In this article, let’s learn how to use Angular (Version 6) with ASP.NET MVC 5 using Angular-CLI. I had written a post a year back on Using Angular4 in <a href=\"http://www.mithunvp.com/using-angular-2-asp-net-mvc-5-visual-studio/\">ASP.NET MVC 5</a>, I felt it was little tedious to get it working as so many technologies are involved. This article describes minimal steps to get started. Software pre-requites</p>\n<ul>\n<li>Microsoft Visual Studio 2017 (Community Edition)</li>\n<li>Install Latest <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">NodeJs</a></li>\n<li>TypeScript 2.6 minimum.</li>\n</ul>\n<h2 id=\"Installing-Angular-CLI\"><a href=\"#Installing-Angular-CLI\" class=\"headerlink\" title=\"Installing Angular CLI\"></a>Installing Angular CLI</h2><p>Angular CLI is a tool for developing an Angular-based (web, PWA) application, everything is out of the box like generating components, services, pipes, unit tests etc. For installing CLI, its must-have NodeJS installed previously. Use this command to install CLI</p>\n<blockquote>\n<p><strong>npm install -g @angular/cli</strong></p>\n</blockquote>\n<h2 id=\"Create-ASP-NET-MVC-5-amp-Angular-app-together\"><a href=\"#Create-ASP-NET-MVC-5-amp-Angular-app-together\" class=\"headerlink\" title=\"Create ASP.NET MVC 5 &amp; Angular app together\"></a>Create ASP.NET MVC 5 &amp; Angular app together</h2><p>With Visual Studio 2017 installed, create an ASP.NET MVC 5 application. Named it as <em>ngGitHouse</em>. Nothing fancy in this but its first step. Once the CLI is installed, we create a brand new Angular application by running this command <strong><em>ng new gitHouseApp –minimal</em></strong> inside MVC 5 application folder structure. [caption id=”attachment_703” align=”aligncenter” width=”721”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/05/ng-new.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/05/ng-new.png\" alt=\"angular\"></a> Create Angular app inside MVC 5[/caption] It would take few minutes to get all node modules downloaded. You can see in the folder structure that <em>githouseapp</em> folder is created in MVC 5 application folder structure. To ensure that the <em>githouseapp</em> is set up properly; navigate to folder path in command prompt and run the following command <strong>ng build</strong>. If this succeeds then your good to go.</p>\n<h2 id=\"Moving-essentials-files-amp-folder-to-root\"><a href=\"#Moving-essentials-files-amp-folder-to-root\" class=\"headerlink\" title=\"Moving essentials files &amp; folder to root\"></a>Moving essentials files &amp; folder to root</h2><p>Our intention is to use Angular framework inside MVC 5 views, to make it easy for understanding and maintenance lets move some essentials files and folder to root of MVC 5 application. The files &amp; folder to be moved are</p>\n<ul>\n<li><strong>Src</strong> folder - This is actual source folder of the Angular application, entire project structure is present in this folder.</li>\n<li><strong>package.json</strong> - file containing the list of NPM packages needed to develop client application</li>\n<li><strong>angular.json</strong> - file containing Configuration settings for the Angular application. This file is essential for Angular-CLI to work seamlessly.</li>\n<li><strong>tsconfig.json</strong> - configuration file must for all TypeScript files to transpile to JavaScript.</li>\n<li><strong>node_modules</strong> - folder containing all downloaded node modules. This folder is always heavy.</li>\n</ul>\n<blockquote>\n<p>Do NOT forget to include the above files &amp; folder in Solution Explorer except node_modules</p>\n</blockquote>\n<p>  [caption id=”attachment_705” align=”aligncenter” width=”265”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/05/folder.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/05/folder.png\" alt=\"angular\"></a> ASP.NET MVC 5 &amp; Angular files together in the folder strucutre[/caption]  </p>\n<h2 id=\"Update-configuration-settings\"><a href=\"#Update-configuration-settings\" class=\"headerlink\" title=\"Update configuration settings\"></a>Update configuration settings</h2><p>We have altered how AngularCLI generates the folder structure because we indent to use it in ASP.NET MVC 5 application. For CLI to work well, we have to update settings in the below configuration file <strong>tsconfig.json </strong>- This file is used by TypeScript compiler to transpile to JavaScript. It’s a mandatory file wherever TypeScript is used. The <em><strong>include</strong></em> config entry tells us to compile TypeScript from <strong>src</strong> folder only instead of entire project structure. If you plan to use TypeScript in another folder, do add in this section. The <em><strong>outDir</strong></em> entry in <em>compilerOptions</em> provides a folder for placing all transpiled files with source maps. Source Maps helps us to debug the TypeScript (Angular in this case) code in the browser just like JavaScript code.</p>\n<p>{<br>  “compileOnSave”: false,<br>  “include”: [<br>    “./src”<br>  ],<br>  “compilerOptions”: {<br>    “baseUrl”: “./“,<br>    “outDir”: “./scripts/out-tsc”,<br>    “sourceMap”: true,<br>    “declaration”: false,<br>    “moduleResolution”: “node”,<br>    “emitDecoratorMetadata”: true,<br>    “experimentalDecorators”: true,<br>    “target”: “es5”,<br>    “typeRoots”: [<br>      “node_modules/@types”<br>    ],<br>    “lib”: [<br>      “es2017”,<br>      “dom”<br>    ]<br>  }<br>}</p>\n<p><strong>angular.json</strong> - This is the heart of AngularCLI, it contains all options necessary to play around Angular artifacts like generating components, pipes, service provider, class, directives etc. The <em>sourceRoot</em> now points to <em>src</em> folder, the <em><strong>outputPath</strong></em> is now pointing to <strong>./Scripts/libs</strong> folder as part of MVC 5 project. The output files of <em>ng build command</em> will be copied here. [caption id=”attachment_706” align=”aligncenter” width=”585”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/05/ngCOnf.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/05/ngCOnf.png\" alt=\"angular\"></a> OutputPath updated in Angular.json[/caption] <em>I recommend removing the <strong>githouseapp</strong> created by CLI project.</em></p>\n<h2 id=\"Building-the-application\"><a href=\"#Building-the-application\" class=\"headerlink\" title=\"Building the application\"></a><strong>Building the application</strong></h2><p>As we moved folder location, configuration files got updated, its best to run the command <em><strong>ng build</strong></em> in project root folder from command prompt. If done successfully, you would see a similar image as below. <em>Don’t forget to include <strong>scripts/libs</strong> folder in Solution Explorer.</em></p>\n<blockquote>\n<p><strong>ng build –watch</strong> will run the build when file changes</p>\n</blockquote>\n<p>[caption id=”attachment_708” align=”aligncenter” width=”884”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/05/ngnuild.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/05/ngnuild.png\" alt=\"angular ng build\"></a> ng build running successfully[/caption]</p>\n<h2 id=\"Loading-Angular-in-MVC-5-views\"><a href=\"#Loading-Angular-in-MVC-5-views\" class=\"headerlink\" title=\"Loading Angular in MVC 5 views\"></a>Loading Angular in MVC 5 views</h2><p>Now that everything is building properly, let’s load the Angular app in ASP.NET MVC 5 views. I will be using _Contact._cshtml file generated while scaffolding MVC application. I removed the existing code to include our code to load the component as below. The <strong>app-root</strong> is an Angular Component generated by default using CLI</p>\n<p>@section Scripts {<br>    <script type=\"text/javascript\" src=\"~/Scripts/libs/runtime.js\"></script><br>    <script type=\"text/javascript\" src=\"~/Scripts/libs/polyfills.js\"></script><br>    <script type=\"text/javascript\" src=\"~/Scripts/libs/styles.js\"></script><br>    <script type=\"text/javascript\" src=\"~/Scripts/libs/vendor.js\"></script><br>    <script type=\"text/javascript\" src=\"~/Scripts/libs/main.js\"></script><br>}</p>\n<p><app-root></app-root></p>\n<p>The <em>Scripts</em> section includes the link to files created in <strong>libs</strong> folder run from above step. <strong>The JS files referencing order is important here. </strong> Run the application, click on the Contact link on the navbar to load the Angular. <strong><a href=\"https://github.com/mithunvp/ngGitHouse\" target=\"_blank\" rel=\"noopener\">Source code for this on my Github</a> account, click here to play around with it</strong></p>\n<h2 id=\"Debugging-the-app\"><a href=\"#Debugging-the-app\" class=\"headerlink\" title=\"Debugging the app\"></a>Debugging the app</h2><p>We successfully ran the Angular code in ASP.NET MVC 5, debugging the code in the browser (chrome) involves press F12, select <em>Sources</em> tab. Check out below image for file location while running application. Do run the command <em><strong>ng build –watch</strong></em> to compile Angular code automatically [caption id=”attachment_709” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/05/runningDebugging.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/05/runningDebugging-1024x389.png\" alt=\"angular\"></a> Running &amp; Debugging Angular Code in ASP.NET MVC 5[/caption]</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Angular</strong> is one of most in-demand web front-end frameworks developed by Google, it gets integrated with any Server side technology. In this article, let’s learn how to use Angular (Version 6) with ASP.NET MVC 5 using Angular-CLI. I had written a post a year back on Using Angular4 in <a href=\"http://www.mithunvp.com/using-angular-2-asp-net-mvc-5-visual-studio/\">ASP.NET MVC 5</a>, I felt it was little tedious to get it working as so many technologies are involved. This article describes minimal steps to get started. Software pre-requites</p>\n<ul>\n<li>Microsoft Visual Studio 2017 (Community Edition)</li>\n<li>Install Latest <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">NodeJs</a></li>\n<li>TypeScript 2.6 minimum.</li>\n</ul>\n<h2 id=\"Installing-Angular-CLI\"><a href=\"#Installing-Angular-CLI\" class=\"headerlink\" title=\"Installing Angular CLI\"></a>Installing Angular CLI</h2><p>Angular CLI is a tool for developing an Angular-based (web, PWA) application, everything is out of the box like generating components, services, pipes, unit tests etc. For installing CLI, its must-have NodeJS installed previously. Use this command to install CLI</p>\n<blockquote>\n<p><strong>npm install -g @angular/cli</strong></p>\n</blockquote>\n<h2 id=\"Create-ASP-NET-MVC-5-amp-Angular-app-together\"><a href=\"#Create-ASP-NET-MVC-5-amp-Angular-app-together\" class=\"headerlink\" title=\"Create ASP.NET MVC 5 &amp; Angular app together\"></a>Create ASP.NET MVC 5 &amp; Angular app together</h2><p>With Visual Studio 2017 installed, create an ASP.NET MVC 5 application. Named it as <em>ngGitHouse</em>. Nothing fancy in this but its first step. Once the CLI is installed, we create a brand new Angular application by running this command <strong><em>ng new gitHouseApp –minimal</em></strong> inside MVC 5 application folder structure. [caption id=”attachment_703” align=”aligncenter” width=”721”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/05/ng-new.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/05/ng-new.png\" alt=\"angular\"></a> Create Angular app inside MVC 5[/caption] It would take few minutes to get all node modules downloaded. You can see in the folder structure that <em>githouseapp</em> folder is created in MVC 5 application folder structure. To ensure that the <em>githouseapp</em> is set up properly; navigate to folder path in command prompt and run the following command <strong>ng build</strong>. If this succeeds then your good to go.</p>\n<h2 id=\"Moving-essentials-files-amp-folder-to-root\"><a href=\"#Moving-essentials-files-amp-folder-to-root\" class=\"headerlink\" title=\"Moving essentials files &amp; folder to root\"></a>Moving essentials files &amp; folder to root</h2><p>Our intention is to use Angular framework inside MVC 5 views, to make it easy for understanding and maintenance lets move some essentials files and folder to root of MVC 5 application. The files &amp; folder to be moved are</p>\n<ul>\n<li><strong>Src</strong> folder - This is actual source folder of the Angular application, entire project structure is present in this folder.</li>\n<li><strong>package.json</strong> - file containing the list of NPM packages needed to develop client application</li>\n<li><strong>angular.json</strong> - file containing Configuration settings for the Angular application. This file is essential for Angular-CLI to work seamlessly.</li>\n<li><strong>tsconfig.json</strong> - configuration file must for all TypeScript files to transpile to JavaScript.</li>\n<li><strong>node_modules</strong> - folder containing all downloaded node modules. This folder is always heavy.</li>\n</ul>\n<blockquote>\n<p>Do NOT forget to include the above files &amp; folder in Solution Explorer except node_modules</p>\n</blockquote>\n<p>  [caption id=”attachment_705” align=”aligncenter” width=”265”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/05/folder.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/05/folder.png\" alt=\"angular\"></a> ASP.NET MVC 5 &amp; Angular files together in the folder strucutre[/caption]  </p>\n<h2 id=\"Update-configuration-settings\"><a href=\"#Update-configuration-settings\" class=\"headerlink\" title=\"Update configuration settings\"></a>Update configuration settings</h2><p>We have altered how AngularCLI generates the folder structure because we indent to use it in ASP.NET MVC 5 application. For CLI to work well, we have to update settings in the below configuration file <strong>tsconfig.json </strong>- This file is used by TypeScript compiler to transpile to JavaScript. It’s a mandatory file wherever TypeScript is used. The <em><strong>include</strong></em> config entry tells us to compile TypeScript from <strong>src</strong> folder only instead of entire project structure. If you plan to use TypeScript in another folder, do add in this section. The <em><strong>outDir</strong></em> entry in <em>compilerOptions</em> provides a folder for placing all transpiled files with source maps. Source Maps helps us to debug the TypeScript (Angular in this case) code in the browser just like JavaScript code.</p>\n<p>{<br>  “compileOnSave”: false,<br>  “include”: [<br>    “./src”<br>  ],<br>  “compilerOptions”: {<br>    “baseUrl”: “./“,<br>    “outDir”: “./scripts/out-tsc”,<br>    “sourceMap”: true,<br>    “declaration”: false,<br>    “moduleResolution”: “node”,<br>    “emitDecoratorMetadata”: true,<br>    “experimentalDecorators”: true,<br>    “target”: “es5”,<br>    “typeRoots”: [<br>      “node_modules/@types”<br>    ],<br>    “lib”: [<br>      “es2017”,<br>      “dom”<br>    ]<br>  }<br>}</p>\n<p><strong>angular.json</strong> - This is the heart of AngularCLI, it contains all options necessary to play around Angular artifacts like generating components, pipes, service provider, class, directives etc. The <em>sourceRoot</em> now points to <em>src</em> folder, the <em><strong>outputPath</strong></em> is now pointing to <strong>./Scripts/libs</strong> folder as part of MVC 5 project. The output files of <em>ng build command</em> will be copied here. [caption id=”attachment_706” align=”aligncenter” width=”585”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/05/ngCOnf.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/05/ngCOnf.png\" alt=\"angular\"></a> OutputPath updated in Angular.json[/caption] <em>I recommend removing the <strong>githouseapp</strong> created by CLI project.</em></p>\n<h2 id=\"Building-the-application\"><a href=\"#Building-the-application\" class=\"headerlink\" title=\"Building the application\"></a><strong>Building the application</strong></h2><p>As we moved folder location, configuration files got updated, its best to run the command <em><strong>ng build</strong></em> in project root folder from command prompt. If done successfully, you would see a similar image as below. <em>Don’t forget to include <strong>scripts/libs</strong> folder in Solution Explorer.</em></p>\n<blockquote>\n<p><strong>ng build –watch</strong> will run the build when file changes</p>\n</blockquote>\n<p>[caption id=”attachment_708” align=”aligncenter” width=”884”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/05/ngnuild.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/05/ngnuild.png\" alt=\"angular ng build\"></a> ng build running successfully[/caption]</p>\n<h2 id=\"Loading-Angular-in-MVC-5-views\"><a href=\"#Loading-Angular-in-MVC-5-views\" class=\"headerlink\" title=\"Loading Angular in MVC 5 views\"></a>Loading Angular in MVC 5 views</h2><p>Now that everything is building properly, let’s load the Angular app in ASP.NET MVC 5 views. I will be using _Contact._cshtml file generated while scaffolding MVC application. I removed the existing code to include our code to load the component as below. The <strong>app-root</strong> is an Angular Component generated by default using CLI</p>\n<p>@section Scripts {<br>    <script type=\"text/javascript\" src=\"~/Scripts/libs/runtime.js\"></script><br>    <script type=\"text/javascript\" src=\"~/Scripts/libs/polyfills.js\"></script><br>    <script type=\"text/javascript\" src=\"~/Scripts/libs/styles.js\"></script><br>    <script type=\"text/javascript\" src=\"~/Scripts/libs/vendor.js\"></script><br>    <script type=\"text/javascript\" src=\"~/Scripts/libs/main.js\"></script><br>}</p>\n<p><app-root></app-root></p>\n<p>The <em>Scripts</em> section includes the link to files created in <strong>libs</strong> folder run from above step. <strong>The JS files referencing order is important here. </strong> Run the application, click on the Contact link on the navbar to load the Angular. <strong><a href=\"https://github.com/mithunvp/ngGitHouse\" target=\"_blank\" rel=\"noopener\">Source code for this on my Github</a> account, click here to play around with it</strong></p>\n<h2 id=\"Debugging-the-app\"><a href=\"#Debugging-the-app\" class=\"headerlink\" title=\"Debugging the app\"></a>Debugging the app</h2><p>We successfully ran the Angular code in ASP.NET MVC 5, debugging the code in the browser (chrome) involves press F12, select <em>Sources</em> tab. Check out below image for file location while running application. Do run the command <em><strong>ng build –watch</strong></em> to compile Angular code automatically [caption id=”attachment_709” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/05/runningDebugging.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/05/runningDebugging-1024x389.png\" alt=\"angular\"></a> Running &amp; Debugging Angular Code in ASP.NET MVC 5[/caption]</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Using Angular in ASP.NET MVC 5 with Angular CLI and Visual Studio 2017","path":"angular-asp-net-mvc-5-angular-cli-visual-studio-2017/","eyeCatchImage":null,"excerpt":null,"date":"2018-05-29T13:04:47.000Z","pv":0,"totalPV":0,"categories":"Angular > ASP.NET MVC 5","tags":["Angular","MVC 5"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ASP.NET Core 1.0  - Create web application using Yeoman and Visual Studio Code","url":"357.html","id":"357","date":"2016-02-18T09:17:52.000Z","_content":"\n[![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/1start-300x153.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/1start.png)Creating **ASP.NET Core 1.0** web applications is very easy using Visual Studio Code along with Yeoman generators. Here in this tutorial will learn about creating web application and running it. _These steps are not confined to Windows environment alone, we can use them on Mac or Linux_ This example is for creating basic ASP.NET Core 1.0 empty application without need of Visual Studio IDE. What we will learn here?\n\n1.  Ensure NPM, Yeoman, Visual Studio Code is installed\n2.  Install ASPNET yeoman generator.\n3.  Create ASP.NET Core 1.0 empty web application using Yeoman generator\n4.  Add Static Files and Default Files packages and DNU restore\n5.  Creating index.html file and run application using _lite-server_\n\nStep 1 : Ensure NPM, Yeoman, Visual Studio Code is installed\n------------------------------------------------------------\n\nNPM(Node Package Manager) is used to install Yeoman, Angular and other packages. NPM can be installed using [Installing Node.js and updating npm](https://docs.npmjs.com/getting-started/installing-node)\n\n> **yo** is the Yeoman command line utility allowing the creation of projects utilizing scaffolding templates (referred to as generators). Yo and the generators used are installed using npm.\n\nGoing through [GETTING STARTED WITH YEOMAN](http://yeoman.io/learning/) will help us get Yeoman installed and its usage. [Visual Studio Code](https://code.visualstudio.com/) (VS Code) is code editor redefining how simpler life can get, esp I liked idea of working with ASP.NET Core 1.0 apps without full fledged Visual Studio IDE. Quick snapshot of NPM, Yeoman installed. Installing them globally will avoid doing these steps again. \\[caption id=\"attachment_366\" align=\"aligncenter\" width=\"720\"\\][![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/npm-yeoman.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/npm-yeoman.png) Verify NPM and Yeoman are installed\\[/caption\\]\n\nStep 2: Install ASPNET Yeoman generator\n---------------------------------------\n\nNow that Yeoman generator is installed, we need to install ASPNET generator for creating ASP.NET Core 1.0 applications. Recommend reading [ASPNET generator](https://www.npmjs.com/package/generator-aspnet) for more understanding Open command prompt and run following command, ensure that you are connected to Internet.\n\nnpm install -g generator-aspnet\n\n\\[caption id=\"attachment_367\" align=\"aligncenter\" width=\"594\"\\][![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/installASPNetGenerator.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/installASPNetGenerator.png) ASPNET Yeoman Generator installed\\[/caption\\]\n\nStep 3: Create ASP.NET Core 1.0 empty web application using Yeoman generator\n----------------------------------------------------------------------------\n\nThere are two ways to create ASP.NET Core 1.0 applications using Yeoman generators itself - **Command line option** and **Visual Studio Code  yo extension option**. Lets create using command line option and check out steps involved \\[caption id=\"attachment_368\" align=\"aligncenter\" width=\"773\"\\][![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/usingYeoMan.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/usingYeoMan.png) Create ASP.Core 1.0 applications using Yeoman in Command line\\[/caption\\]\n\n1.  Creating directory which contains all generated code.\n2.  Running **yo aspnet** command to invoke Yeoman generator for ASPNET\n3.  ASPNET generators asks us to select various kinds of project to be created like empty, console, web, classlib etc. I choose \"Empty Application\".\n4.  Naming empty web application as \"DemoApp\"\n5.  Lists all files created using ASPNET generator\n6.  After creation of application, its usually better to do DNU restore but we will hold that for moment.\n\nNow lets create using [Visual Studio yo extension](https://marketplace.visualstudio.com/items?itemName=samverschueren.yo), (install yo extension first). Checkout GIF below for steps, I will be creating full ASP.Core 1.0 web application instead of an empty application. \\[caption id=\"attachment_369\" align=\"aligncenter\" width=\"1266\"\\][![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/AspnetYoVSCode.gif)](http://www.mithunvp.com/wp-content/uploads/2016/02/AspnetYoVSCode.gif) Creating ASP.NET Core 1.0 using VS Code\\[/caption\\]\n\nStep 4: Add Static Files packages and restore\n---------------------------------------------\n\nASP.NET Core 1.0 works on adding packages as needed, add static files package in \"project.json\" and open Startup.cs class \"Configure\" method to add following code\n\npublic void Configure(IApplicationBuilder app)\n        {\n            app.UseIISPlatformHandler();\n\n            app.UseDefaultFiles();\n            app.UseStaticFiles();\n        }\n\nAfter adding \"**StaticFiles**\" middleware in dependencies of _**project.json**_, then click \"**Restore**\" to perform DNU restore. \\[caption id=\"attachment_370\" align=\"aligncenter\" width=\"1265\"\\][![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/restorePackages.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/restorePackages.png) Add StaticFiles middleware and click Restore\\[/caption\\]\n\nStep 5: Creating index.html file and run application using lite-server\n----------------------------------------------------------------------\n\nASP.NET Core 1.0 has **wwwroot** folder which directory for all static files like HTML page, CSS, JS files, etc. Lets create \"_index.html_\" in **wwwroot** of our application like this \\[caption id=\"attachment_371\" align=\"aligncenter\" width=\"724\"\\][![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/createHTML.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/createHTML.png) Creating HTML page using Yo ASPNET\\[/caption\\] Visual Studio Code is just code editor, to run web application we need to use web server. We will install **lite-server**, just follow link to [install lite-server](https://www.npmjs.com/package/lite-server) Now open _wwwroot_ folder in console and run \"lite-server\", it opens up browser and displays \"_index.html_\". _These steps can be replicated in Mac OS or Linux environments as Visual Studio Code and ASP.NET Core 1.0 are cross platform open source projects._","source":"_posts/asp-net-core-visual-studio-code-yeoman.md","raw":"---\ntitle: ASP.NET Core 1.0  - Create web application using Yeoman and Visual Studio Code\ntags:\n  - Asp.NET Core 1.0\n  - Visual Studio Code\nurl: 357.html\nid: 357\ncategories:\n  - ASP.NET Core 1.0\n  - Visual Studio Code\ndate: 2016-02-18 14:47:52\n---\n\n[![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/1start-300x153.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/1start.png)Creating **ASP.NET Core 1.0** web applications is very easy using Visual Studio Code along with Yeoman generators. Here in this tutorial will learn about creating web application and running it. _These steps are not confined to Windows environment alone, we can use them on Mac or Linux_ This example is for creating basic ASP.NET Core 1.0 empty application without need of Visual Studio IDE. What we will learn here?\n\n1.  Ensure NPM, Yeoman, Visual Studio Code is installed\n2.  Install ASPNET yeoman generator.\n3.  Create ASP.NET Core 1.0 empty web application using Yeoman generator\n4.  Add Static Files and Default Files packages and DNU restore\n5.  Creating index.html file and run application using _lite-server_\n\nStep 1 : Ensure NPM, Yeoman, Visual Studio Code is installed\n------------------------------------------------------------\n\nNPM(Node Package Manager) is used to install Yeoman, Angular and other packages. NPM can be installed using [Installing Node.js and updating npm](https://docs.npmjs.com/getting-started/installing-node)\n\n> **yo** is the Yeoman command line utility allowing the creation of projects utilizing scaffolding templates (referred to as generators). Yo and the generators used are installed using npm.\n\nGoing through [GETTING STARTED WITH YEOMAN](http://yeoman.io/learning/) will help us get Yeoman installed and its usage. [Visual Studio Code](https://code.visualstudio.com/) (VS Code) is code editor redefining how simpler life can get, esp I liked idea of working with ASP.NET Core 1.0 apps without full fledged Visual Studio IDE. Quick snapshot of NPM, Yeoman installed. Installing them globally will avoid doing these steps again. \\[caption id=\"attachment_366\" align=\"aligncenter\" width=\"720\"\\][![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/npm-yeoman.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/npm-yeoman.png) Verify NPM and Yeoman are installed\\[/caption\\]\n\nStep 2: Install ASPNET Yeoman generator\n---------------------------------------\n\nNow that Yeoman generator is installed, we need to install ASPNET generator for creating ASP.NET Core 1.0 applications. Recommend reading [ASPNET generator](https://www.npmjs.com/package/generator-aspnet) for more understanding Open command prompt and run following command, ensure that you are connected to Internet.\n\nnpm install -g generator-aspnet\n\n\\[caption id=\"attachment_367\" align=\"aligncenter\" width=\"594\"\\][![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/installASPNetGenerator.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/installASPNetGenerator.png) ASPNET Yeoman Generator installed\\[/caption\\]\n\nStep 3: Create ASP.NET Core 1.0 empty web application using Yeoman generator\n----------------------------------------------------------------------------\n\nThere are two ways to create ASP.NET Core 1.0 applications using Yeoman generators itself - **Command line option** and **Visual Studio Code  yo extension option**. Lets create using command line option and check out steps involved \\[caption id=\"attachment_368\" align=\"aligncenter\" width=\"773\"\\][![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/usingYeoMan.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/usingYeoMan.png) Create ASP.Core 1.0 applications using Yeoman in Command line\\[/caption\\]\n\n1.  Creating directory which contains all generated code.\n2.  Running **yo aspnet** command to invoke Yeoman generator for ASPNET\n3.  ASPNET generators asks us to select various kinds of project to be created like empty, console, web, classlib etc. I choose \"Empty Application\".\n4.  Naming empty web application as \"DemoApp\"\n5.  Lists all files created using ASPNET generator\n6.  After creation of application, its usually better to do DNU restore but we will hold that for moment.\n\nNow lets create using [Visual Studio yo extension](https://marketplace.visualstudio.com/items?itemName=samverschueren.yo), (install yo extension first). Checkout GIF below for steps, I will be creating full ASP.Core 1.0 web application instead of an empty application. \\[caption id=\"attachment_369\" align=\"aligncenter\" width=\"1266\"\\][![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/AspnetYoVSCode.gif)](http://www.mithunvp.com/wp-content/uploads/2016/02/AspnetYoVSCode.gif) Creating ASP.NET Core 1.0 using VS Code\\[/caption\\]\n\nStep 4: Add Static Files packages and restore\n---------------------------------------------\n\nASP.NET Core 1.0 works on adding packages as needed, add static files package in \"project.json\" and open Startup.cs class \"Configure\" method to add following code\n\npublic void Configure(IApplicationBuilder app)\n        {\n            app.UseIISPlatformHandler();\n\n            app.UseDefaultFiles();\n            app.UseStaticFiles();\n        }\n\nAfter adding \"**StaticFiles**\" middleware in dependencies of _**project.json**_, then click \"**Restore**\" to perform DNU restore. \\[caption id=\"attachment_370\" align=\"aligncenter\" width=\"1265\"\\][![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/restorePackages.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/restorePackages.png) Add StaticFiles middleware and click Restore\\[/caption\\]\n\nStep 5: Creating index.html file and run application using lite-server\n----------------------------------------------------------------------\n\nASP.NET Core 1.0 has **wwwroot** folder which directory for all static files like HTML page, CSS, JS files, etc. Lets create \"_index.html_\" in **wwwroot** of our application like this \\[caption id=\"attachment_371\" align=\"aligncenter\" width=\"724\"\\][![ASP.NET Core 1.0](http://www.mithunvp.com/wp-content/uploads/2016/02/createHTML.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/createHTML.png) Creating HTML page using Yo ASPNET\\[/caption\\] Visual Studio Code is just code editor, to run web application we need to use web server. We will install **lite-server**, just follow link to [install lite-server](https://www.npmjs.com/package/lite-server) Now open _wwwroot_ folder in console and run \"lite-server\", it opens up browser and displays \"_index.html_\". _These steps can be replicated in Mac OS or Linux environments as Visual Studio Code and ASP.NET Core 1.0 are cross platform open source projects._","slug":"asp-net-core-visual-studio-code-yeoman","published":1,"updated":"2018-07-10T19:49:06.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034vu000bs4tjkd26dzrq","content":"<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/1start.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/1start-300x153.png\" alt=\"ASP.NET Core 1.0\"></a>Creating <strong>ASP.NET Core 1.0</strong> web applications is very easy using Visual Studio Code along with Yeoman generators. Here in this tutorial will learn about creating web application and running it. <em>These steps are not confined to Windows environment alone, we can use them on Mac or Linux</em> This example is for creating basic ASP.NET Core 1.0 empty application without need of Visual Studio IDE. What we will learn here?</p>\n<ol>\n<li>Ensure NPM, Yeoman, Visual Studio Code is installed</li>\n<li>Install ASPNET yeoman generator.</li>\n<li>Create ASP.NET Core 1.0 empty web application using Yeoman generator</li>\n<li>Add Static Files and Default Files packages and DNU restore</li>\n<li>Creating index.html file and run application using <em>lite-server</em></li>\n</ol>\n<h2 id=\"Step-1-Ensure-NPM-Yeoman-Visual-Studio-Code-is-installed\"><a href=\"#Step-1-Ensure-NPM-Yeoman-Visual-Studio-Code-is-installed\" class=\"headerlink\" title=\"Step 1 : Ensure NPM, Yeoman, Visual Studio Code is installed\"></a>Step 1 : Ensure NPM, Yeoman, Visual Studio Code is installed</h2><p>NPM(Node Package Manager) is used to install Yeoman, Angular and other packages. NPM can be installed using <a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" rel=\"noopener\">Installing Node.js and updating npm</a></p>\n<blockquote>\n<p><strong>yo</strong> is the Yeoman command line utility allowing the creation of projects utilizing scaffolding templates (referred to as generators). Yo and the generators used are installed using npm.</p>\n</blockquote>\n<p>Going through <a href=\"http://yeoman.io/learning/\" target=\"_blank\" rel=\"noopener\">GETTING STARTED WITH YEOMAN</a> will help us get Yeoman installed and its usage. <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a> (VS Code) is code editor redefining how simpler life can get, esp I liked idea of working with ASP.NET Core 1.0 apps without full fledged Visual Studio IDE. Quick snapshot of NPM, Yeoman installed. Installing them globally will avoid doing these steps again. [caption id=”attachment_366” align=”aligncenter” width=”720”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/npm-yeoman.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/npm-yeoman.png\" alt=\"ASP.NET Core 1.0\"></a> Verify NPM and Yeoman are installed[/caption]</p>\n<h2 id=\"Step-2-Install-ASPNET-Yeoman-generator\"><a href=\"#Step-2-Install-ASPNET-Yeoman-generator\" class=\"headerlink\" title=\"Step 2: Install ASPNET Yeoman generator\"></a>Step 2: Install ASPNET Yeoman generator</h2><p>Now that Yeoman generator is installed, we need to install ASPNET generator for creating ASP.NET Core 1.0 applications. Recommend reading <a href=\"https://www.npmjs.com/package/generator-aspnet\" target=\"_blank\" rel=\"noopener\">ASPNET generator</a> for more understanding Open command prompt and run following command, ensure that you are connected to Internet.</p>\n<p>npm install -g generator-aspnet</p>\n<p>[caption id=”attachment_367” align=”aligncenter” width=”594”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/installASPNetGenerator.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/installASPNetGenerator.png\" alt=\"ASP.NET Core 1.0\"></a> ASPNET Yeoman Generator installed[/caption]</p>\n<h2 id=\"Step-3-Create-ASP-NET-Core-1-0-empty-web-application-using-Yeoman-generator\"><a href=\"#Step-3-Create-ASP-NET-Core-1-0-empty-web-application-using-Yeoman-generator\" class=\"headerlink\" title=\"Step 3: Create ASP.NET Core 1.0 empty web application using Yeoman generator\"></a>Step 3: Create ASP.NET Core 1.0 empty web application using Yeoman generator</h2><p>There are two ways to create ASP.NET Core 1.0 applications using Yeoman generators itself - <strong>Command line option</strong> and <strong>Visual Studio Code  yo extension option</strong>. Lets create using command line option and check out steps involved [caption id=”attachment_368” align=”aligncenter” width=”773”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/usingYeoMan.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/usingYeoMan.png\" alt=\"ASP.NET Core 1.0\"></a> Create ASP.Core 1.0 applications using Yeoman in Command line[/caption]</p>\n<ol>\n<li>Creating directory which contains all generated code.</li>\n<li>Running <strong>yo aspnet</strong> command to invoke Yeoman generator for ASPNET</li>\n<li>ASPNET generators asks us to select various kinds of project to be created like empty, console, web, classlib etc. I choose “Empty Application”.</li>\n<li>Naming empty web application as “DemoApp”</li>\n<li>Lists all files created using ASPNET generator</li>\n<li>After creation of application, its usually better to do DNU restore but we will hold that for moment.</li>\n</ol>\n<p>Now lets create using <a href=\"https://marketplace.visualstudio.com/items?itemName=samverschueren.yo\" target=\"_blank\" rel=\"noopener\">Visual Studio yo extension</a>, (install yo extension first). Checkout GIF below for steps, I will be creating full ASP.Core 1.0 web application instead of an empty application. [caption id=”attachment_369” align=”aligncenter” width=”1266”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/AspnetYoVSCode.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/AspnetYoVSCode.gif\" alt=\"ASP.NET Core 1.0\"></a> Creating ASP.NET Core 1.0 using VS Code[/caption]</p>\n<h2 id=\"Step-4-Add-Static-Files-packages-and-restore\"><a href=\"#Step-4-Add-Static-Files-packages-and-restore\" class=\"headerlink\" title=\"Step 4: Add Static Files packages and restore\"></a>Step 4: Add Static Files packages and restore</h2><p>ASP.NET Core 1.0 works on adding packages as needed, add static files package in “project.json” and open Startup.cs class “Configure” method to add following code</p>\n<p>public void Configure(IApplicationBuilder app)<br>        {<br>            app.UseIISPlatformHandler();</p>\n<pre><code>    app.UseDefaultFiles();\n    app.UseStaticFiles();\n}\n</code></pre><p>After adding “<strong>StaticFiles</strong>“ middleware in dependencies of <em><strong>project.json</strong></em>, then click “<strong>Restore</strong>“ to perform DNU restore. [caption id=”attachment_370” align=”aligncenter” width=”1265”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/restorePackages.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/restorePackages.png\" alt=\"ASP.NET Core 1.0\"></a> Add StaticFiles middleware and click Restore[/caption]</p>\n<h2 id=\"Step-5-Creating-index-html-file-and-run-application-using-lite-server\"><a href=\"#Step-5-Creating-index-html-file-and-run-application-using-lite-server\" class=\"headerlink\" title=\"Step 5: Creating index.html file and run application using lite-server\"></a>Step 5: Creating index.html file and run application using lite-server</h2><p>ASP.NET Core 1.0 has <strong>wwwroot</strong> folder which directory for all static files like HTML page, CSS, JS files, etc. Lets create “<em>index.html</em>“ in <strong>wwwroot</strong> of our application like this [caption id=”attachment_371” align=”aligncenter” width=”724”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/createHTML.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/createHTML.png\" alt=\"ASP.NET Core 1.0\"></a> Creating HTML page using Yo ASPNET[/caption] Visual Studio Code is just code editor, to run web application we need to use web server. We will install <strong>lite-server</strong>, just follow link to <a href=\"https://www.npmjs.com/package/lite-server\" target=\"_blank\" rel=\"noopener\">install lite-server</a> Now open <em>wwwroot</em> folder in console and run “lite-server”, it opens up browser and displays “<em>index.html</em>“. <em>These steps can be replicated in Mac OS or Linux environments as Visual Studio Code and ASP.NET Core 1.0 are cross platform open source projects.</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/1start.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/1start-300x153.png\" alt=\"ASP.NET Core 1.0\"></a>Creating <strong>ASP.NET Core 1.0</strong> web applications is very easy using Visual Studio Code along with Yeoman generators. Here in this tutorial will learn about creating web application and running it. <em>These steps are not confined to Windows environment alone, we can use them on Mac or Linux</em> This example is for creating basic ASP.NET Core 1.0 empty application without need of Visual Studio IDE. What we will learn here?</p>\n<ol>\n<li>Ensure NPM, Yeoman, Visual Studio Code is installed</li>\n<li>Install ASPNET yeoman generator.</li>\n<li>Create ASP.NET Core 1.0 empty web application using Yeoman generator</li>\n<li>Add Static Files and Default Files packages and DNU restore</li>\n<li>Creating index.html file and run application using <em>lite-server</em></li>\n</ol>\n<h2 id=\"Step-1-Ensure-NPM-Yeoman-Visual-Studio-Code-is-installed\"><a href=\"#Step-1-Ensure-NPM-Yeoman-Visual-Studio-Code-is-installed\" class=\"headerlink\" title=\"Step 1 : Ensure NPM, Yeoman, Visual Studio Code is installed\"></a>Step 1 : Ensure NPM, Yeoman, Visual Studio Code is installed</h2><p>NPM(Node Package Manager) is used to install Yeoman, Angular and other packages. NPM can be installed using <a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" rel=\"noopener\">Installing Node.js and updating npm</a></p>\n<blockquote>\n<p><strong>yo</strong> is the Yeoman command line utility allowing the creation of projects utilizing scaffolding templates (referred to as generators). Yo and the generators used are installed using npm.</p>\n</blockquote>\n<p>Going through <a href=\"http://yeoman.io/learning/\" target=\"_blank\" rel=\"noopener\">GETTING STARTED WITH YEOMAN</a> will help us get Yeoman installed and its usage. <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a> (VS Code) is code editor redefining how simpler life can get, esp I liked idea of working with ASP.NET Core 1.0 apps without full fledged Visual Studio IDE. Quick snapshot of NPM, Yeoman installed. Installing them globally will avoid doing these steps again. [caption id=”attachment_366” align=”aligncenter” width=”720”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/npm-yeoman.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/npm-yeoman.png\" alt=\"ASP.NET Core 1.0\"></a> Verify NPM and Yeoman are installed[/caption]</p>\n<h2 id=\"Step-2-Install-ASPNET-Yeoman-generator\"><a href=\"#Step-2-Install-ASPNET-Yeoman-generator\" class=\"headerlink\" title=\"Step 2: Install ASPNET Yeoman generator\"></a>Step 2: Install ASPNET Yeoman generator</h2><p>Now that Yeoman generator is installed, we need to install ASPNET generator for creating ASP.NET Core 1.0 applications. Recommend reading <a href=\"https://www.npmjs.com/package/generator-aspnet\" target=\"_blank\" rel=\"noopener\">ASPNET generator</a> for more understanding Open command prompt and run following command, ensure that you are connected to Internet.</p>\n<p>npm install -g generator-aspnet</p>\n<p>[caption id=”attachment_367” align=”aligncenter” width=”594”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/installASPNetGenerator.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/installASPNetGenerator.png\" alt=\"ASP.NET Core 1.0\"></a> ASPNET Yeoman Generator installed[/caption]</p>\n<h2 id=\"Step-3-Create-ASP-NET-Core-1-0-empty-web-application-using-Yeoman-generator\"><a href=\"#Step-3-Create-ASP-NET-Core-1-0-empty-web-application-using-Yeoman-generator\" class=\"headerlink\" title=\"Step 3: Create ASP.NET Core 1.0 empty web application using Yeoman generator\"></a>Step 3: Create ASP.NET Core 1.0 empty web application using Yeoman generator</h2><p>There are two ways to create ASP.NET Core 1.0 applications using Yeoman generators itself - <strong>Command line option</strong> and <strong>Visual Studio Code  yo extension option</strong>. Lets create using command line option and check out steps involved [caption id=”attachment_368” align=”aligncenter” width=”773”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/usingYeoMan.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/usingYeoMan.png\" alt=\"ASP.NET Core 1.0\"></a> Create ASP.Core 1.0 applications using Yeoman in Command line[/caption]</p>\n<ol>\n<li>Creating directory which contains all generated code.</li>\n<li>Running <strong>yo aspnet</strong> command to invoke Yeoman generator for ASPNET</li>\n<li>ASPNET generators asks us to select various kinds of project to be created like empty, console, web, classlib etc. I choose “Empty Application”.</li>\n<li>Naming empty web application as “DemoApp”</li>\n<li>Lists all files created using ASPNET generator</li>\n<li>After creation of application, its usually better to do DNU restore but we will hold that for moment.</li>\n</ol>\n<p>Now lets create using <a href=\"https://marketplace.visualstudio.com/items?itemName=samverschueren.yo\" target=\"_blank\" rel=\"noopener\">Visual Studio yo extension</a>, (install yo extension first). Checkout GIF below for steps, I will be creating full ASP.Core 1.0 web application instead of an empty application. [caption id=”attachment_369” align=”aligncenter” width=”1266”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/AspnetYoVSCode.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/AspnetYoVSCode.gif\" alt=\"ASP.NET Core 1.0\"></a> Creating ASP.NET Core 1.0 using VS Code[/caption]</p>\n<h2 id=\"Step-4-Add-Static-Files-packages-and-restore\"><a href=\"#Step-4-Add-Static-Files-packages-and-restore\" class=\"headerlink\" title=\"Step 4: Add Static Files packages and restore\"></a>Step 4: Add Static Files packages and restore</h2><p>ASP.NET Core 1.0 works on adding packages as needed, add static files package in “project.json” and open Startup.cs class “Configure” method to add following code</p>\n<p>public void Configure(IApplicationBuilder app)<br>        {<br>            app.UseIISPlatformHandler();</p>\n<pre><code>    app.UseDefaultFiles();\n    app.UseStaticFiles();\n}\n</code></pre><p>After adding “<strong>StaticFiles</strong>“ middleware in dependencies of <em><strong>project.json</strong></em>, then click “<strong>Restore</strong>“ to perform DNU restore. [caption id=”attachment_370” align=”aligncenter” width=”1265”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/restorePackages.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/restorePackages.png\" alt=\"ASP.NET Core 1.0\"></a> Add StaticFiles middleware and click Restore[/caption]</p>\n<h2 id=\"Step-5-Creating-index-html-file-and-run-application-using-lite-server\"><a href=\"#Step-5-Creating-index-html-file-and-run-application-using-lite-server\" class=\"headerlink\" title=\"Step 5: Creating index.html file and run application using lite-server\"></a>Step 5: Creating index.html file and run application using lite-server</h2><p>ASP.NET Core 1.0 has <strong>wwwroot</strong> folder which directory for all static files like HTML page, CSS, JS files, etc. Lets create “<em>index.html</em>“ in <strong>wwwroot</strong> of our application like this [caption id=”attachment_371” align=”aligncenter” width=”724”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/createHTML.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/createHTML.png\" alt=\"ASP.NET Core 1.0\"></a> Creating HTML page using Yo ASPNET[/caption] Visual Studio Code is just code editor, to run web application we need to use web server. We will install <strong>lite-server</strong>, just follow link to <a href=\"https://www.npmjs.com/package/lite-server\" target=\"_blank\" rel=\"noopener\">install lite-server</a> Now open <em>wwwroot</em> folder in console and run “lite-server”, it opens up browser and displays “<em>index.html</em>“. <em>These steps can be replicated in Mac OS or Linux environments as Visual Studio Code and ASP.NET Core 1.0 are cross platform open source projects.</em></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"ASP.NET Core 1.0  - Create web application using Yeoman and Visual Studio Code","path":"asp-net-core-visual-studio-code-yeoman/","eyeCatchImage":null,"excerpt":null,"date":"2016-02-18T09:17:52.000Z","pv":0,"totalPV":0,"categories":"ASP.NET Core 1.0 > Visual Studio Code","tags":["Asp.NET Core 1.0","Visual Studio Code"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Angular Material 2 - Using in Angular 2 apps with Angular CLI","url":"547.html","id":"547","date":"2016-09-30T13:30:31.000Z","_content":"\n**Angular Material 2** comprehensive, modern UI components that work across web, mobile and desktop. They are built on Material Design concepts. They are built with Angular 2 team. One important point to notice even though its built by Angular 2 team, it's not part of packages required for building Angular 2 i.e. its treated as 3rd party package to be integrated. Recommend to go through [Github repo](https://github.com/angular/material2/blob/master/GETTING_STARTED.md) For styling  Angular 2 apps, we can use Bootstrap, Semantic UI, its not mandatory to use material design.  Angular Material 2 components have more features apart from styling. We will be adding these Material 2 components into Angular 2 application created using Angular CLI, we will continue from [Build Angular 2 apps using CLI](http://www.mithunvp.com/build-angular-apps-using-angular-2-cli/)\n\n> Remember Angular CLI is not the only way to create Angular 2 apps & add Material 2 components\n\nUpdate package.json to Angular Material 2 package\n-------------------------------------------------\n\nFrom the project root directory (same directory as package.json), run the following command to install Material 2 packages as well update **package.json**\n\n// Run from command line\nnpm install --save @angular/material\n\nAdding hammer.js to package.json\n--------------------------------\n\nThe **slide-toggle** and **slider components** have a dependency on **HammerJS**. You need to run this to ensure everything builds properly.\n\n> HammerJS support touch gestures to web pages\n\n// Run from command line\nnpm install --save hammerjs\n\nUsing Material Icons and per-built theme\n----------------------------------------\n\nIf you are interested in adding Material icons using **md-icon** in html pages, we need to include link them. Angular CLI uses Webpack to build, compose run application, it becomes much easier to add it. Angular Material comes with per-built theme when installing packages, this can be added too. _Both md-icon and pre-built theme are optional_ Open **src/styles.css**, then add the following code in this file\n\n/\\* You can add global styles to this file, and also import other style files */\n@import '~https://fonts.googleapis.com/icon?family=Material+Icons';\n@import '~@angular/material/core/theming/prebuilt/deeppurple-amber.css';\n\nbody {\n  margin: 10;\n  font-family: Roboto, sans-serif;\n}\n\nInclude Material Module\n-----------------------\n\nAngular 2 uses **@NgModule** for declaring components, importing modules, services as providers etc. We need to import material module to be used across the application. Refactoring to Material Module is good approach compared previous approach. Add highlighted code into **src/app/app.module.ts**. This will import material components using webpack\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { PlanetsService } from './shared';\nimport { MaterialModule } from '@angular/material';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: \\[\n    AppComponent\n  \\],\n  imports: \\[\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    MaterialModule.forRoot()\n  \\],\n  providers: \\[PlanetsService\\],\n  bootstrap: \\[AppComponent\\]\n})\nexport class AppModule { }\n\nMaterial components in HTML\n---------------------------\n\nOpen **src/app/app.component.html**, add following code - we are using **md-toolbar, md-grid-list, md-grid-tile** to show planets as tiles.\n\n<md-toolbar>\n  Our Planets - Using Angular 2 Material  \n</md-toolbar>\n\n<md-grid-list cols=\"4\" rowHeight=\"100px\" >\n      <md-grid-tile *ngFor=\"let planet of planetsList\" >\n          <h3 md-line>{ {planet.name}}</h3>\n          <button md-icon-button (click)=\"showPlanetInfo(planet)\">\n            <md-icon>info</md-icon>\n          </button>         \n        \n      </md-grid-tile>\n</md-grid-list>\n\n<br>\n<p>You selected <b>{ {selectedPlanet.name}}</b> planet</p>\n <i>{ {selectedPlanet.description}}</i>\n\nThen open **src/app/app.component.ts**, it just loads planetslist, assign new planet member, showPlanetInfo method just assign selected planet to be shown on UI. Clicking on the **info icon**, it will show planet details in bottom\n\nimport { Component, OnInit } from '@angular/core';\nimport { Planets, PlanetsService } from './shared';\n\n@Component({\n  selector: 'Planets-root',\n  templateUrl: './app.component.html',\n  styleUrls: \\['./app.component.css'\\]\n})\nexport class AppComponent implements OnInit {\n  planetsList: Planets\\[\\] = \\[\\];\n  selectedPlanet: Planets;\n  constructor(\n    private _planetservice: PlanetsService) {}\n\n  ngOnInit() {\n    this._planetservice.getPlanets().then(planets => this.planetsList = planets);\n    this.selectedPlanet = new Planets();\n  }\n\n  showPlanetInfo(selplanet)\n  {\n    this.selectedPlanet = selplanet;\n  }\n}\n\nNow that we have adding Material 2 package, imported them, included them in HTML, lets do **ng serve** to see them on web page as seen below \\[caption id=\"attachment_549\" align=\"aligncenter\" width=\"1024\"\\][![angular material 2](http://www.mithunvp.com/wp-content/uploads/2016/09/ng-md-1024x354.png)](http://www.mithunvp.com/wp-content/uploads/2016/09/ng-md.png) Our planets showing Material components\\[/caption\\] It's very easy now to include Angular Material 2 components in Angular 2 application.","source":"_posts/angular-material-2-angular-cli-webpack.md","raw":"---\ntitle: Angular Material 2 - Using in Angular 2 apps with Angular CLI\ntags:\n  - Angular2\nurl: 547.html\nid: 547\ncategories:\n  - Angular 2\ndate: 2016-09-30 19:00:31\n---\n\n**Angular Material 2** comprehensive, modern UI components that work across web, mobile and desktop. They are built on Material Design concepts. They are built with Angular 2 team. One important point to notice even though its built by Angular 2 team, it's not part of packages required for building Angular 2 i.e. its treated as 3rd party package to be integrated. Recommend to go through [Github repo](https://github.com/angular/material2/blob/master/GETTING_STARTED.md) For styling  Angular 2 apps, we can use Bootstrap, Semantic UI, its not mandatory to use material design.  Angular Material 2 components have more features apart from styling. We will be adding these Material 2 components into Angular 2 application created using Angular CLI, we will continue from [Build Angular 2 apps using CLI](http://www.mithunvp.com/build-angular-apps-using-angular-2-cli/)\n\n> Remember Angular CLI is not the only way to create Angular 2 apps & add Material 2 components\n\nUpdate package.json to Angular Material 2 package\n-------------------------------------------------\n\nFrom the project root directory (same directory as package.json), run the following command to install Material 2 packages as well update **package.json**\n\n// Run from command line\nnpm install --save @angular/material\n\nAdding hammer.js to package.json\n--------------------------------\n\nThe **slide-toggle** and **slider components** have a dependency on **HammerJS**. You need to run this to ensure everything builds properly.\n\n> HammerJS support touch gestures to web pages\n\n// Run from command line\nnpm install --save hammerjs\n\nUsing Material Icons and per-built theme\n----------------------------------------\n\nIf you are interested in adding Material icons using **md-icon** in html pages, we need to include link them. Angular CLI uses Webpack to build, compose run application, it becomes much easier to add it. Angular Material comes with per-built theme when installing packages, this can be added too. _Both md-icon and pre-built theme are optional_ Open **src/styles.css**, then add the following code in this file\n\n/\\* You can add global styles to this file, and also import other style files */\n@import '~https://fonts.googleapis.com/icon?family=Material+Icons';\n@import '~@angular/material/core/theming/prebuilt/deeppurple-amber.css';\n\nbody {\n  margin: 10;\n  font-family: Roboto, sans-serif;\n}\n\nInclude Material Module\n-----------------------\n\nAngular 2 uses **@NgModule** for declaring components, importing modules, services as providers etc. We need to import material module to be used across the application. Refactoring to Material Module is good approach compared previous approach. Add highlighted code into **src/app/app.module.ts**. This will import material components using webpack\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { PlanetsService } from './shared';\nimport { MaterialModule } from '@angular/material';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: \\[\n    AppComponent\n  \\],\n  imports: \\[\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    MaterialModule.forRoot()\n  \\],\n  providers: \\[PlanetsService\\],\n  bootstrap: \\[AppComponent\\]\n})\nexport class AppModule { }\n\nMaterial components in HTML\n---------------------------\n\nOpen **src/app/app.component.html**, add following code - we are using **md-toolbar, md-grid-list, md-grid-tile** to show planets as tiles.\n\n<md-toolbar>\n  Our Planets - Using Angular 2 Material  \n</md-toolbar>\n\n<md-grid-list cols=\"4\" rowHeight=\"100px\" >\n      <md-grid-tile *ngFor=\"let planet of planetsList\" >\n          <h3 md-line>{ {planet.name}}</h3>\n          <button md-icon-button (click)=\"showPlanetInfo(planet)\">\n            <md-icon>info</md-icon>\n          </button>         \n        \n      </md-grid-tile>\n</md-grid-list>\n\n<br>\n<p>You selected <b>{ {selectedPlanet.name}}</b> planet</p>\n <i>{ {selectedPlanet.description}}</i>\n\nThen open **src/app/app.component.ts**, it just loads planetslist, assign new planet member, showPlanetInfo method just assign selected planet to be shown on UI. Clicking on the **info icon**, it will show planet details in bottom\n\nimport { Component, OnInit } from '@angular/core';\nimport { Planets, PlanetsService } from './shared';\n\n@Component({\n  selector: 'Planets-root',\n  templateUrl: './app.component.html',\n  styleUrls: \\['./app.component.css'\\]\n})\nexport class AppComponent implements OnInit {\n  planetsList: Planets\\[\\] = \\[\\];\n  selectedPlanet: Planets;\n  constructor(\n    private _planetservice: PlanetsService) {}\n\n  ngOnInit() {\n    this._planetservice.getPlanets().then(planets => this.planetsList = planets);\n    this.selectedPlanet = new Planets();\n  }\n\n  showPlanetInfo(selplanet)\n  {\n    this.selectedPlanet = selplanet;\n  }\n}\n\nNow that we have adding Material 2 package, imported them, included them in HTML, lets do **ng serve** to see them on web page as seen below \\[caption id=\"attachment_549\" align=\"aligncenter\" width=\"1024\"\\][![angular material 2](http://www.mithunvp.com/wp-content/uploads/2016/09/ng-md-1024x354.png)](http://www.mithunvp.com/wp-content/uploads/2016/09/ng-md.png) Our planets showing Material components\\[/caption\\] It's very easy now to include Angular Material 2 components in Angular 2 application.","slug":"angular-material-2-angular-cli-webpack","published":1,"updated":"2018-07-10T19:49:06.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034vu000cs4tjbp0fdnux","content":"<p><strong>Angular Material 2</strong> comprehensive, modern UI components that work across web, mobile and desktop. They are built on Material Design concepts. They are built with Angular 2 team. One important point to notice even though its built by Angular 2 team, it’s not part of packages required for building Angular 2 i.e. its treated as 3rd party package to be integrated. Recommend to go through <a href=\"https://github.com/angular/material2/blob/master/GETTING_STARTED.md\" target=\"_blank\" rel=\"noopener\">Github repo</a> For styling  Angular 2 apps, we can use Bootstrap, Semantic UI, its not mandatory to use material design.  Angular Material 2 components have more features apart from styling. We will be adding these Material 2 components into Angular 2 application created using Angular CLI, we will continue from <a href=\"http://www.mithunvp.com/build-angular-apps-using-angular-2-cli/\">Build Angular 2 apps using CLI</a></p>\n<blockquote>\n<p>Remember Angular CLI is not the only way to create Angular 2 apps &amp; add Material 2 components</p>\n</blockquote>\n<h2 id=\"Update-package-json-to-Angular-Material-2-package\"><a href=\"#Update-package-json-to-Angular-Material-2-package\" class=\"headerlink\" title=\"Update package.json to Angular Material 2 package\"></a>Update package.json to Angular Material 2 package</h2><p>From the project root directory (same directory as package.json), run the following command to install Material 2 packages as well update <strong>package.json</strong></p>\n<p>// Run from command line<br>npm install –save @angular/material</p>\n<h2 id=\"Adding-hammer-js-to-package-json\"><a href=\"#Adding-hammer-js-to-package-json\" class=\"headerlink\" title=\"Adding hammer.js to package.json\"></a>Adding hammer.js to package.json</h2><p>The <strong>slide-toggle</strong> and <strong>slider components</strong> have a dependency on <strong>HammerJS</strong>. You need to run this to ensure everything builds properly.</p>\n<blockquote>\n<p>HammerJS support touch gestures to web pages</p>\n</blockquote>\n<p>// Run from command line<br>npm install –save hammerjs</p>\n<h2 id=\"Using-Material-Icons-and-per-built-theme\"><a href=\"#Using-Material-Icons-and-per-built-theme\" class=\"headerlink\" title=\"Using Material Icons and per-built theme\"></a>Using Material Icons and per-built theme</h2><p>If you are interested in adding Material icons using <strong>md-icon</strong> in html pages, we need to include link them. Angular CLI uses Webpack to build, compose run application, it becomes much easier to add it. Angular Material comes with per-built theme when installing packages, this can be added too. <em>Both md-icon and pre-built theme are optional</em> Open <strong>src/styles.css</strong>, then add the following code in this file</p>\n<p>/* You can add global styles to this file, and also import other style files */<br>@import ‘~<a href=\"https://fonts.googleapis.com/icon?family=Material+Icons&#39;\" target=\"_blank\" rel=\"noopener\">https://fonts.googleapis.com/icon?family=Material+Icons&#39;</a>;<br>@import ‘~@angular/material/core/theming/prebuilt/deeppurple-amber.css’;</p>\n<p>body {<br>  margin: 10;<br>  font-family: Roboto, sans-serif;<br>}</p>\n<h2 id=\"Include-Material-Module\"><a href=\"#Include-Material-Module\" class=\"headerlink\" title=\"Include Material Module\"></a>Include Material Module</h2><p>Angular 2 uses <strong>@NgModule</strong> for declaring components, importing modules, services as providers etc. We need to import material module to be used across the application. Refactoring to Material Module is good approach compared previous approach. Add highlighted code into <strong>src/app/app.module.ts</strong>. This will import material components using webpack</p>\n<p>import { BrowserModule } from ‘@angular/platform-browser’;<br>import { NgModule } from ‘@angular/core’;<br>import { FormsModule } from ‘@angular/forms’;<br>import { HttpModule } from ‘@angular/http’;<br>import { PlanetsService } from ‘./shared’;<br>import { MaterialModule } from ‘@angular/material’;</p>\n<p>import { AppComponent } from ‘./app.component’;</p>\n<p>@NgModule({<br>  declarations: [<br>    AppComponent<br>  ],<br>  imports: [<br>    BrowserModule,<br>    FormsModule,<br>    HttpModule,<br>    MaterialModule.forRoot()<br>  ],<br>  providers: [PlanetsService],<br>  bootstrap: [AppComponent]<br>})<br>export class AppModule { }</p>\n<h2 id=\"Material-components-in-HTML\"><a href=\"#Material-components-in-HTML\" class=\"headerlink\" title=\"Material components in HTML\"></a>Material components in HTML</h2><p>Open <strong>src/app/app.component.html</strong>, add following code - we are using <strong>md-toolbar, md-grid-list, md-grid-tile</strong> to show planets as tiles.</p>\n<p><md-toolbar><br>  Our Planets - Using Angular 2 Material<br></md-toolbar></p>\n<p><md-grid-list cols=\"4\" rowheight=\"100px\"><br>      <md-grid-tile *ngfor=\"let planet of planetsList\"><br>          <h3 md-line=\"\">{ {planet.name}}</h3><br>          <button md-icon-button=\"\" (click)=\"showPlanetInfo(planet)\"><br>            <md-icon>info</md-icon><br>          </button>         </md-grid-tile></md-grid-list></p>\n<pre><code>&lt;/md-grid-tile&gt;\n</code></pre><p></p>\n<p><br></p>\n<p></p><p>You selected <b>{ {selectedPlanet.name}}</b> planet</p><br> <i>{ {selectedPlanet.description}}</i><p></p>\n<p>Then open <strong>src/app/app.component.ts</strong>, it just loads planetslist, assign new planet member, showPlanetInfo method just assign selected planet to be shown on UI. Clicking on the <strong>info icon</strong>, it will show planet details in bottom</p>\n<p>import { Component, OnInit } from ‘@angular/core’;<br>import { Planets, PlanetsService } from ‘./shared’;</p>\n<p>@Component({<br>  selector: ‘Planets-root’,<br>  templateUrl: ‘./app.component.html’,<br>  styleUrls: [‘./app.component.css’]<br>})<br>export class AppComponent implements OnInit {<br>  planetsList: Planets[] = [];<br>  selectedPlanet: Planets;<br>  constructor(<br>    private _planetservice: PlanetsService) {}</p>\n<p>  ngOnInit() {<br>    this._planetservice.getPlanets().then(planets =&gt; this.planetsList = planets);<br>    this.selectedPlanet = new Planets();<br>  }</p>\n<p>  showPlanetInfo(selplanet)<br>  {<br>    this.selectedPlanet = selplanet;<br>  }<br>}</p>\n<p>Now that we have adding Material 2 package, imported them, included them in HTML, lets do <strong>ng serve</strong> to see them on web page as seen below [caption id=”attachment_549” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/09/ng-md.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/09/ng-md-1024x354.png\" alt=\"angular material 2\"></a> Our planets showing Material components[/caption] It’s very easy now to include Angular Material 2 components in Angular 2 application.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Angular Material 2</strong> comprehensive, modern UI components that work across web, mobile and desktop. They are built on Material Design concepts. They are built with Angular 2 team. One important point to notice even though its built by Angular 2 team, it’s not part of packages required for building Angular 2 i.e. its treated as 3rd party package to be integrated. Recommend to go through <a href=\"https://github.com/angular/material2/blob/master/GETTING_STARTED.md\" target=\"_blank\" rel=\"noopener\">Github repo</a> For styling  Angular 2 apps, we can use Bootstrap, Semantic UI, its not mandatory to use material design.  Angular Material 2 components have more features apart from styling. We will be adding these Material 2 components into Angular 2 application created using Angular CLI, we will continue from <a href=\"http://www.mithunvp.com/build-angular-apps-using-angular-2-cli/\">Build Angular 2 apps using CLI</a></p>\n<blockquote>\n<p>Remember Angular CLI is not the only way to create Angular 2 apps &amp; add Material 2 components</p>\n</blockquote>\n<h2 id=\"Update-package-json-to-Angular-Material-2-package\"><a href=\"#Update-package-json-to-Angular-Material-2-package\" class=\"headerlink\" title=\"Update package.json to Angular Material 2 package\"></a>Update package.json to Angular Material 2 package</h2><p>From the project root directory (same directory as package.json), run the following command to install Material 2 packages as well update <strong>package.json</strong></p>\n<p>// Run from command line<br>npm install –save @angular/material</p>\n<h2 id=\"Adding-hammer-js-to-package-json\"><a href=\"#Adding-hammer-js-to-package-json\" class=\"headerlink\" title=\"Adding hammer.js to package.json\"></a>Adding hammer.js to package.json</h2><p>The <strong>slide-toggle</strong> and <strong>slider components</strong> have a dependency on <strong>HammerJS</strong>. You need to run this to ensure everything builds properly.</p>\n<blockquote>\n<p>HammerJS support touch gestures to web pages</p>\n</blockquote>\n<p>// Run from command line<br>npm install –save hammerjs</p>\n<h2 id=\"Using-Material-Icons-and-per-built-theme\"><a href=\"#Using-Material-Icons-and-per-built-theme\" class=\"headerlink\" title=\"Using Material Icons and per-built theme\"></a>Using Material Icons and per-built theme</h2><p>If you are interested in adding Material icons using <strong>md-icon</strong> in html pages, we need to include link them. Angular CLI uses Webpack to build, compose run application, it becomes much easier to add it. Angular Material comes with per-built theme when installing packages, this can be added too. <em>Both md-icon and pre-built theme are optional</em> Open <strong>src/styles.css</strong>, then add the following code in this file</p>\n<p>/* You can add global styles to this file, and also import other style files */<br>@import ‘~<a href=\"https://fonts.googleapis.com/icon?family=Material+Icons&#39;\" target=\"_blank\" rel=\"noopener\">https://fonts.googleapis.com/icon?family=Material+Icons&#39;</a>;<br>@import ‘~@angular/material/core/theming/prebuilt/deeppurple-amber.css’;</p>\n<p>body {<br>  margin: 10;<br>  font-family: Roboto, sans-serif;<br>}</p>\n<h2 id=\"Include-Material-Module\"><a href=\"#Include-Material-Module\" class=\"headerlink\" title=\"Include Material Module\"></a>Include Material Module</h2><p>Angular 2 uses <strong>@NgModule</strong> for declaring components, importing modules, services as providers etc. We need to import material module to be used across the application. Refactoring to Material Module is good approach compared previous approach. Add highlighted code into <strong>src/app/app.module.ts</strong>. This will import material components using webpack</p>\n<p>import { BrowserModule } from ‘@angular/platform-browser’;<br>import { NgModule } from ‘@angular/core’;<br>import { FormsModule } from ‘@angular/forms’;<br>import { HttpModule } from ‘@angular/http’;<br>import { PlanetsService } from ‘./shared’;<br>import { MaterialModule } from ‘@angular/material’;</p>\n<p>import { AppComponent } from ‘./app.component’;</p>\n<p>@NgModule({<br>  declarations: [<br>    AppComponent<br>  ],<br>  imports: [<br>    BrowserModule,<br>    FormsModule,<br>    HttpModule,<br>    MaterialModule.forRoot()<br>  ],<br>  providers: [PlanetsService],<br>  bootstrap: [AppComponent]<br>})<br>export class AppModule { }</p>\n<h2 id=\"Material-components-in-HTML\"><a href=\"#Material-components-in-HTML\" class=\"headerlink\" title=\"Material components in HTML\"></a>Material components in HTML</h2><p>Open <strong>src/app/app.component.html</strong>, add following code - we are using <strong>md-toolbar, md-grid-list, md-grid-tile</strong> to show planets as tiles.</p>\n<p><md-toolbar><br>  Our Planets - Using Angular 2 Material<br></md-toolbar></p>\n<p><md-grid-list cols=\"4\" rowheight=\"100px\"><br>      <md-grid-tile *ngfor=\"let planet of planetsList\"><br>          <h3 md-line=\"\">{ {planet.name}}</h3><br>          <button md-icon-button=\"\" (click)=\"showPlanetInfo(planet)\"><br>            <md-icon>info</md-icon><br>          </button>         </md-grid-tile></md-grid-list></p>\n<pre><code>&lt;/md-grid-tile&gt;\n</code></pre><p></p>\n<p><br></p>\n<p></p><p>You selected <b>{ {selectedPlanet.name}}</b> planet</p><br> <i>{ {selectedPlanet.description}}</i><p></p>\n<p>Then open <strong>src/app/app.component.ts</strong>, it just loads planetslist, assign new planet member, showPlanetInfo method just assign selected planet to be shown on UI. Clicking on the <strong>info icon</strong>, it will show planet details in bottom</p>\n<p>import { Component, OnInit } from ‘@angular/core’;<br>import { Planets, PlanetsService } from ‘./shared’;</p>\n<p>@Component({<br>  selector: ‘Planets-root’,<br>  templateUrl: ‘./app.component.html’,<br>  styleUrls: [‘./app.component.css’]<br>})<br>export class AppComponent implements OnInit {<br>  planetsList: Planets[] = [];<br>  selectedPlanet: Planets;<br>  constructor(<br>    private _planetservice: PlanetsService) {}</p>\n<p>  ngOnInit() {<br>    this._planetservice.getPlanets().then(planets =&gt; this.planetsList = planets);<br>    this.selectedPlanet = new Planets();<br>  }</p>\n<p>  showPlanetInfo(selplanet)<br>  {<br>    this.selectedPlanet = selplanet;<br>  }<br>}</p>\n<p>Now that we have adding Material 2 package, imported them, included them in HTML, lets do <strong>ng serve</strong> to see them on web page as seen below [caption id=”attachment_549” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/09/ng-md.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/09/ng-md-1024x354.png\" alt=\"angular material 2\"></a> Our planets showing Material components[/caption] It’s very easy now to include Angular Material 2 components in Angular 2 application.</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Angular Material 2 - Using in Angular 2 apps with Angular CLI","path":"angular-material-2-angular-cli-webpack/","eyeCatchImage":null,"excerpt":null,"date":"2016-09-30T13:30:31.000Z","pv":0,"totalPV":0,"categories":"Angular 2","tags":["Angular2"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Integrating ASP.NET Core 2 Web API and Entity Framework Core 2","url":"562.html","id":"562","date":"2016-10-11T20:11:20.000Z","_content":"\n**ASP.NET Core 2 Web API** and **Entity Framework Core 2.0 (EF Core 2)** are the two latest Microsoft's offerings into Open Source world gaining momentum. We will learn to integrate them together, being cross platform technologies you are not bound to Windows for learning. I am using Windows OS, SQL Server Express Edition and Visual Studio 2017 IDE to integrate, you can use the steps to integrate on Linux or OS X using Visual Studio Code, database like MySql, Postgresql as of now\n\n#### What is **Entity Framework Core 2 (EF Core 2)?**\n\n**Entity Framework (EF) Core** is a lightweight and extensible version of the popular Entity Framework data access technology. EF Core is an object-relational mapper (O/RM) that enables .NET developers to work with a database using .NET objects. It eliminates the need for most of the data-access code that developers usually need to write. EF Core supports many database engines. Here is the [providers list](https://docs.efproject.net/en/latest/providers/index.html) So lets started for using EF Core 2 in ASP.Net Core 2 Web API\n\nCreating ASP.NET Core Web API\n-----------------------------\n\nThis is a continuation of [Creating ASP.NET Core WebAPI](http://www.mithunvp.com/create-aspnet-mvc-6-web-api-visual-studio-2015/), recommend to read it to move further here. You can still create your own project too.\n\nAdding Entity Framework Core packages\n-------------------------------------\n\nJust like ASP.NET Core is completely modular, same way EF Core is also designed to be modular i.e. the packages are split into granular with more focused functionality instead of including everything. It has EF Core packages for the various databases; as we are using SQL Server Express Edition, we will add its packages. Open ***.csproj** in Web API project to add EF Core package for SQL Server. You can add it using **NuGet** also.\n\n// Removed other packages for brevity \n// This is Web API project csproj file\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.0.0\" />\n  </ItemGroup>\n\n> Add appropriate packages for database by referring EF Core Database providers list\n\nCreate the Database Context\n---------------------------\n\nWe are working on Contacts data model from the previous link, so let's create database context for it **DbContext** class coordinates Entity Framework functionality for a given data model is the database context class. Let's create **Contexts** folder (name it as you like) and in it, C# class named **ContactsContext**, copy below code in it\n\nusing ContactsApi.Models;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace ContactsApi.Contexts\n{\n    public class ContactsContext : DbContext\n    {\n        public ContactsContext(DbContextOptions<ContactsContext> options)\n            :base(options) { }\n        public ContactsContext(){ }\n        public DbSet<Contacts> Contacts { get; set; }\n    }\n}\n\nBreaking down code\n\n1.  **Microsoft.EntityFrameworkCore** namespace containing _DbContext_ class to derived.\n2.  _**ContactsContext**_ class derives from the **DbContext** class to be coordinator for data model and database\n3.  **DbContextOptions** allows us DI the configuration, provider details for DbContext to work. Lots of other functionality exists to be explored later\n4.  When EF creates the database, the tables have to be created too, for these C# properties that have **DbSet** are created as tables. At present we have only one table, if you have many tables please create **DbSet** properties accordingly.\n\nProviders & Database Connection string\n--------------------------------------\n\nThe database context we created above is independent of the database used, in this example, we are using SQL Server so we need to use appropriate provider and its database connection string to perform the database related operation. Add this code in **ConfigureServices** method of **Startup.cs.** Don't forget to include namespace **Microsoft.EntityFrameworkCore.** **UseSqlServer** configures the _ContactsContext_ to connect to Microsoft SQL Server Database.\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddDbContext<ContactsContext>(options =>\n             options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n\n}\n\n**DefaultConnection** is connection string for connecting to database, it should be added in **appsettings.json**\n\n{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Data Source=.\\\\\\SQLEXPRESS;Initial Catalog=ContactsDB;Integrated Security=True;MultipleActiveResultSets=True\"\n  }\n}\n\nTools for EF migration\n----------------------\n\nAt present to work with EF Core, we have command line options for operations like adding/ modifying migrations (generating database schema in C# classes), updating database. Edit **_*.csproj or_** _use NuGet manager_ to add **Microsoft.EntityFrameworkCore.Tools** package and include EF to the run from command line options. The highlighted code should be present included.\n\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.0.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\n    <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />    \n  </ItemGroup>\n\n</Project>\n\nRunning EF Core commands\n------------------------\n\nWe included EF Core packages, created DbContext, added a provider with connection string and added tools to work command line. For this simple example, we have two steps to follow\n\n#### Init Migrations\n\nThe data models, DbSet needs to be prepared for creating SQL scripts, add init migrations command will create C# class for model snapshot i.e. database snapshot. Run the following command from project folder shown in figure\n\ndotnet ef migrations add init\n\n*   **dotnet** \\- executes .NET Core commands\n*   **ef** \\- Entity Framework Core commands, available only if we adding EF tooling in project.json\n*   **add init** \\- Initiates EF migrations for context\n\nAfter this run the following command to **create the Contacts database** in SQL Server\n\ndotnet ef database update\n\nOpen Sql Server Express to view the Contacts database created. It's fairly simple. \\[caption id=\"attachment_572\" align=\"aligncenter\" width=\"354\"\\][![web api](http://www.mithunvp.com/wp-content/uploads/2016/10/dbinsqlserver.png)](http://www.mithunvp.com/wp-content/uploads/2016/10/dbinsqlserver.png) Contacts DB created using EF commands\\[/caption\\]\n\nCalling ContactsContext from repository\n---------------------------------------\n\nIn the previous example I have used **IContactsRepository**, this gets called from Web API Controllers. _**IContactsRepository**_ is singleton DI injected; here is where we call use EF (Dbcontext) to call database.\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing ContactsApi.Models;\nusing ContactsApi.Contexts;\n\nnamespace ContactsApi.Repository\n{\n    public class ContactsRepository : IContactsRepository\n    {\n        ContactsContext _context;\n        public ContactsRepository(ContactsContext context)\n        {\n            _context = context;\n        }        \n\n        public void Add(Contacts item)\n        {\n            _context.Contacts.Add(item);\n            _context.SaveChanges();\n        }\n\n\t\tpublic IEnumerable<Contacts> GetAll()\n        {\n            return _context.Contacts.ToList();\n        }\n\n\t\t// Rest of code removed for brevity\n    }\n}\n\nWe are injecting **ContactsContext** using DI, this was setup in _Startup.cs_ file, using __context_ we can work with DbSet's\n\n### Running WEB API and Source Code\n\nUsing either POSTMAN or Fiddler or Swagger UI, we can do testing of it. The [ContactsAPI github repo](https://github.com/mithunvp/ContactsAPI) contains source code. Many improvements need to be made, but its good enough to get started.","source":"_posts/aspnet-core-web-api-entity-framework-core.md","raw":"---\ntitle: Integrating ASP.NET Core 2 Web API and Entity Framework Core 2\ntags:\n  - ASP.NET Core 2\n  - EF Core 2\nurl: 562.html\nid: 562\ncategories:\n  - ASP.NET Core 2\n  - EF Core 2\ndate: 2016-10-12 01:41:20\n---\n\n**ASP.NET Core 2 Web API** and **Entity Framework Core 2.0 (EF Core 2)** are the two latest Microsoft's offerings into Open Source world gaining momentum. We will learn to integrate them together, being cross platform technologies you are not bound to Windows for learning. I am using Windows OS, SQL Server Express Edition and Visual Studio 2017 IDE to integrate, you can use the steps to integrate on Linux or OS X using Visual Studio Code, database like MySql, Postgresql as of now\n\n#### What is **Entity Framework Core 2 (EF Core 2)?**\n\n**Entity Framework (EF) Core** is a lightweight and extensible version of the popular Entity Framework data access technology. EF Core is an object-relational mapper (O/RM) that enables .NET developers to work with a database using .NET objects. It eliminates the need for most of the data-access code that developers usually need to write. EF Core supports many database engines. Here is the [providers list](https://docs.efproject.net/en/latest/providers/index.html) So lets started for using EF Core 2 in ASP.Net Core 2 Web API\n\nCreating ASP.NET Core Web API\n-----------------------------\n\nThis is a continuation of [Creating ASP.NET Core WebAPI](http://www.mithunvp.com/create-aspnet-mvc-6-web-api-visual-studio-2015/), recommend to read it to move further here. You can still create your own project too.\n\nAdding Entity Framework Core packages\n-------------------------------------\n\nJust like ASP.NET Core is completely modular, same way EF Core is also designed to be modular i.e. the packages are split into granular with more focused functionality instead of including everything. It has EF Core packages for the various databases; as we are using SQL Server Express Edition, we will add its packages. Open ***.csproj** in Web API project to add EF Core package for SQL Server. You can add it using **NuGet** also.\n\n// Removed other packages for brevity \n// This is Web API project csproj file\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.0.0\" />\n  </ItemGroup>\n\n> Add appropriate packages for database by referring EF Core Database providers list\n\nCreate the Database Context\n---------------------------\n\nWe are working on Contacts data model from the previous link, so let's create database context for it **DbContext** class coordinates Entity Framework functionality for a given data model is the database context class. Let's create **Contexts** folder (name it as you like) and in it, C# class named **ContactsContext**, copy below code in it\n\nusing ContactsApi.Models;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace ContactsApi.Contexts\n{\n    public class ContactsContext : DbContext\n    {\n        public ContactsContext(DbContextOptions<ContactsContext> options)\n            :base(options) { }\n        public ContactsContext(){ }\n        public DbSet<Contacts> Contacts { get; set; }\n    }\n}\n\nBreaking down code\n\n1.  **Microsoft.EntityFrameworkCore** namespace containing _DbContext_ class to derived.\n2.  _**ContactsContext**_ class derives from the **DbContext** class to be coordinator for data model and database\n3.  **DbContextOptions** allows us DI the configuration, provider details for DbContext to work. Lots of other functionality exists to be explored later\n4.  When EF creates the database, the tables have to be created too, for these C# properties that have **DbSet** are created as tables. At present we have only one table, if you have many tables please create **DbSet** properties accordingly.\n\nProviders & Database Connection string\n--------------------------------------\n\nThe database context we created above is independent of the database used, in this example, we are using SQL Server so we need to use appropriate provider and its database connection string to perform the database related operation. Add this code in **ConfigureServices** method of **Startup.cs.** Don't forget to include namespace **Microsoft.EntityFrameworkCore.** **UseSqlServer** configures the _ContactsContext_ to connect to Microsoft SQL Server Database.\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddDbContext<ContactsContext>(options =>\n             options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\n\n}\n\n**DefaultConnection** is connection string for connecting to database, it should be added in **appsettings.json**\n\n{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Data Source=.\\\\\\SQLEXPRESS;Initial Catalog=ContactsDB;Integrated Security=True;MultipleActiveResultSets=True\"\n  }\n}\n\nTools for EF migration\n----------------------\n\nAt present to work with EF Core, we have command line options for operations like adding/ modifying migrations (generating database schema in C# classes), updating database. Edit **_*.csproj or_** _use NuGet manager_ to add **Microsoft.EntityFrameworkCore.Tools** package and include EF to the run from command line options. The highlighted code should be present included.\n\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.0.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.0.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\n    <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />    \n  </ItemGroup>\n\n</Project>\n\nRunning EF Core commands\n------------------------\n\nWe included EF Core packages, created DbContext, added a provider with connection string and added tools to work command line. For this simple example, we have two steps to follow\n\n#### Init Migrations\n\nThe data models, DbSet needs to be prepared for creating SQL scripts, add init migrations command will create C# class for model snapshot i.e. database snapshot. Run the following command from project folder shown in figure\n\ndotnet ef migrations add init\n\n*   **dotnet** \\- executes .NET Core commands\n*   **ef** \\- Entity Framework Core commands, available only if we adding EF tooling in project.json\n*   **add init** \\- Initiates EF migrations for context\n\nAfter this run the following command to **create the Contacts database** in SQL Server\n\ndotnet ef database update\n\nOpen Sql Server Express to view the Contacts database created. It's fairly simple. \\[caption id=\"attachment_572\" align=\"aligncenter\" width=\"354\"\\][![web api](http://www.mithunvp.com/wp-content/uploads/2016/10/dbinsqlserver.png)](http://www.mithunvp.com/wp-content/uploads/2016/10/dbinsqlserver.png) Contacts DB created using EF commands\\[/caption\\]\n\nCalling ContactsContext from repository\n---------------------------------------\n\nIn the previous example I have used **IContactsRepository**, this gets called from Web API Controllers. _**IContactsRepository**_ is singleton DI injected; here is where we call use EF (Dbcontext) to call database.\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing ContactsApi.Models;\nusing ContactsApi.Contexts;\n\nnamespace ContactsApi.Repository\n{\n    public class ContactsRepository : IContactsRepository\n    {\n        ContactsContext _context;\n        public ContactsRepository(ContactsContext context)\n        {\n            _context = context;\n        }        \n\n        public void Add(Contacts item)\n        {\n            _context.Contacts.Add(item);\n            _context.SaveChanges();\n        }\n\n\t\tpublic IEnumerable<Contacts> GetAll()\n        {\n            return _context.Contacts.ToList();\n        }\n\n\t\t// Rest of code removed for brevity\n    }\n}\n\nWe are injecting **ContactsContext** using DI, this was setup in _Startup.cs_ file, using __context_ we can work with DbSet's\n\n### Running WEB API and Source Code\n\nUsing either POSTMAN or Fiddler or Swagger UI, we can do testing of it. The [ContactsAPI github repo](https://github.com/mithunvp/ContactsAPI) contains source code. Many improvements need to be made, but its good enough to get started.","slug":"aspnet-core-web-api-entity-framework-core","published":1,"updated":"2018-07-10T19:49:06.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034vu000gs4tjk1rk5xov","content":"<p><strong>ASP.NET Core 2 Web API</strong> and <strong>Entity Framework Core 2.0 (EF Core 2)</strong> are the two latest Microsoft’s offerings into Open Source world gaining momentum. We will learn to integrate them together, being cross platform technologies you are not bound to Windows for learning. I am using Windows OS, SQL Server Express Edition and Visual Studio 2017 IDE to integrate, you can use the steps to integrate on Linux or OS X using Visual Studio Code, database like MySql, Postgresql as of now</p>\n<h4 id=\"What-is-Entity-Framework-Core-2-EF-Core-2\"><a href=\"#What-is-Entity-Framework-Core-2-EF-Core-2\" class=\"headerlink\" title=\"What is Entity Framework Core 2 (EF Core 2)?\"></a>What is <strong>Entity Framework Core 2 (EF Core 2)?</strong></h4><p><strong>Entity Framework (EF) Core</strong> is a lightweight and extensible version of the popular Entity Framework data access technology. EF Core is an object-relational mapper (O/RM) that enables .NET developers to work with a database using .NET objects. It eliminates the need for most of the data-access code that developers usually need to write. EF Core supports many database engines. Here is the <a href=\"https://docs.efproject.net/en/latest/providers/index.html\" target=\"_blank\" rel=\"noopener\">providers list</a> So lets started for using EF Core 2 in ASP.Net Core 2 Web API</p>\n<h2 id=\"Creating-ASP-NET-Core-Web-API\"><a href=\"#Creating-ASP-NET-Core-Web-API\" class=\"headerlink\" title=\"Creating ASP.NET Core Web API\"></a>Creating ASP.NET Core Web API</h2><p>This is a continuation of <a href=\"http://www.mithunvp.com/create-aspnet-mvc-6-web-api-visual-studio-2015/\">Creating ASP.NET Core WebAPI</a>, recommend to read it to move further here. You can still create your own project too.</p>\n<h2 id=\"Adding-Entity-Framework-Core-packages\"><a href=\"#Adding-Entity-Framework-Core-packages\" class=\"headerlink\" title=\"Adding Entity Framework Core packages\"></a>Adding Entity Framework Core packages</h2><p>Just like ASP.NET Core is completely modular, same way EF Core is also designed to be modular i.e. the packages are split into granular with more focused functionality instead of including everything. It has EF Core packages for the various databases; as we are using SQL Server Express Edition, we will add its packages. Open <strong>*.csproj</strong> in Web API project to add EF Core package for SQL Server. You can add it using <strong>NuGet</strong> also.</p>\n<p>// Removed other packages for brevity<br>// This is Web API project csproj file</p>\n<itemgroup><br>    <packagereference include=\"Microsoft.AspNetCore.All\" version=\"2.0.0\"><br>    <packagereference include=\"Microsoft.EntityFrameworkCore.SqlServer\" version=\"2.0.0\"><br>  </packagereference></packagereference></itemgroup>\n\n<blockquote>\n<p>Add appropriate packages for database by referring EF Core Database providers list</p>\n</blockquote>\n<h2 id=\"Create-the-Database-Context\"><a href=\"#Create-the-Database-Context\" class=\"headerlink\" title=\"Create the Database Context\"></a>Create the Database Context</h2><p>We are working on Contacts data model from the previous link, so let’s create database context for it <strong>DbContext</strong> class coordinates Entity Framework functionality for a given data model is the database context class. Let’s create <strong>Contexts</strong> folder (name it as you like) and in it, C# class named <strong>ContactsContext</strong>, copy below code in it</p>\n<p>using ContactsApi.Models;<br>using Microsoft.EntityFrameworkCore;</p>\n<p>namespace ContactsApi.Contexts<br>{<br>    public class ContactsContext : DbContext<br>    {<br>        public ContactsContext(DbContextOptions<contactscontext> options)<br>            :base(options) { }<br>        public ContactsContext(){ }<br>        public DbSet<contacts> Contacts { get; set; }<br>    }<br>}</contacts></contactscontext></p>\n<p>Breaking down code</p>\n<ol>\n<li><strong>Microsoft.EntityFrameworkCore</strong> namespace containing <em>DbContext</em> class to derived.</li>\n<li><em><strong>ContactsContext</strong></em> class derives from the <strong>DbContext</strong> class to be coordinator for data model and database</li>\n<li><strong>DbContextOptions</strong> allows us DI the configuration, provider details for DbContext to work. Lots of other functionality exists to be explored later</li>\n<li>When EF creates the database, the tables have to be created too, for these C# properties that have <strong>DbSet</strong> are created as tables. At present we have only one table, if you have many tables please create <strong>DbSet</strong> properties accordingly.</li>\n</ol>\n<h2 id=\"Providers-amp-Database-Connection-string\"><a href=\"#Providers-amp-Database-Connection-string\" class=\"headerlink\" title=\"Providers &amp; Database Connection string\"></a>Providers &amp; Database Connection string</h2><p>The database context we created above is independent of the database used, in this example, we are using SQL Server so we need to use appropriate provider and its database connection string to perform the database related operation. Add this code in <strong>ConfigureServices</strong> method of <strong>Startup.cs.</strong> Don’t forget to include namespace <strong>Microsoft.EntityFrameworkCore.</strong> <strong>UseSqlServer</strong> configures the <em>ContactsContext</em> to connect to Microsoft SQL Server Database.</p>\n<p>public void ConfigureServices(IServiceCollection services)<br>{<br>    services.AddDbContext<contactscontext>(options =&gt;<br>             options.UseSqlServer(Configuration.GetConnectionString(“DefaultConnection”)));</contactscontext></p>\n<p>}</p>\n<p><strong>DefaultConnection</strong> is connection string for connecting to database, it should be added in <strong>appsettings.json</strong></p>\n<p>{<br>  “ConnectionStrings”: {<br>    “DefaultConnection”: “Data Source=.\\\\SQLEXPRESS;Initial Catalog=ContactsDB;Integrated Security=True;MultipleActiveResultSets=True”<br>  }<br>}</p>\n<h2 id=\"Tools-for-EF-migration\"><a href=\"#Tools-for-EF-migration\" class=\"headerlink\" title=\"Tools for EF migration\"></a>Tools for EF migration</h2><p>At present to work with EF Core, we have command line options for operations like adding/ modifying migrations (generating database schema in C# classes), updating database. Edit <strong><em>*.csproj or</em></strong> <em>use NuGet manager</em> to add <strong>Microsoft.EntityFrameworkCore.Tools</strong> package and include EF to the run from command line options. The highlighted code should be present included.</p>\n<project sdk=\"Microsoft.NET.Sdk.Web\"><br><br>  <propertygroup><br>    <targetframework>netcoreapp2.0</targetframework><br>  </propertygroup><br><br>  <itemgroup><br>    <packagereference include=\"Microsoft.AspNetCore.All\" version=\"2.0.0\"><br>    <packagereference include=\"Microsoft.EntityFrameworkCore.SqlServer\" version=\"2.0.0\"><br>    <packagereference include=\"Microsoft.EntityFrameworkCore.Tools\" version=\"2.0.0\"><br>    <packagereference include=\"Microsoft.EntityFrameworkCore.Design\" version=\"2.0.0\"><br>  </packagereference></packagereference></packagereference></packagereference></itemgroup><br><br>  <itemgroup><br>    <dotnetclitoolreference include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" version=\"2.0.0\"><br>    <dotnetclitoolreference include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" version=\"2.0.0\"><br>  </dotnetclitoolreference></dotnetclitoolreference></itemgroup><br><br></project>\n\n<h2 id=\"Running-EF-Core-commands\"><a href=\"#Running-EF-Core-commands\" class=\"headerlink\" title=\"Running EF Core commands\"></a>Running EF Core commands</h2><p>We included EF Core packages, created DbContext, added a provider with connection string and added tools to work command line. For this simple example, we have two steps to follow</p>\n<h4 id=\"Init-Migrations\"><a href=\"#Init-Migrations\" class=\"headerlink\" title=\"Init Migrations\"></a>Init Migrations</h4><p>The data models, DbSet needs to be prepared for creating SQL scripts, add init migrations command will create C# class for model snapshot i.e. database snapshot. Run the following command from project folder shown in figure</p>\n<p>dotnet ef migrations add init</p>\n<ul>\n<li><strong>dotnet</strong> - executes .NET Core commands</li>\n<li><strong>ef</strong> - Entity Framework Core commands, available only if we adding EF tooling in project.json</li>\n<li><strong>add init</strong> - Initiates EF migrations for context</li>\n</ul>\n<p>After this run the following command to <strong>create the Contacts database</strong> in SQL Server</p>\n<p>dotnet ef database update</p>\n<p>Open Sql Server Express to view the Contacts database created. It’s fairly simple. [caption id=”attachment_572” align=”aligncenter” width=”354”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/10/dbinsqlserver.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/10/dbinsqlserver.png\" alt=\"web api\"></a> Contacts DB created using EF commands[/caption]</p>\n<h2 id=\"Calling-ContactsContext-from-repository\"><a href=\"#Calling-ContactsContext-from-repository\" class=\"headerlink\" title=\"Calling ContactsContext from repository\"></a>Calling ContactsContext from repository</h2><p>In the previous example I have used <strong>IContactsRepository</strong>, this gets called from Web API Controllers. <em><strong>IContactsRepository</strong></em> is singleton DI injected; here is where we call use EF (Dbcontext) to call database.</p>\n<p>using System.Collections.Generic;<br>using System.Linq;<br>using ContactsApi.Models;<br>using ContactsApi.Contexts;</p>\n<p>namespace ContactsApi.Repository<br>{<br>    public class ContactsRepository : IContactsRepository<br>    {<br>        ContactsContext _context;<br>        public ContactsRepository(ContactsContext context)<br>        {<br>            _context = context;<br>        }        </p>\n<pre><code>    public void Add(Contacts item)\n    {\n        _context.Contacts.Add(item);\n        _context.SaveChanges();\n    }\n\n    public IEnumerable&lt;Contacts&gt; GetAll()\n    {\n        return _context.Contacts.ToList();\n    }\n\n    // Rest of code removed for brevity\n}\n</code></pre><p>}</p>\n<p>We are injecting <strong>ContactsContext</strong> using DI, this was setup in <em>Startup.cs</em> file, using __context_ we can work with DbSet’s</p>\n<h3 id=\"Running-WEB-API-and-Source-Code\"><a href=\"#Running-WEB-API-and-Source-Code\" class=\"headerlink\" title=\"Running WEB API and Source Code\"></a>Running WEB API and Source Code</h3><p>Using either POSTMAN or Fiddler or Swagger UI, we can do testing of it. The <a href=\"https://github.com/mithunvp/ContactsAPI\" target=\"_blank\" rel=\"noopener\">ContactsAPI github repo</a> contains source code. Many improvements need to be made, but its good enough to get started.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>ASP.NET Core 2 Web API</strong> and <strong>Entity Framework Core 2.0 (EF Core 2)</strong> are the two latest Microsoft’s offerings into Open Source world gaining momentum. We will learn to integrate them together, being cross platform technologies you are not bound to Windows for learning. I am using Windows OS, SQL Server Express Edition and Visual Studio 2017 IDE to integrate, you can use the steps to integrate on Linux or OS X using Visual Studio Code, database like MySql, Postgresql as of now</p>\n<h4 id=\"What-is-Entity-Framework-Core-2-EF-Core-2\"><a href=\"#What-is-Entity-Framework-Core-2-EF-Core-2\" class=\"headerlink\" title=\"What is Entity Framework Core 2 (EF Core 2)?\"></a>What is <strong>Entity Framework Core 2 (EF Core 2)?</strong></h4><p><strong>Entity Framework (EF) Core</strong> is a lightweight and extensible version of the popular Entity Framework data access technology. EF Core is an object-relational mapper (O/RM) that enables .NET developers to work with a database using .NET objects. It eliminates the need for most of the data-access code that developers usually need to write. EF Core supports many database engines. Here is the <a href=\"https://docs.efproject.net/en/latest/providers/index.html\" target=\"_blank\" rel=\"noopener\">providers list</a> So lets started for using EF Core 2 in ASP.Net Core 2 Web API</p>\n<h2 id=\"Creating-ASP-NET-Core-Web-API\"><a href=\"#Creating-ASP-NET-Core-Web-API\" class=\"headerlink\" title=\"Creating ASP.NET Core Web API\"></a>Creating ASP.NET Core Web API</h2><p>This is a continuation of <a href=\"http://www.mithunvp.com/create-aspnet-mvc-6-web-api-visual-studio-2015/\">Creating ASP.NET Core WebAPI</a>, recommend to read it to move further here. You can still create your own project too.</p>\n<h2 id=\"Adding-Entity-Framework-Core-packages\"><a href=\"#Adding-Entity-Framework-Core-packages\" class=\"headerlink\" title=\"Adding Entity Framework Core packages\"></a>Adding Entity Framework Core packages</h2><p>Just like ASP.NET Core is completely modular, same way EF Core is also designed to be modular i.e. the packages are split into granular with more focused functionality instead of including everything. It has EF Core packages for the various databases; as we are using SQL Server Express Edition, we will add its packages. Open <strong>*.csproj</strong> in Web API project to add EF Core package for SQL Server. You can add it using <strong>NuGet</strong> also.</p>\n<p>// Removed other packages for brevity<br>// This is Web API project csproj file</p>\n<itemgroup><br>    <packagereference include=\"Microsoft.AspNetCore.All\" version=\"2.0.0\"><br>    <packagereference include=\"Microsoft.EntityFrameworkCore.SqlServer\" version=\"2.0.0\"><br>  </packagereference></packagereference></itemgroup>\n\n<blockquote>\n<p>Add appropriate packages for database by referring EF Core Database providers list</p>\n</blockquote>\n<h2 id=\"Create-the-Database-Context\"><a href=\"#Create-the-Database-Context\" class=\"headerlink\" title=\"Create the Database Context\"></a>Create the Database Context</h2><p>We are working on Contacts data model from the previous link, so let’s create database context for it <strong>DbContext</strong> class coordinates Entity Framework functionality for a given data model is the database context class. Let’s create <strong>Contexts</strong> folder (name it as you like) and in it, C# class named <strong>ContactsContext</strong>, copy below code in it</p>\n<p>using ContactsApi.Models;<br>using Microsoft.EntityFrameworkCore;</p>\n<p>namespace ContactsApi.Contexts<br>{<br>    public class ContactsContext : DbContext<br>    {<br>        public ContactsContext(DbContextOptions<contactscontext> options)<br>            :base(options) { }<br>        public ContactsContext(){ }<br>        public DbSet<contacts> Contacts { get; set; }<br>    }<br>}</contacts></contactscontext></p>\n<p>Breaking down code</p>\n<ol>\n<li><strong>Microsoft.EntityFrameworkCore</strong> namespace containing <em>DbContext</em> class to derived.</li>\n<li><em><strong>ContactsContext</strong></em> class derives from the <strong>DbContext</strong> class to be coordinator for data model and database</li>\n<li><strong>DbContextOptions</strong> allows us DI the configuration, provider details for DbContext to work. Lots of other functionality exists to be explored later</li>\n<li>When EF creates the database, the tables have to be created too, for these C# properties that have <strong>DbSet</strong> are created as tables. At present we have only one table, if you have many tables please create <strong>DbSet</strong> properties accordingly.</li>\n</ol>\n<h2 id=\"Providers-amp-Database-Connection-string\"><a href=\"#Providers-amp-Database-Connection-string\" class=\"headerlink\" title=\"Providers &amp; Database Connection string\"></a>Providers &amp; Database Connection string</h2><p>The database context we created above is independent of the database used, in this example, we are using SQL Server so we need to use appropriate provider and its database connection string to perform the database related operation. Add this code in <strong>ConfigureServices</strong> method of <strong>Startup.cs.</strong> Don’t forget to include namespace <strong>Microsoft.EntityFrameworkCore.</strong> <strong>UseSqlServer</strong> configures the <em>ContactsContext</em> to connect to Microsoft SQL Server Database.</p>\n<p>public void ConfigureServices(IServiceCollection services)<br>{<br>    services.AddDbContext<contactscontext>(options =&gt;<br>             options.UseSqlServer(Configuration.GetConnectionString(“DefaultConnection”)));</contactscontext></p>\n<p>}</p>\n<p><strong>DefaultConnection</strong> is connection string for connecting to database, it should be added in <strong>appsettings.json</strong></p>\n<p>{<br>  “ConnectionStrings”: {<br>    “DefaultConnection”: “Data Source=.\\\\SQLEXPRESS;Initial Catalog=ContactsDB;Integrated Security=True;MultipleActiveResultSets=True”<br>  }<br>}</p>\n<h2 id=\"Tools-for-EF-migration\"><a href=\"#Tools-for-EF-migration\" class=\"headerlink\" title=\"Tools for EF migration\"></a>Tools for EF migration</h2><p>At present to work with EF Core, we have command line options for operations like adding/ modifying migrations (generating database schema in C# classes), updating database. Edit <strong><em>*.csproj or</em></strong> <em>use NuGet manager</em> to add <strong>Microsoft.EntityFrameworkCore.Tools</strong> package and include EF to the run from command line options. The highlighted code should be present included.</p>\n<project sdk=\"Microsoft.NET.Sdk.Web\"><br><br>  <propertygroup><br>    <targetframework>netcoreapp2.0</targetframework><br>  </propertygroup><br><br>  <itemgroup><br>    <packagereference include=\"Microsoft.AspNetCore.All\" version=\"2.0.0\"><br>    <packagereference include=\"Microsoft.EntityFrameworkCore.SqlServer\" version=\"2.0.0\"><br>    <packagereference include=\"Microsoft.EntityFrameworkCore.Tools\" version=\"2.0.0\"><br>    <packagereference include=\"Microsoft.EntityFrameworkCore.Design\" version=\"2.0.0\"><br>  </packagereference></packagereference></packagereference></packagereference></itemgroup><br><br>  <itemgroup><br>    <dotnetclitoolreference include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" version=\"2.0.0\"><br>    <dotnetclitoolreference include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" version=\"2.0.0\"><br>  </dotnetclitoolreference></dotnetclitoolreference></itemgroup><br><br></project>\n\n<h2 id=\"Running-EF-Core-commands\"><a href=\"#Running-EF-Core-commands\" class=\"headerlink\" title=\"Running EF Core commands\"></a>Running EF Core commands</h2><p>We included EF Core packages, created DbContext, added a provider with connection string and added tools to work command line. For this simple example, we have two steps to follow</p>\n<h4 id=\"Init-Migrations\"><a href=\"#Init-Migrations\" class=\"headerlink\" title=\"Init Migrations\"></a>Init Migrations</h4><p>The data models, DbSet needs to be prepared for creating SQL scripts, add init migrations command will create C# class for model snapshot i.e. database snapshot. Run the following command from project folder shown in figure</p>\n<p>dotnet ef migrations add init</p>\n<ul>\n<li><strong>dotnet</strong> - executes .NET Core commands</li>\n<li><strong>ef</strong> - Entity Framework Core commands, available only if we adding EF tooling in project.json</li>\n<li><strong>add init</strong> - Initiates EF migrations for context</li>\n</ul>\n<p>After this run the following command to <strong>create the Contacts database</strong> in SQL Server</p>\n<p>dotnet ef database update</p>\n<p>Open Sql Server Express to view the Contacts database created. It’s fairly simple. [caption id=”attachment_572” align=”aligncenter” width=”354”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/10/dbinsqlserver.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/10/dbinsqlserver.png\" alt=\"web api\"></a> Contacts DB created using EF commands[/caption]</p>\n<h2 id=\"Calling-ContactsContext-from-repository\"><a href=\"#Calling-ContactsContext-from-repository\" class=\"headerlink\" title=\"Calling ContactsContext from repository\"></a>Calling ContactsContext from repository</h2><p>In the previous example I have used <strong>IContactsRepository</strong>, this gets called from Web API Controllers. <em><strong>IContactsRepository</strong></em> is singleton DI injected; here is where we call use EF (Dbcontext) to call database.</p>\n<p>using System.Collections.Generic;<br>using System.Linq;<br>using ContactsApi.Models;<br>using ContactsApi.Contexts;</p>\n<p>namespace ContactsApi.Repository<br>{<br>    public class ContactsRepository : IContactsRepository<br>    {<br>        ContactsContext _context;<br>        public ContactsRepository(ContactsContext context)<br>        {<br>            _context = context;<br>        }        </p>\n<pre><code>    public void Add(Contacts item)\n    {\n        _context.Contacts.Add(item);\n        _context.SaveChanges();\n    }\n\n    public IEnumerable&lt;Contacts&gt; GetAll()\n    {\n        return _context.Contacts.ToList();\n    }\n\n    // Rest of code removed for brevity\n}\n</code></pre><p>}</p>\n<p>We are injecting <strong>ContactsContext</strong> using DI, this was setup in <em>Startup.cs</em> file, using __context_ we can work with DbSet’s</p>\n<h3 id=\"Running-WEB-API-and-Source-Code\"><a href=\"#Running-WEB-API-and-Source-Code\" class=\"headerlink\" title=\"Running WEB API and Source Code\"></a>Running WEB API and Source Code</h3><p>Using either POSTMAN or Fiddler or Swagger UI, we can do testing of it. The <a href=\"https://github.com/mithunvp/ContactsAPI\" target=\"_blank\" rel=\"noopener\">ContactsAPI github repo</a> contains source code. Many improvements need to be made, but its good enough to get started.</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Integrating ASP.NET Core 2 Web API and Entity Framework Core 2","path":"aspnet-core-web-api-entity-framework-core/","eyeCatchImage":null,"excerpt":null,"date":"2016-10-11T20:11:20.000Z","pv":0,"totalPV":0,"categories":"ASP.NET Core 2 > EF Core 2","tags":["ASP.NET Core 2","EF Core 2"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Angular Material - Using with Angular 2 and ASP.NET Core 1.0","url":"511.html","id":"511","date":"2016-07-20T16:30:39.000Z","_content":"\n**Angular Material 2** is a set of high-quality UI components built with Angular 2 and TypeScript, following the Material Design spec. It's built by Angular team so that it fits in Angular 2 seamlessly. [Know more](https://material.angular.io/) of it here Why Angular Material design?\n\n*   Internationalized and accessible so that all users can use them.\n*   Browser and screen reader support\n*   Code is clean and well-documented to serve as an example for Angular devs.\n*   Fully tested across IE11 and current versions of Chrome, Edge, Firefox, and Safari.\n*   Straightforward APIs that don't confuse developers.\n\nWe will be integrating Angular Material UI components to ASP.NET Core 1.0 apps with Angular 2 using Visual Studio 2015 update 3. _**Installing TypeScript 2.0 RC is mandatory**_\n\n> Update October 2 - Updated to Angular Material 2 for Angular 2 final release on ASP.NET Core using webpack\n\nSteps to add Angular Material\n\n1.  Angular 2 & ASP.NET Core together\n2.  Including Material packages in package.json\n3.  Update gulpfile.js to move packages to wwwroot.\n4.  Modify to systemjs.config.js to load material packages\n5.  Import and use material UI components.\n\n> August 21 2016 - Updated with Angular 2 RC5, Angular Material Alpha 7 with NgModule\n\nStep 1: Angular 2 & ASP.NET Core together\n-----------------------------------------\n\nTo use Angular Material UI components we need to have Angular 2 and ASP.NET Core 1.0 running together. For this follow Getting started with [Angular 2 and ASP.NET Core](http://www.mithunvp.com/angular-2-in-asp-net-5-typescript-visual-studio-2015/) here. You can clone Github repo to start looking this implementation.\n\nStep 2: Including Angular Material packages in _package.json_\n-------------------------------------------------------------\n\nAll the Material packages can be installed using NPM, we need to add them to **package.json**.\n\n> All the Material 2 UI components are group into **@angular/material** to make it simple\n\nSome of Material packages are button, card, checkbox, grid-list, menu etc. Read the [full list](https://github.com/angular/material2) of Material components. Open the command prompt containing **_package.json_** and run below command to install Angular Material components.\n\nnpm install --save @angular/material\n\nThe \"--save\" option will update your package.json to include material components.\n\nStep 3: Import and use Material UI components using NgModule\n------------------------------------------------------------\n\nYes !! We are almost there, now lets import Angular 2 Material components into **app.module.ts**. The highlighted lines in below code are added to include all components. **This is so super easy now**\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { MaterialModule } from '@angular/material';\n\n@NgModule({\n    imports: \\[\n        BrowserModule,\n        MaterialModule.forRoot()\n    \\],\n    declarations: \\[\n        AppComponent\n    \\],\n    bootstrap: \\[AppComponent\\]\n})\nexport class AppModule { }\n\nStep 4: Using md-icon (optional)\n--------------------------------\n\nMaterial Design Icons can be added from Google API. Open **clientsrc/index.html** and add below code in _head_ section\n\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n\nStep 5: Include UI components in template files\n-----------------------------------------------\n\nOpen **app.component.html** to add UI components, at present we are showing only **md-button**, you can play around with other components\n\n<h4>Article is  { {title}}</h4>\n<br />\n<button md-raised-button>Click Me !!</button>\n\n**Running application** Now run **npm start** from command line & open browser, navigate localhost:3000 to see UI showing material UI components [![Angular Material](http://www.mithunvp.com/wp-content/uploads/2016/07/md-UI.png)](http://www.mithunvp.com/wp-content/uploads/2016/07/md-UI.png)  \n\n> ** Check out the [GITHUB repo](https://github.com/mithunvp/ng2CoreContacts) to play around**","source":"_posts/angular-material-angular2-aspnet-core-visual-studio.md","raw":"---\ntitle: Angular Material - Using with Angular 2 and ASP.NET Core 1.0\ntags:\n  - Angular2\n  - Asp.NET Core 1.0\nurl: 511.html\nid: 511\ncategories:\n  - Angular 2\n  - ASP.NET Core 1.0\ndate: 2016-07-20 22:00:39\n---\n\n**Angular Material 2** is a set of high-quality UI components built with Angular 2 and TypeScript, following the Material Design spec. It's built by Angular team so that it fits in Angular 2 seamlessly. [Know more](https://material.angular.io/) of it here Why Angular Material design?\n\n*   Internationalized and accessible so that all users can use them.\n*   Browser and screen reader support\n*   Code is clean and well-documented to serve as an example for Angular devs.\n*   Fully tested across IE11 and current versions of Chrome, Edge, Firefox, and Safari.\n*   Straightforward APIs that don't confuse developers.\n\nWe will be integrating Angular Material UI components to ASP.NET Core 1.0 apps with Angular 2 using Visual Studio 2015 update 3. _**Installing TypeScript 2.0 RC is mandatory**_\n\n> Update October 2 - Updated to Angular Material 2 for Angular 2 final release on ASP.NET Core using webpack\n\nSteps to add Angular Material\n\n1.  Angular 2 & ASP.NET Core together\n2.  Including Material packages in package.json\n3.  Update gulpfile.js to move packages to wwwroot.\n4.  Modify to systemjs.config.js to load material packages\n5.  Import and use material UI components.\n\n> August 21 2016 - Updated with Angular 2 RC5, Angular Material Alpha 7 with NgModule\n\nStep 1: Angular 2 & ASP.NET Core together\n-----------------------------------------\n\nTo use Angular Material UI components we need to have Angular 2 and ASP.NET Core 1.0 running together. For this follow Getting started with [Angular 2 and ASP.NET Core](http://www.mithunvp.com/angular-2-in-asp-net-5-typescript-visual-studio-2015/) here. You can clone Github repo to start looking this implementation.\n\nStep 2: Including Angular Material packages in _package.json_\n-------------------------------------------------------------\n\nAll the Material packages can be installed using NPM, we need to add them to **package.json**.\n\n> All the Material 2 UI components are group into **@angular/material** to make it simple\n\nSome of Material packages are button, card, checkbox, grid-list, menu etc. Read the [full list](https://github.com/angular/material2) of Material components. Open the command prompt containing **_package.json_** and run below command to install Angular Material components.\n\nnpm install --save @angular/material\n\nThe \"--save\" option will update your package.json to include material components.\n\nStep 3: Import and use Material UI components using NgModule\n------------------------------------------------------------\n\nYes !! We are almost there, now lets import Angular 2 Material components into **app.module.ts**. The highlighted lines in below code are added to include all components. **This is so super easy now**\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { MaterialModule } from '@angular/material';\n\n@NgModule({\n    imports: \\[\n        BrowserModule,\n        MaterialModule.forRoot()\n    \\],\n    declarations: \\[\n        AppComponent\n    \\],\n    bootstrap: \\[AppComponent\\]\n})\nexport class AppModule { }\n\nStep 4: Using md-icon (optional)\n--------------------------------\n\nMaterial Design Icons can be added from Google API. Open **clientsrc/index.html** and add below code in _head_ section\n\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n\nStep 5: Include UI components in template files\n-----------------------------------------------\n\nOpen **app.component.html** to add UI components, at present we are showing only **md-button**, you can play around with other components\n\n<h4>Article is  { {title}}</h4>\n<br />\n<button md-raised-button>Click Me !!</button>\n\n**Running application** Now run **npm start** from command line & open browser, navigate localhost:3000 to see UI showing material UI components [![Angular Material](http://www.mithunvp.com/wp-content/uploads/2016/07/md-UI.png)](http://www.mithunvp.com/wp-content/uploads/2016/07/md-UI.png)  \n\n> ** Check out the [GITHUB repo](https://github.com/mithunvp/ng2CoreContacts) to play around**","slug":"angular-material-angular2-aspnet-core-visual-studio","published":1,"updated":"2018-07-10T19:49:06.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034vu000is4tj7uz0ff6z","content":"<p><strong>Angular Material 2</strong> is a set of high-quality UI components built with Angular 2 and TypeScript, following the Material Design spec. It’s built by Angular team so that it fits in Angular 2 seamlessly. <a href=\"https://material.angular.io/\" target=\"_blank\" rel=\"noopener\">Know more</a> of it here Why Angular Material design?</p>\n<ul>\n<li>Internationalized and accessible so that all users can use them.</li>\n<li>Browser and screen reader support</li>\n<li>Code is clean and well-documented to serve as an example for Angular devs.</li>\n<li>Fully tested across IE11 and current versions of Chrome, Edge, Firefox, and Safari.</li>\n<li>Straightforward APIs that don’t confuse developers.</li>\n</ul>\n<p>We will be integrating Angular Material UI components to ASP.NET Core 1.0 apps with Angular 2 using Visual Studio 2015 update 3. <em><strong>Installing TypeScript 2.0 RC is mandatory</strong></em></p>\n<blockquote>\n<p>Update October 2 - Updated to Angular Material 2 for Angular 2 final release on ASP.NET Core using webpack</p>\n</blockquote>\n<p>Steps to add Angular Material</p>\n<ol>\n<li>Angular 2 &amp; ASP.NET Core together</li>\n<li>Including Material packages in package.json</li>\n<li>Update gulpfile.js to move packages to wwwroot.</li>\n<li>Modify to systemjs.config.js to load material packages</li>\n<li>Import and use material UI components.</li>\n</ol>\n<blockquote>\n<p>August 21 2016 - Updated with Angular 2 RC5, Angular Material Alpha 7 with NgModule</p>\n</blockquote>\n<h2 id=\"Step-1-Angular-2-amp-ASP-NET-Core-together\"><a href=\"#Step-1-Angular-2-amp-ASP-NET-Core-together\" class=\"headerlink\" title=\"Step 1: Angular 2 &amp; ASP.NET Core together\"></a>Step 1: Angular 2 &amp; ASP.NET Core together</h2><p>To use Angular Material UI components we need to have Angular 2 and ASP.NET Core 1.0 running together. For this follow Getting started with <a href=\"http://www.mithunvp.com/angular-2-in-asp-net-5-typescript-visual-studio-2015/\">Angular 2 and ASP.NET Core</a> here. You can clone Github repo to start looking this implementation.</p>\n<h2 id=\"Step-2-Including-Angular-Material-packages-in-package-json\"><a href=\"#Step-2-Including-Angular-Material-packages-in-package-json\" class=\"headerlink\" title=\"Step 2: Including Angular Material packages in package.json\"></a>Step 2: Including Angular Material packages in <em>package.json</em></h2><p>All the Material packages can be installed using NPM, we need to add them to <strong>package.json</strong>.</p>\n<blockquote>\n<p>All the Material 2 UI components are group into <strong>@angular/material</strong> to make it simple</p>\n</blockquote>\n<p>Some of Material packages are button, card, checkbox, grid-list, menu etc. Read the <a href=\"https://github.com/angular/material2\" target=\"_blank\" rel=\"noopener\">full list</a> of Material components. Open the command prompt containing <strong><em>package.json</em></strong> and run below command to install Angular Material components.</p>\n<p>npm install –save @angular/material</p>\n<p>The “–save” option will update your package.json to include material components.</p>\n<h2 id=\"Step-3-Import-and-use-Material-UI-components-using-NgModule\"><a href=\"#Step-3-Import-and-use-Material-UI-components-using-NgModule\" class=\"headerlink\" title=\"Step 3: Import and use Material UI components using NgModule\"></a>Step 3: Import and use Material UI components using NgModule</h2><p>Yes !! We are almost there, now lets import Angular 2 Material components into <strong>app.module.ts</strong>. The highlighted lines in below code are added to include all components. <strong>This is so super easy now</strong></p>\n<p>import { NgModule } from ‘@angular/core’;<br>import { BrowserModule } from ‘@angular/platform-browser’;<br>import { AppComponent } from ‘./app.component’;<br>import { MaterialModule } from ‘@angular/material’;</p>\n<p>@NgModule({<br>    imports: [<br>        BrowserModule,<br>        MaterialModule.forRoot()<br>    ],<br>    declarations: [<br>        AppComponent<br>    ],<br>    bootstrap: [AppComponent]<br>})<br>export class AppModule { }</p>\n<h2 id=\"Step-4-Using-md-icon-optional\"><a href=\"#Step-4-Using-md-icon-optional\" class=\"headerlink\" title=\"Step 4: Using md-icon (optional)\"></a>Step 4: Using md-icon (optional)</h2><p>Material Design Icons can be added from Google API. Open <strong>clientsrc/index.html</strong> and add below code in <em>head</em> section</p>\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n\n<h2 id=\"Step-5-Include-UI-components-in-template-files\"><a href=\"#Step-5-Include-UI-components-in-template-files\" class=\"headerlink\" title=\"Step 5: Include UI components in template files\"></a>Step 5: Include UI components in template files</h2><p>Open <strong>app.component.html</strong> to add UI components, at present we are showing only <strong>md-button</strong>, you can play around with other components</p>\n<p></p><h4>Article is  { {title}}</h4><br><br><p></p>\n<button md-raised-button=\"\">Click Me !!</button>\n\n<p><strong>Running application</strong> Now run <strong>npm start</strong> from command line &amp; open browser, navigate localhost:3000 to see UI showing material UI components <a href=\"http://www.mithunvp.com/wp-content/uploads/2016/07/md-UI.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/07/md-UI.png\" alt=\"Angular Material\"></a>  </p>\n<blockquote>\n<p><strong> Check out the <a href=\"https://github.com/mithunvp/ng2CoreContacts\" target=\"_blank\" rel=\"noopener\">GITHUB repo</a> to play around</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Angular Material 2</strong> is a set of high-quality UI components built with Angular 2 and TypeScript, following the Material Design spec. It’s built by Angular team so that it fits in Angular 2 seamlessly. <a href=\"https://material.angular.io/\" target=\"_blank\" rel=\"noopener\">Know more</a> of it here Why Angular Material design?</p>\n<ul>\n<li>Internationalized and accessible so that all users can use them.</li>\n<li>Browser and screen reader support</li>\n<li>Code is clean and well-documented to serve as an example for Angular devs.</li>\n<li>Fully tested across IE11 and current versions of Chrome, Edge, Firefox, and Safari.</li>\n<li>Straightforward APIs that don’t confuse developers.</li>\n</ul>\n<p>We will be integrating Angular Material UI components to ASP.NET Core 1.0 apps with Angular 2 using Visual Studio 2015 update 3. <em><strong>Installing TypeScript 2.0 RC is mandatory</strong></em></p>\n<blockquote>\n<p>Update October 2 - Updated to Angular Material 2 for Angular 2 final release on ASP.NET Core using webpack</p>\n</blockquote>\n<p>Steps to add Angular Material</p>\n<ol>\n<li>Angular 2 &amp; ASP.NET Core together</li>\n<li>Including Material packages in package.json</li>\n<li>Update gulpfile.js to move packages to wwwroot.</li>\n<li>Modify to systemjs.config.js to load material packages</li>\n<li>Import and use material UI components.</li>\n</ol>\n<blockquote>\n<p>August 21 2016 - Updated with Angular 2 RC5, Angular Material Alpha 7 with NgModule</p>\n</blockquote>\n<h2 id=\"Step-1-Angular-2-amp-ASP-NET-Core-together\"><a href=\"#Step-1-Angular-2-amp-ASP-NET-Core-together\" class=\"headerlink\" title=\"Step 1: Angular 2 &amp; ASP.NET Core together\"></a>Step 1: Angular 2 &amp; ASP.NET Core together</h2><p>To use Angular Material UI components we need to have Angular 2 and ASP.NET Core 1.0 running together. For this follow Getting started with <a href=\"http://www.mithunvp.com/angular-2-in-asp-net-5-typescript-visual-studio-2015/\">Angular 2 and ASP.NET Core</a> here. You can clone Github repo to start looking this implementation.</p>\n<h2 id=\"Step-2-Including-Angular-Material-packages-in-package-json\"><a href=\"#Step-2-Including-Angular-Material-packages-in-package-json\" class=\"headerlink\" title=\"Step 2: Including Angular Material packages in package.json\"></a>Step 2: Including Angular Material packages in <em>package.json</em></h2><p>All the Material packages can be installed using NPM, we need to add them to <strong>package.json</strong>.</p>\n<blockquote>\n<p>All the Material 2 UI components are group into <strong>@angular/material</strong> to make it simple</p>\n</blockquote>\n<p>Some of Material packages are button, card, checkbox, grid-list, menu etc. Read the <a href=\"https://github.com/angular/material2\" target=\"_blank\" rel=\"noopener\">full list</a> of Material components. Open the command prompt containing <strong><em>package.json</em></strong> and run below command to install Angular Material components.</p>\n<p>npm install –save @angular/material</p>\n<p>The “–save” option will update your package.json to include material components.</p>\n<h2 id=\"Step-3-Import-and-use-Material-UI-components-using-NgModule\"><a href=\"#Step-3-Import-and-use-Material-UI-components-using-NgModule\" class=\"headerlink\" title=\"Step 3: Import and use Material UI components using NgModule\"></a>Step 3: Import and use Material UI components using NgModule</h2><p>Yes !! We are almost there, now lets import Angular 2 Material components into <strong>app.module.ts</strong>. The highlighted lines in below code are added to include all components. <strong>This is so super easy now</strong></p>\n<p>import { NgModule } from ‘@angular/core’;<br>import { BrowserModule } from ‘@angular/platform-browser’;<br>import { AppComponent } from ‘./app.component’;<br>import { MaterialModule } from ‘@angular/material’;</p>\n<p>@NgModule({<br>    imports: [<br>        BrowserModule,<br>        MaterialModule.forRoot()<br>    ],<br>    declarations: [<br>        AppComponent<br>    ],<br>    bootstrap: [AppComponent]<br>})<br>export class AppModule { }</p>\n<h2 id=\"Step-4-Using-md-icon-optional\"><a href=\"#Step-4-Using-md-icon-optional\" class=\"headerlink\" title=\"Step 4: Using md-icon (optional)\"></a>Step 4: Using md-icon (optional)</h2><p>Material Design Icons can be added from Google API. Open <strong>clientsrc/index.html</strong> and add below code in <em>head</em> section</p>\n<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n\n<h2 id=\"Step-5-Include-UI-components-in-template-files\"><a href=\"#Step-5-Include-UI-components-in-template-files\" class=\"headerlink\" title=\"Step 5: Include UI components in template files\"></a>Step 5: Include UI components in template files</h2><p>Open <strong>app.component.html</strong> to add UI components, at present we are showing only <strong>md-button</strong>, you can play around with other components</p>\n<p></p><h4>Article is  { {title}}</h4><br><br><p></p>\n<button md-raised-button=\"\">Click Me !!</button>\n\n<p><strong>Running application</strong> Now run <strong>npm start</strong> from command line &amp; open browser, navigate localhost:3000 to see UI showing material UI components <a href=\"http://www.mithunvp.com/wp-content/uploads/2016/07/md-UI.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/07/md-UI.png\" alt=\"Angular Material\"></a>  </p>\n<blockquote>\n<p><strong> Check out the <a href=\"https://github.com/mithunvp/ng2CoreContacts\" target=\"_blank\" rel=\"noopener\">GITHUB repo</a> to play around</strong></p>\n</blockquote>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Angular Material - Using with Angular 2 and ASP.NET Core 1.0","path":"angular-material-angular2-aspnet-core-visual-studio/","eyeCatchImage":null,"excerpt":null,"date":"2016-07-20T16:30:39.000Z","pv":0,"totalPV":0,"categories":"Angular 2 > ASP.NET Core 1.0","tags":["Angular2","Asp.NET Core 1.0"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Understanding Basic types in Typescript Tutorials","url":"462.html","id":"462","date":"2016-05-24T19:40:42.000Z","_content":"\nBasic types include Boolean (bool), Number, String, Array, Enum etc. in TypeScript. We will be exploring them to know that TypeScript is 'typed superset' of JavaScript.\n\nJavaScript - Optional types & its effect\n----------------------------------------\n\n*   _JavaScript is dynamically typed_; variables do not have an associated type, so no type restrictions can be applied to operations.\n*   We can assign a value of one type to a variable and later assign a value of a completely different type to the same variable (_Comment 1 in code block below)._\n*   We can perform an operation with two incompatible values and get unpredictable results (_comment 2 in code block below)._\n*   If we call a function, there is nothing to enforce that you pass arguments of the correct type and you can even supply too many or too few arguments(_comment 3, 4 in code below)._\n\nLet's see working example of this in JavaScript, I hope you have [Setup Visual Studio Code for TypeScript tutorials](http://www.mithunvp.com/typescript-tutorials-setting-visual-studio-code/). Create _basictypes.js_ file and copy below code to explore ill effects of dynamically typed JavaScript\n\n// 1\\. Assignment of different types\nvar dynamic = 'A string';\ndynamic = 52;\n\n//2\\. Operations with different types\nvar days = '7';\nvar hours = 24;\nvar week = days * hours;\n\n//3\\. 77 (concatenate 7 and 7)\nvar fortnight = days + days;\n\n\n//4.Calling functions\nfunction getVolume(width, height, depth) {\nreturn width * height * depth;\n}\n// NaN (10 * undefined * undefined)\nvar volumeA = getVolume(10);\n// 32 (the 8 is ignored)\nvar volumeB = getVolume(2, 4, 4, 8);\n\nNow just copy the above JavaScript code into TypeScript file, create \"_basictypes.ts_\".  You would see similar screen shot of it \\[caption id=\"attachment_464\" align=\"aligncenter\" width=\"1366\"\\][![basic types](http://www.mithunvp.com/wp-content/uploads/2016/05/types-check.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/types-check.png) Type Checking\\[/caption\\] With this small example of how types is checked in TypeScript, lets learn basic types in this article.\n\nBasic Types in TypeScript\n-------------------------\n\n**Boolean** This is most basic datatype which is has either TRUE or FALSE.\n\nlet isFamily: boolean = false;\n\n**Number** As in JavaScript, all numbers in TypeScript are floating point values. These floating point numbers get the type number. In addition to hexadecimal and decimal literals, TypeScript also supports binary and octal literals introduced in ECMAScript 2015.\n\nlet decimal: number = 6;\nlet hex: number = 0xf00d;\nlet binary: number = 0b1010;\nlet octal: number = 0o744;\n\n**String** There is no application, technology, language which does not deal with textual data or strings. Keyword '_**string**_' is used to represent textual data in TypeScript also. They are represented in double quotes or single quotes.\n\nlet firstName: string = \"Mithun\";\nlet lastName: string = \"VP\";\n\nThe concept of template strings, is widely used and esp in Angular 2 we can HTML written as template string in Component also. _**What is template strings**_? String which span multiple lines and have embedded expressions in them.\n\n> _Template strings_ are surrounded by the backtick/backquote (`` ` ``) character, and embedded expressions are of the form _**`${ expr }`**_.\n\nlet fullName: string = \\`Mithun VP\\`;\nlet age: number = 31;\nlet sentence: string = `Hello, my name is ${ fullName }.\n\nI'll be ${ age + 1 } years old next month.`\n\n sentence = \"Hello, my name is \" + fullName + \".\\\\n\\\\n\" +\n    \"I'll be \" + (age + 1) + \" years old next month.\"\n    \n console.log(sentence);\n\n\\[caption id=\"attachment_466\" align=\"aligncenter\" width=\"502\"\\][![basic types](http://www.mithunvp.com/wp-content/uploads/2016/05/templatestring.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/templatestring.png) Template String code & output\\[/caption\\] **Arrays** An array is simply marked with the \\[\\] notation, similar to JavaScript, and each array can be strongly typed to hold a specific type. Below code has different ways of using Arrays.\n\n//Declare array in first way\nlet list: number\\[\\] = \\[1, 2, 3\\];\n\n//Declare array in second way\nlet listNumber: Array<number> = \\[1, 2, 3\\];\n\nconsole.log(\"Array length : \" + listNumber.length);\n\n// Empty array\nvar emptyArray: any\\[\\] = new Array();\n\n//Delcare and reading array\nvar skills: string\\[\\] = \\[\"TypeScript\", \"Angular 2\", \"ASP.NET Core\"\\];\n\n// standard for loop\nfor (var i = 0; i < skills.length; i++)\n{\nconsole.log(\"Standard for loop: \" + skills\\[i\\]);\n}\n//for in loop way of reading array\nfor (var key in skills) {\n    if (skills.hasOwnProperty(key)) {\n        var element = skills\\[key\\];\n        console.log(element);        \n    }\n}\n\n**Enums** _**Enums**_ are a special type that has been borrowed from other languages such as C#, and provide a solution to the problem of special numbers. An enum associates a human-readable name for a specific number. By default, _enums_ begin numbering their members starting at `0`. You can change this by manually setting the value of one of its members or you can manually set all values in them.\n\nenum ContactType {Family, Friends, Professional};\nconsole.log(\"Automatic Enum Value assignment\");\nconsole.log(\"Family Enum Value : \" + ContactType\\[\"Family\"\\]);\nconsole.log(\"Friends Enum Value : \" + ContactType\\[\"Friends\"\\]);\nconsole.log(\"Professional Enum Value : \" + ContactType\\[\"Professional\"\\]);\n\nenum ContactManualType {Family =10, Friends, Professional};\nconsole.log(\"Semi Manual Enum Value assignment\");\nconsole.log(\"Family Enum Value : \" + ContactManualType\\[\"Family\"\\]);\nconsole.log(\"Friends Enum Value : \" + ContactManualType\\[\"Friends\"\\]);\nconsole.log(\"Professional Enum Value : \" + ContactManualType\\[\"Professional\"\\]);\n\nenum ContactTypeManualValues {Family =10, Friends=20, Professional=30};\nconsole.log(\"Fully manual Enum Value assignment\");\nconsole.log(\"Family Enum Value : \" + ContactTypeManualValues\\[\"Family\"\\]);\nconsole.log(\"Friends Enum Value : \" + ContactTypeManualValues\\[\"Friends\"\\]);\nconsole.log(\"Professional Enum Value : \" + ContactTypeManualValues\\[\"Professional\"\\]);\n\nIn next article of TypeScript Tutorials series, we will explore in detail about \"_variable declarations, scoping using var & let keywords_\"","source":"_posts/basic-types-typescript.md","raw":"---\ntitle: Understanding Basic types in Typescript Tutorials\ntags:\n  - TypeScript\nurl: 462.html\nid: 462\ncategories:\n  - TypeScript\ndate: 2016-05-25 01:10:42\n---\n\nBasic types include Boolean (bool), Number, String, Array, Enum etc. in TypeScript. We will be exploring them to know that TypeScript is 'typed superset' of JavaScript.\n\nJavaScript - Optional types & its effect\n----------------------------------------\n\n*   _JavaScript is dynamically typed_; variables do not have an associated type, so no type restrictions can be applied to operations.\n*   We can assign a value of one type to a variable and later assign a value of a completely different type to the same variable (_Comment 1 in code block below)._\n*   We can perform an operation with two incompatible values and get unpredictable results (_comment 2 in code block below)._\n*   If we call a function, there is nothing to enforce that you pass arguments of the correct type and you can even supply too many or too few arguments(_comment 3, 4 in code below)._\n\nLet's see working example of this in JavaScript, I hope you have [Setup Visual Studio Code for TypeScript tutorials](http://www.mithunvp.com/typescript-tutorials-setting-visual-studio-code/). Create _basictypes.js_ file and copy below code to explore ill effects of dynamically typed JavaScript\n\n// 1\\. Assignment of different types\nvar dynamic = 'A string';\ndynamic = 52;\n\n//2\\. Operations with different types\nvar days = '7';\nvar hours = 24;\nvar week = days * hours;\n\n//3\\. 77 (concatenate 7 and 7)\nvar fortnight = days + days;\n\n\n//4.Calling functions\nfunction getVolume(width, height, depth) {\nreturn width * height * depth;\n}\n// NaN (10 * undefined * undefined)\nvar volumeA = getVolume(10);\n// 32 (the 8 is ignored)\nvar volumeB = getVolume(2, 4, 4, 8);\n\nNow just copy the above JavaScript code into TypeScript file, create \"_basictypes.ts_\".  You would see similar screen shot of it \\[caption id=\"attachment_464\" align=\"aligncenter\" width=\"1366\"\\][![basic types](http://www.mithunvp.com/wp-content/uploads/2016/05/types-check.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/types-check.png) Type Checking\\[/caption\\] With this small example of how types is checked in TypeScript, lets learn basic types in this article.\n\nBasic Types in TypeScript\n-------------------------\n\n**Boolean** This is most basic datatype which is has either TRUE or FALSE.\n\nlet isFamily: boolean = false;\n\n**Number** As in JavaScript, all numbers in TypeScript are floating point values. These floating point numbers get the type number. In addition to hexadecimal and decimal literals, TypeScript also supports binary and octal literals introduced in ECMAScript 2015.\n\nlet decimal: number = 6;\nlet hex: number = 0xf00d;\nlet binary: number = 0b1010;\nlet octal: number = 0o744;\n\n**String** There is no application, technology, language which does not deal with textual data or strings. Keyword '_**string**_' is used to represent textual data in TypeScript also. They are represented in double quotes or single quotes.\n\nlet firstName: string = \"Mithun\";\nlet lastName: string = \"VP\";\n\nThe concept of template strings, is widely used and esp in Angular 2 we can HTML written as template string in Component also. _**What is template strings**_? String which span multiple lines and have embedded expressions in them.\n\n> _Template strings_ are surrounded by the backtick/backquote (`` ` ``) character, and embedded expressions are of the form _**`${ expr }`**_.\n\nlet fullName: string = \\`Mithun VP\\`;\nlet age: number = 31;\nlet sentence: string = `Hello, my name is ${ fullName }.\n\nI'll be ${ age + 1 } years old next month.`\n\n sentence = \"Hello, my name is \" + fullName + \".\\\\n\\\\n\" +\n    \"I'll be \" + (age + 1) + \" years old next month.\"\n    \n console.log(sentence);\n\n\\[caption id=\"attachment_466\" align=\"aligncenter\" width=\"502\"\\][![basic types](http://www.mithunvp.com/wp-content/uploads/2016/05/templatestring.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/templatestring.png) Template String code & output\\[/caption\\] **Arrays** An array is simply marked with the \\[\\] notation, similar to JavaScript, and each array can be strongly typed to hold a specific type. Below code has different ways of using Arrays.\n\n//Declare array in first way\nlet list: number\\[\\] = \\[1, 2, 3\\];\n\n//Declare array in second way\nlet listNumber: Array<number> = \\[1, 2, 3\\];\n\nconsole.log(\"Array length : \" + listNumber.length);\n\n// Empty array\nvar emptyArray: any\\[\\] = new Array();\n\n//Delcare and reading array\nvar skills: string\\[\\] = \\[\"TypeScript\", \"Angular 2\", \"ASP.NET Core\"\\];\n\n// standard for loop\nfor (var i = 0; i < skills.length; i++)\n{\nconsole.log(\"Standard for loop: \" + skills\\[i\\]);\n}\n//for in loop way of reading array\nfor (var key in skills) {\n    if (skills.hasOwnProperty(key)) {\n        var element = skills\\[key\\];\n        console.log(element);        \n    }\n}\n\n**Enums** _**Enums**_ are a special type that has been borrowed from other languages such as C#, and provide a solution to the problem of special numbers. An enum associates a human-readable name for a specific number. By default, _enums_ begin numbering their members starting at `0`. You can change this by manually setting the value of one of its members or you can manually set all values in them.\n\nenum ContactType {Family, Friends, Professional};\nconsole.log(\"Automatic Enum Value assignment\");\nconsole.log(\"Family Enum Value : \" + ContactType\\[\"Family\"\\]);\nconsole.log(\"Friends Enum Value : \" + ContactType\\[\"Friends\"\\]);\nconsole.log(\"Professional Enum Value : \" + ContactType\\[\"Professional\"\\]);\n\nenum ContactManualType {Family =10, Friends, Professional};\nconsole.log(\"Semi Manual Enum Value assignment\");\nconsole.log(\"Family Enum Value : \" + ContactManualType\\[\"Family\"\\]);\nconsole.log(\"Friends Enum Value : \" + ContactManualType\\[\"Friends\"\\]);\nconsole.log(\"Professional Enum Value : \" + ContactManualType\\[\"Professional\"\\]);\n\nenum ContactTypeManualValues {Family =10, Friends=20, Professional=30};\nconsole.log(\"Fully manual Enum Value assignment\");\nconsole.log(\"Family Enum Value : \" + ContactTypeManualValues\\[\"Family\"\\]);\nconsole.log(\"Friends Enum Value : \" + ContactTypeManualValues\\[\"Friends\"\\]);\nconsole.log(\"Professional Enum Value : \" + ContactTypeManualValues\\[\"Professional\"\\]);\n\nIn next article of TypeScript Tutorials series, we will explore in detail about \"_variable declarations, scoping using var & let keywords_\"","slug":"basic-types-typescript","published":1,"updated":"2018-07-10T19:49:06.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034vu000ms4tjvhn6k3xx","content":"<p>Basic types include Boolean (bool), Number, String, Array, Enum etc. in TypeScript. We will be exploring them to know that TypeScript is ‘typed superset’ of JavaScript.</p>\n<h2 id=\"JavaScript-Optional-types-amp-its-effect\"><a href=\"#JavaScript-Optional-types-amp-its-effect\" class=\"headerlink\" title=\"JavaScript - Optional types &amp; its effect\"></a>JavaScript - Optional types &amp; its effect</h2><ul>\n<li><em>JavaScript is dynamically typed</em>; variables do not have an associated type, so no type restrictions can be applied to operations.</li>\n<li>We can assign a value of one type to a variable and later assign a value of a completely different type to the same variable (<em>Comment 1 in code block below).</em></li>\n<li>We can perform an operation with two incompatible values and get unpredictable results (<em>comment 2 in code block below).</em></li>\n<li>If we call a function, there is nothing to enforce that you pass arguments of the correct type and you can even supply too many or too few arguments(<em>comment 3, 4 in code below).</em></li>\n</ul>\n<p>Let’s see working example of this in JavaScript, I hope you have <a href=\"http://www.mithunvp.com/typescript-tutorials-setting-visual-studio-code/\">Setup Visual Studio Code for TypeScript tutorials</a>. Create <em>basictypes.js</em> file and copy below code to explore ill effects of dynamically typed JavaScript</p>\n<p>// 1. Assignment of different types<br>var dynamic = ‘A string’;<br>dynamic = 52;</p>\n<p>//2. Operations with different types<br>var days = ‘7’;<br>var hours = 24;<br>var week = days * hours;</p>\n<p>//3. 77 (concatenate 7 and 7)<br>var fortnight = days + days;</p>\n<p>//4.Calling functions<br>function getVolume(width, height, depth) {<br>return width <em> height </em> depth;<br>}<br>// NaN (10 <em> undefined </em> undefined)<br>var volumeA = getVolume(10);<br>// 32 (the 8 is ignored)<br>var volumeB = getVolume(2, 4, 4, 8);</p>\n<p>Now just copy the above JavaScript code into TypeScript file, create “<em>basictypes.ts</em>“.  You would see similar screen shot of it [caption id=”attachment_464” align=”aligncenter” width=”1366”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/types-check.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/types-check.png\" alt=\"basic types\"></a> Type Checking[/caption] With this small example of how types is checked in TypeScript, lets learn basic types in this article.</p>\n<h2 id=\"Basic-Types-in-TypeScript\"><a href=\"#Basic-Types-in-TypeScript\" class=\"headerlink\" title=\"Basic Types in TypeScript\"></a>Basic Types in TypeScript</h2><p><strong>Boolean</strong> This is most basic datatype which is has either TRUE or FALSE.</p>\n<p>let isFamily: boolean = false;</p>\n<p><strong>Number</strong> As in JavaScript, all numbers in TypeScript are floating point values. These floating point numbers get the type number. In addition to hexadecimal and decimal literals, TypeScript also supports binary and octal literals introduced in ECMAScript 2015.</p>\n<p>let decimal: number = 6;<br>let hex: number = 0xf00d;<br>let binary: number = 0b1010;<br>let octal: number = 0o744;</p>\n<p><strong>String</strong> There is no application, technology, language which does not deal with textual data or strings. Keyword ‘<em><strong>string</strong></em>‘ is used to represent textual data in TypeScript also. They are represented in double quotes or single quotes.</p>\n<p>let firstName: string = “Mithun”;<br>let lastName: string = “VP”;</p>\n<p>The concept of template strings, is widely used and esp in Angular 2 we can HTML written as template string in Component also. <em><strong>What is template strings</strong></em>? String which span multiple lines and have embedded expressions in them.</p>\n<blockquote>\n<p><em>Template strings</em> are surrounded by the backtick/backquote (<code>`</code>) character, and embedded expressions are of the form <em><strong><code>${ expr }</code></strong></em>.</p>\n</blockquote>\n<p>let fullName: string = `Mithun VP`;<br>let age: number = 31;<br>let sentence: string = `Hello, my name is ${ fullName }.</p>\n<p>I’ll be ${ age + 1 } years old next month.`</p>\n<p> sentence = “Hello, my name is “ + fullName + “.\\n\\n” +<br>    “I’ll be “ + (age + 1) + “ years old next month.”</p>\n<p> console.log(sentence);</p>\n<p>[caption id=”attachment_466” align=”aligncenter” width=”502”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/templatestring.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/templatestring.png\" alt=\"basic types\"></a> Template String code &amp; output[/caption] <strong>Arrays</strong> An array is simply marked with the [] notation, similar to JavaScript, and each array can be strongly typed to hold a specific type. Below code has different ways of using Arrays.</p>\n<p>//Declare array in first way<br>let list: number[] = [1, 2, 3];</p>\n<p>//Declare array in second way<br>let listNumber: Array<number> = [1, 2, 3];</number></p>\n<p>console.log(“Array length : “ + listNumber.length);</p>\n<p>// Empty array<br>var emptyArray: any[] = new Array();</p>\n<p>//Delcare and reading array<br>var skills: string[] = [“TypeScript”, “Angular 2”, “ASP.NET Core”];</p>\n<p>// standard for loop<br>for (var i = 0; i &lt; skills.length; i++)<br>{<br>console.log(“Standard for loop: “ + skills[i]);<br>}<br>//for in loop way of reading array<br>for (var key in skills) {<br>    if (skills.hasOwnProperty(key)) {<br>        var element = skills[key];<br>        console.log(element);<br>    }<br>}</p>\n<p><strong>Enums</strong> <em><strong>Enums</strong></em> are a special type that has been borrowed from other languages such as C#, and provide a solution to the problem of special numbers. An enum associates a human-readable name for a specific number. By default, <em>enums</em> begin numbering their members starting at <code>0</code>. You can change this by manually setting the value of one of its members or you can manually set all values in them.</p>\n<p>enum ContactType {Family, Friends, Professional};<br>console.log(“Automatic Enum Value assignment”);<br>console.log(“Family Enum Value : “ + ContactType[“Family”]);<br>console.log(“Friends Enum Value : “ + ContactType[“Friends”]);<br>console.log(“Professional Enum Value : “ + ContactType[“Professional”]);</p>\n<p>enum ContactManualType {Family =10, Friends, Professional};<br>console.log(“Semi Manual Enum Value assignment”);<br>console.log(“Family Enum Value : “ + ContactManualType[“Family”]);<br>console.log(“Friends Enum Value : “ + ContactManualType[“Friends”]);<br>console.log(“Professional Enum Value : “ + ContactManualType[“Professional”]);</p>\n<p>enum ContactTypeManualValues {Family =10, Friends=20, Professional=30};<br>console.log(“Fully manual Enum Value assignment”);<br>console.log(“Family Enum Value : “ + ContactTypeManualValues[“Family”]);<br>console.log(“Friends Enum Value : “ + ContactTypeManualValues[“Friends”]);<br>console.log(“Professional Enum Value : “ + ContactTypeManualValues[“Professional”]);</p>\n<p>In next article of TypeScript Tutorials series, we will explore in detail about “<em>variable declarations, scoping using var &amp; let keywords</em>“</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Basic types include Boolean (bool), Number, String, Array, Enum etc. in TypeScript. We will be exploring them to know that TypeScript is ‘typed superset’ of JavaScript.</p>\n<h2 id=\"JavaScript-Optional-types-amp-its-effect\"><a href=\"#JavaScript-Optional-types-amp-its-effect\" class=\"headerlink\" title=\"JavaScript - Optional types &amp; its effect\"></a>JavaScript - Optional types &amp; its effect</h2><ul>\n<li><em>JavaScript is dynamically typed</em>; variables do not have an associated type, so no type restrictions can be applied to operations.</li>\n<li>We can assign a value of one type to a variable and later assign a value of a completely different type to the same variable (<em>Comment 1 in code block below).</em></li>\n<li>We can perform an operation with two incompatible values and get unpredictable results (<em>comment 2 in code block below).</em></li>\n<li>If we call a function, there is nothing to enforce that you pass arguments of the correct type and you can even supply too many or too few arguments(<em>comment 3, 4 in code below).</em></li>\n</ul>\n<p>Let’s see working example of this in JavaScript, I hope you have <a href=\"http://www.mithunvp.com/typescript-tutorials-setting-visual-studio-code/\">Setup Visual Studio Code for TypeScript tutorials</a>. Create <em>basictypes.js</em> file and copy below code to explore ill effects of dynamically typed JavaScript</p>\n<p>// 1. Assignment of different types<br>var dynamic = ‘A string’;<br>dynamic = 52;</p>\n<p>//2. Operations with different types<br>var days = ‘7’;<br>var hours = 24;<br>var week = days * hours;</p>\n<p>//3. 77 (concatenate 7 and 7)<br>var fortnight = days + days;</p>\n<p>//4.Calling functions<br>function getVolume(width, height, depth) {<br>return width <em> height </em> depth;<br>}<br>// NaN (10 <em> undefined </em> undefined)<br>var volumeA = getVolume(10);<br>// 32 (the 8 is ignored)<br>var volumeB = getVolume(2, 4, 4, 8);</p>\n<p>Now just copy the above JavaScript code into TypeScript file, create “<em>basictypes.ts</em>“.  You would see similar screen shot of it [caption id=”attachment_464” align=”aligncenter” width=”1366”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/types-check.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/types-check.png\" alt=\"basic types\"></a> Type Checking[/caption] With this small example of how types is checked in TypeScript, lets learn basic types in this article.</p>\n<h2 id=\"Basic-Types-in-TypeScript\"><a href=\"#Basic-Types-in-TypeScript\" class=\"headerlink\" title=\"Basic Types in TypeScript\"></a>Basic Types in TypeScript</h2><p><strong>Boolean</strong> This is most basic datatype which is has either TRUE or FALSE.</p>\n<p>let isFamily: boolean = false;</p>\n<p><strong>Number</strong> As in JavaScript, all numbers in TypeScript are floating point values. These floating point numbers get the type number. In addition to hexadecimal and decimal literals, TypeScript also supports binary and octal literals introduced in ECMAScript 2015.</p>\n<p>let decimal: number = 6;<br>let hex: number = 0xf00d;<br>let binary: number = 0b1010;<br>let octal: number = 0o744;</p>\n<p><strong>String</strong> There is no application, technology, language which does not deal with textual data or strings. Keyword ‘<em><strong>string</strong></em>‘ is used to represent textual data in TypeScript also. They are represented in double quotes or single quotes.</p>\n<p>let firstName: string = “Mithun”;<br>let lastName: string = “VP”;</p>\n<p>The concept of template strings, is widely used and esp in Angular 2 we can HTML written as template string in Component also. <em><strong>What is template strings</strong></em>? String which span multiple lines and have embedded expressions in them.</p>\n<blockquote>\n<p><em>Template strings</em> are surrounded by the backtick/backquote (<code>`</code>) character, and embedded expressions are of the form <em><strong><code>${ expr }</code></strong></em>.</p>\n</blockquote>\n<p>let fullName: string = `Mithun VP`;<br>let age: number = 31;<br>let sentence: string = `Hello, my name is ${ fullName }.</p>\n<p>I’ll be ${ age + 1 } years old next month.`</p>\n<p> sentence = “Hello, my name is “ + fullName + “.\\n\\n” +<br>    “I’ll be “ + (age + 1) + “ years old next month.”</p>\n<p> console.log(sentence);</p>\n<p>[caption id=”attachment_466” align=”aligncenter” width=”502”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/templatestring.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/templatestring.png\" alt=\"basic types\"></a> Template String code &amp; output[/caption] <strong>Arrays</strong> An array is simply marked with the [] notation, similar to JavaScript, and each array can be strongly typed to hold a specific type. Below code has different ways of using Arrays.</p>\n<p>//Declare array in first way<br>let list: number[] = [1, 2, 3];</p>\n<p>//Declare array in second way<br>let listNumber: Array<number> = [1, 2, 3];</number></p>\n<p>console.log(“Array length : “ + listNumber.length);</p>\n<p>// Empty array<br>var emptyArray: any[] = new Array();</p>\n<p>//Delcare and reading array<br>var skills: string[] = [“TypeScript”, “Angular 2”, “ASP.NET Core”];</p>\n<p>// standard for loop<br>for (var i = 0; i &lt; skills.length; i++)<br>{<br>console.log(“Standard for loop: “ + skills[i]);<br>}<br>//for in loop way of reading array<br>for (var key in skills) {<br>    if (skills.hasOwnProperty(key)) {<br>        var element = skills[key];<br>        console.log(element);<br>    }<br>}</p>\n<p><strong>Enums</strong> <em><strong>Enums</strong></em> are a special type that has been borrowed from other languages such as C#, and provide a solution to the problem of special numbers. An enum associates a human-readable name for a specific number. By default, <em>enums</em> begin numbering their members starting at <code>0</code>. You can change this by manually setting the value of one of its members or you can manually set all values in them.</p>\n<p>enum ContactType {Family, Friends, Professional};<br>console.log(“Automatic Enum Value assignment”);<br>console.log(“Family Enum Value : “ + ContactType[“Family”]);<br>console.log(“Friends Enum Value : “ + ContactType[“Friends”]);<br>console.log(“Professional Enum Value : “ + ContactType[“Professional”]);</p>\n<p>enum ContactManualType {Family =10, Friends, Professional};<br>console.log(“Semi Manual Enum Value assignment”);<br>console.log(“Family Enum Value : “ + ContactManualType[“Family”]);<br>console.log(“Friends Enum Value : “ + ContactManualType[“Friends”]);<br>console.log(“Professional Enum Value : “ + ContactManualType[“Professional”]);</p>\n<p>enum ContactTypeManualValues {Family =10, Friends=20, Professional=30};<br>console.log(“Fully manual Enum Value assignment”);<br>console.log(“Family Enum Value : “ + ContactTypeManualValues[“Family”]);<br>console.log(“Friends Enum Value : “ + ContactTypeManualValues[“Friends”]);<br>console.log(“Professional Enum Value : “ + ContactTypeManualValues[“Professional”]);</p>\n<p>In next article of TypeScript Tutorials series, we will explore in detail about “<em>variable declarations, scoping using var &amp; let keywords</em>“</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Understanding Basic types in Typescript Tutorials","path":"basic-types-typescript/","eyeCatchImage":null,"excerpt":null,"date":"2016-05-24T19:40:42.000Z","pv":0,"totalPV":0,"categories":"TypeScript","tags":["TypeScript"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Angular 2 CLI - Build Angular 2 apps using Command Line Interface","url":"414.html","id":"414","date":"2016-05-10T18:40:49.000Z","_content":"\n[**_Angular 2 CLI _**aka Command Line Interface](https://cli.angular.io/) is developed to get started quickly for building Angular 2 apps, especially when the entire community felt that setting up Angular 2 development environment was cumbersome. With introduction of Angular CLI, it's now easier than ever to create, run builds, do E2E (end to end) tests, run apps and deploy Angular 2 application. In this article, I will build a very basic Angular 2 application exclusively using CLI. So let's started. What we will learn here?\n\n1.  Installing Angular 2 CLI using NPM.\n2.  Creating an Angular 2 application using command line interface\n3.  Examine CLI created project structure.\n4.  Serve or Run Angular 2 application.\n5.  Create models and services to work with data.\n\nInstalling Angular 2 CLI using NPM\n----------------------------------\n\nEnsure you have latest **NPM** and **Node** installed on your machine. After that run this command to install Angular 2 CLI globally.\n\nnpm install -g angular-cli\n\nOR\n\nnpm install -g angular-cli@latest\n\nCreating an Angular 2 application using CLI\n-------------------------------------------\n\nWe will be creating a simple \"**OurPlanets**\" application displaying list of our solar system planets Run the below command to create new Angular 2 app. \"_OurPlanets_\" is application name, the _**--prefix**_ option tells us that \"_Planets_\" will be added as prefix for project files.\n\nng new OurPlanets --prefix Planets\n\n\\[caption id=\"attachment_541\" align=\"aligncenter\" width=\"512\"\\][![angular 2 cli](http://www.mithunvp.com/wp-content/uploads/2016/05/createCLI.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/createCLI.png) Running \"ng new \" command\\[/caption\\]\n\n1.  CLI command - **ng new** to create application\n2.  List of files created using CLI command\n3.  The newly created application is now GIT repository by default.\n4.  As the **package.json** is already created, CLI command does restore of packages. It takes few minutes to restore packages.\n\nExamine CLI created \"_OurPlanets_\" project structure in Visual Studio Code\n--------------------------------------------------------------------------\n\nOpen Visual Studio code, load this project to check out project structure got created by CLI \\[caption id=\"attachment_543\" align=\"aligncenter\" width=\"286\"\\][![Angular 2 cli](http://www.mithunvp.com/wp-content/uploads/2016/05/projstru.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/projstru.png) OurPlanets project structure\\[/caption\\]\n\n1.  \"**e2e**\" folder containing test files, configurations for performing end to end testing.\n2.  \"**node_modules**\" folder contains all packages restored as per _package.json_\n3.  \"**src/**\" folder is the main application development folder containing template HTML files, TS files, components.\n4.  \"**main.ts,** tsconfig**.**json**, index.html etc**\" are essential files needed for running application\n5.  \"_**packages.json**_\" contain essential file which contain reference to all packages needed for running Angular 2 app. See _.gitignore_ file also. Automatically \"_OurPlanets_\" application is GIT repo, which we can push it if needed.\n\nIsn't it amazing just by running \"ng new\" command of Angular 2 CLI gives us so much stuff to get started.\n\nServe or run \"OurPlanets\" Angular 2 apps\n----------------------------------------\n\nNow that we have app with all dependencies, build it and run as shown in figure.\n\nng build\n\nng serve\n\nNote: **ng build** command creates \"dist/\", a folder containing compiled, minified (if applied) Angular 2 application.\n\n> Directly running **ng serve** will start _**webpack-dev-server**_ to run application, this won't create \"**dist**\" folder.\n\nAngular CLI starts running on http://localhost:4200 and listens for any changes to reload automatically\n\nCreate Planets model and PlanetService using CLI\n------------------------------------------------\n\nAs \"_OurPlanets_\" application is about solar system planets, it's time to create model and service to get planets list and its details in form of planet.\n\n> _**Model**_ refers to class structure containing properties just like C#, Java.\n\nRun the following commands to create \"planet.model\" model class and \"planet.service\" service.\n\n//create planet model\nng generate class shared/planets model\n\n//create planet service\nng generate service shared/planets\n\nNote: class generating command lets have suffix with 'model', service generating command creates file with 'service' suffix.\n\n> CLI also generates spec TS files used for unit testing\n\nOpen _**planets.model.ts**_ file & copy below code, its really simple class with four fields.\n\nexport class Planets {\n    position: number;\n    name: string;\n    distanceFromSun: number;\n    description: string;\n}\n\nOpen _**planets.service.ts**_ file to copy below code; it imports 'planets.model', **getPlanets** method which returns list of planets data. Nothing fancy, but still good enough\n\nimport { Injectable } from '@angular/core';\nimport { Planets } from './planets.model';\n\n@Injectable()\nexport class PlanetsService {\n\n  constructor() {}\n  getPlanets(): Promise<Planets\\[\\]>{\n    return Promise.resolve(PLANETSDATA);\n  }\n}\n\nconst PLANETSDATA: Planets\\[\\] = \\[\n  {position: 1, name: 'Mercury',distanceFromSun: 58,description: '88 earth days to orbit the sun' },\n  {position: 2, name: 'Venus',distanceFromSun: 108,  description: '225 earth days to orbit the sun' },\n  {position: 3, name: 'Earth',distanceFromSun: 150,  description: '365 earth days to orbit the sun' },\n  {position: 4, name: 'Mars',distanceFromSun: 228,  description: '686 earth days to orbit the sun' },\n  {position: 5, name: 'Jupiter',distanceFromSun: 778,  description: '12 earth years to orbit the sun' },\n  {position: 6, name: 'Saturn',distanceFromSun: 886,  description: '29 earth years to orbit the sun' },\n  {position: 7, name: 'Uranus',distanceFromSun: 1800,  description: '84 earth years to orbit the sun' },\n  {position: 8, name: 'Neptune',distanceFromSun: 2800,  description: '165 earth years to orbit the sun' }\n\\];\n\nLoading Planets data on UI\n--------------------------\n\nHere we are importing **Planets** model & **PlanetsService** so that we can load data **app.component.ts**\n\nimport { Component, OnInit } from '@angular/core';\nimport { Planets, PlanetsService } from './shared';\n\n@Component({\n  selector: 'Planets-root',\n  templateUrl: './app.component.html',\n  styleUrls: \\['./app.component.css'\\]\n})\nexport class AppComponent implements OnInit {\n  planetsList: Planets\\[\\] = \\[\\];\n  constructor(\n    private _planetservice: PlanetsService) {}\n\n  ngOnInit() {\n    this._planetservice.getPlanets().then(planets => this.planetsList = planets);\n  }\n}\n\n#### app.component.html\n\n<ul>\n    <li *ngFor=\"let planet of planetsList\">{ {planet.name}}</li>    \n</ul>\n\n#### app.module.ts\n\nWe need to provide any services details while loading application in **@NgModule** _**providers**_ in app.module.ts\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { PlanetsService } from './shared';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: \\[\n    AppComponent\n  \\],\n  imports: \\[\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  \\],\n  providers: \\[PlanetsService\\],\n  bootstrap: \\[AppComponent\\]\n})\nexport class AppModule { }\n\nRun **\"ng serve\"** command & open localhost:4200 in browser to see running application \\[caption id=\"attachment_544\" align=\"aligncenter\" width=\"323\"\\][![angular 2 cli](http://www.mithunvp.com/wp-content/uploads/2016/05/runningApp.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/runningApp.png) OurPlanets running on browser\\[/caption\\]\n\nWhat's next?\n------------\n\n*   Adding [Angular Material 2](http://www.mithunvp.com/angular-material-2-angular-cli-webpack/) much easier now Angular CLI","source":"_posts/build-angular-apps-using-angular-2-cli.md","raw":"---\ntitle: Angular 2 CLI - Build Angular 2 apps using Command Line Interface\nurl: 414.html\nid: 414\ncategories:\n  - Angular 2\ndate: 2016-05-11 00:10:49\ntags:\n---\n\n[**_Angular 2 CLI _**aka Command Line Interface](https://cli.angular.io/) is developed to get started quickly for building Angular 2 apps, especially when the entire community felt that setting up Angular 2 development environment was cumbersome. With introduction of Angular CLI, it's now easier than ever to create, run builds, do E2E (end to end) tests, run apps and deploy Angular 2 application. In this article, I will build a very basic Angular 2 application exclusively using CLI. So let's started. What we will learn here?\n\n1.  Installing Angular 2 CLI using NPM.\n2.  Creating an Angular 2 application using command line interface\n3.  Examine CLI created project structure.\n4.  Serve or Run Angular 2 application.\n5.  Create models and services to work with data.\n\nInstalling Angular 2 CLI using NPM\n----------------------------------\n\nEnsure you have latest **NPM** and **Node** installed on your machine. After that run this command to install Angular 2 CLI globally.\n\nnpm install -g angular-cli\n\nOR\n\nnpm install -g angular-cli@latest\n\nCreating an Angular 2 application using CLI\n-------------------------------------------\n\nWe will be creating a simple \"**OurPlanets**\" application displaying list of our solar system planets Run the below command to create new Angular 2 app. \"_OurPlanets_\" is application name, the _**--prefix**_ option tells us that \"_Planets_\" will be added as prefix for project files.\n\nng new OurPlanets --prefix Planets\n\n\\[caption id=\"attachment_541\" align=\"aligncenter\" width=\"512\"\\][![angular 2 cli](http://www.mithunvp.com/wp-content/uploads/2016/05/createCLI.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/createCLI.png) Running \"ng new \" command\\[/caption\\]\n\n1.  CLI command - **ng new** to create application\n2.  List of files created using CLI command\n3.  The newly created application is now GIT repository by default.\n4.  As the **package.json** is already created, CLI command does restore of packages. It takes few minutes to restore packages.\n\nExamine CLI created \"_OurPlanets_\" project structure in Visual Studio Code\n--------------------------------------------------------------------------\n\nOpen Visual Studio code, load this project to check out project structure got created by CLI \\[caption id=\"attachment_543\" align=\"aligncenter\" width=\"286\"\\][![Angular 2 cli](http://www.mithunvp.com/wp-content/uploads/2016/05/projstru.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/projstru.png) OurPlanets project structure\\[/caption\\]\n\n1.  \"**e2e**\" folder containing test files, configurations for performing end to end testing.\n2.  \"**node_modules**\" folder contains all packages restored as per _package.json_\n3.  \"**src/**\" folder is the main application development folder containing template HTML files, TS files, components.\n4.  \"**main.ts,** tsconfig**.**json**, index.html etc**\" are essential files needed for running application\n5.  \"_**packages.json**_\" contain essential file which contain reference to all packages needed for running Angular 2 app. See _.gitignore_ file also. Automatically \"_OurPlanets_\" application is GIT repo, which we can push it if needed.\n\nIsn't it amazing just by running \"ng new\" command of Angular 2 CLI gives us so much stuff to get started.\n\nServe or run \"OurPlanets\" Angular 2 apps\n----------------------------------------\n\nNow that we have app with all dependencies, build it and run as shown in figure.\n\nng build\n\nng serve\n\nNote: **ng build** command creates \"dist/\", a folder containing compiled, minified (if applied) Angular 2 application.\n\n> Directly running **ng serve** will start _**webpack-dev-server**_ to run application, this won't create \"**dist**\" folder.\n\nAngular CLI starts running on http://localhost:4200 and listens for any changes to reload automatically\n\nCreate Planets model and PlanetService using CLI\n------------------------------------------------\n\nAs \"_OurPlanets_\" application is about solar system planets, it's time to create model and service to get planets list and its details in form of planet.\n\n> _**Model**_ refers to class structure containing properties just like C#, Java.\n\nRun the following commands to create \"planet.model\" model class and \"planet.service\" service.\n\n//create planet model\nng generate class shared/planets model\n\n//create planet service\nng generate service shared/planets\n\nNote: class generating command lets have suffix with 'model', service generating command creates file with 'service' suffix.\n\n> CLI also generates spec TS files used for unit testing\n\nOpen _**planets.model.ts**_ file & copy below code, its really simple class with four fields.\n\nexport class Planets {\n    position: number;\n    name: string;\n    distanceFromSun: number;\n    description: string;\n}\n\nOpen _**planets.service.ts**_ file to copy below code; it imports 'planets.model', **getPlanets** method which returns list of planets data. Nothing fancy, but still good enough\n\nimport { Injectable } from '@angular/core';\nimport { Planets } from './planets.model';\n\n@Injectable()\nexport class PlanetsService {\n\n  constructor() {}\n  getPlanets(): Promise<Planets\\[\\]>{\n    return Promise.resolve(PLANETSDATA);\n  }\n}\n\nconst PLANETSDATA: Planets\\[\\] = \\[\n  {position: 1, name: 'Mercury',distanceFromSun: 58,description: '88 earth days to orbit the sun' },\n  {position: 2, name: 'Venus',distanceFromSun: 108,  description: '225 earth days to orbit the sun' },\n  {position: 3, name: 'Earth',distanceFromSun: 150,  description: '365 earth days to orbit the sun' },\n  {position: 4, name: 'Mars',distanceFromSun: 228,  description: '686 earth days to orbit the sun' },\n  {position: 5, name: 'Jupiter',distanceFromSun: 778,  description: '12 earth years to orbit the sun' },\n  {position: 6, name: 'Saturn',distanceFromSun: 886,  description: '29 earth years to orbit the sun' },\n  {position: 7, name: 'Uranus',distanceFromSun: 1800,  description: '84 earth years to orbit the sun' },\n  {position: 8, name: 'Neptune',distanceFromSun: 2800,  description: '165 earth years to orbit the sun' }\n\\];\n\nLoading Planets data on UI\n--------------------------\n\nHere we are importing **Planets** model & **PlanetsService** so that we can load data **app.component.ts**\n\nimport { Component, OnInit } from '@angular/core';\nimport { Planets, PlanetsService } from './shared';\n\n@Component({\n  selector: 'Planets-root',\n  templateUrl: './app.component.html',\n  styleUrls: \\['./app.component.css'\\]\n})\nexport class AppComponent implements OnInit {\n  planetsList: Planets\\[\\] = \\[\\];\n  constructor(\n    private _planetservice: PlanetsService) {}\n\n  ngOnInit() {\n    this._planetservice.getPlanets().then(planets => this.planetsList = planets);\n  }\n}\n\n#### app.component.html\n\n<ul>\n    <li *ngFor=\"let planet of planetsList\">{ {planet.name}}</li>    \n</ul>\n\n#### app.module.ts\n\nWe need to provide any services details while loading application in **@NgModule** _**providers**_ in app.module.ts\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { PlanetsService } from './shared';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: \\[\n    AppComponent\n  \\],\n  imports: \\[\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  \\],\n  providers: \\[PlanetsService\\],\n  bootstrap: \\[AppComponent\\]\n})\nexport class AppModule { }\n\nRun **\"ng serve\"** command & open localhost:4200 in browser to see running application \\[caption id=\"attachment_544\" align=\"aligncenter\" width=\"323\"\\][![angular 2 cli](http://www.mithunvp.com/wp-content/uploads/2016/05/runningApp.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/runningApp.png) OurPlanets running on browser\\[/caption\\]\n\nWhat's next?\n------------\n\n*   Adding [Angular Material 2](http://www.mithunvp.com/angular-material-2-angular-cli-webpack/) much easier now Angular CLI","slug":"build-angular-apps-using-angular-2-cli","published":1,"updated":"2018-07-10T19:49:06.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034vu000os4tj8792561i","content":"<p><a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"noopener\"><strong>_Angular 2 CLI _</strong>aka Command Line Interface</a> is developed to get started quickly for building Angular 2 apps, especially when the entire community felt that setting up Angular 2 development environment was cumbersome. With introduction of Angular CLI, it’s now easier than ever to create, run builds, do E2E (end to end) tests, run apps and deploy Angular 2 application. In this article, I will build a very basic Angular 2 application exclusively using CLI. So let’s started. What we will learn here?</p>\n<ol>\n<li>Installing Angular 2 CLI using NPM.</li>\n<li>Creating an Angular 2 application using command line interface</li>\n<li>Examine CLI created project structure.</li>\n<li>Serve or Run Angular 2 application.</li>\n<li>Create models and services to work with data.</li>\n</ol>\n<h2 id=\"Installing-Angular-2-CLI-using-NPM\"><a href=\"#Installing-Angular-2-CLI-using-NPM\" class=\"headerlink\" title=\"Installing Angular 2 CLI using NPM\"></a>Installing Angular 2 CLI using NPM</h2><p>Ensure you have latest <strong>NPM</strong> and <strong>Node</strong> installed on your machine. After that run this command to install Angular 2 CLI globally.</p>\n<p>npm install -g angular-cli</p>\n<p>OR</p>\n<p>npm install -g angular-cli@latest</p>\n<h2 id=\"Creating-an-Angular-2-application-using-CLI\"><a href=\"#Creating-an-Angular-2-application-using-CLI\" class=\"headerlink\" title=\"Creating an Angular 2 application using CLI\"></a>Creating an Angular 2 application using CLI</h2><p>We will be creating a simple “<strong>OurPlanets</strong>“ application displaying list of our solar system planets Run the below command to create new Angular 2 app. “<em>OurPlanets</em>“ is application name, the <em><strong>–prefix</strong></em> option tells us that “<em>Planets</em>“ will be added as prefix for project files.</p>\n<p>ng new OurPlanets –prefix Planets</p>\n<p>[caption id=”attachment_541” align=”aligncenter” width=”512”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/createCLI.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/createCLI.png\" alt=\"angular 2 cli\"></a> Running “ng new “ command[/caption]</p>\n<ol>\n<li>CLI command - <strong>ng new</strong> to create application</li>\n<li>List of files created using CLI command</li>\n<li>The newly created application is now GIT repository by default.</li>\n<li>As the <strong>package.json</strong> is already created, CLI command does restore of packages. It takes few minutes to restore packages.</li>\n</ol>\n<h2 id=\"Examine-CLI-created-“OurPlanets“-project-structure-in-Visual-Studio-Code\"><a href=\"#Examine-CLI-created-“OurPlanets“-project-structure-in-Visual-Studio-Code\" class=\"headerlink\" title=\"Examine CLI created “OurPlanets“ project structure in Visual Studio Code\"></a>Examine CLI created “<em>OurPlanets</em>“ project structure in Visual Studio Code</h2><p>Open Visual Studio code, load this project to check out project structure got created by CLI [caption id=”attachment_543” align=”aligncenter” width=”286”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/projstru.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/projstru.png\" alt=\"Angular 2 cli\"></a> OurPlanets project structure[/caption]</p>\n<ol>\n<li>“<strong>e2e</strong>“ folder containing test files, configurations for performing end to end testing.</li>\n<li>“<strong>node_modules</strong>“ folder contains all packages restored as per <em>package.json</em></li>\n<li>“<strong>src/</strong>“ folder is the main application development folder containing template HTML files, TS files, components.</li>\n<li>“<strong>main.ts,</strong> tsconfig<strong>.</strong>json<strong>, index.html etc</strong>“ are essential files needed for running application</li>\n<li>“<em><strong>packages.json</strong></em>“ contain essential file which contain reference to all packages needed for running Angular 2 app. See <em>.gitignore</em> file also. Automatically “<em>OurPlanets</em>“ application is GIT repo, which we can push it if needed.</li>\n</ol>\n<p>Isn’t it amazing just by running “ng new” command of Angular 2 CLI gives us so much stuff to get started.</p>\n<h2 id=\"Serve-or-run-“OurPlanets”-Angular-2-apps\"><a href=\"#Serve-or-run-“OurPlanets”-Angular-2-apps\" class=\"headerlink\" title=\"Serve or run “OurPlanets” Angular 2 apps\"></a>Serve or run “OurPlanets” Angular 2 apps</h2><p>Now that we have app with all dependencies, build it and run as shown in figure.</p>\n<p>ng build</p>\n<p>ng serve</p>\n<p>Note: <strong>ng build</strong> command creates “dist/“, a folder containing compiled, minified (if applied) Angular 2 application.</p>\n<blockquote>\n<p>Directly running <strong>ng serve</strong> will start <em><strong>webpack-dev-server</strong></em> to run application, this won’t create “<strong>dist</strong>“ folder.</p>\n</blockquote>\n<p>Angular CLI starts running on <a href=\"http://localhost:4200\" target=\"_blank\" rel=\"noopener\">http://localhost:4200</a> and listens for any changes to reload automatically</p>\n<h2 id=\"Create-Planets-model-and-PlanetService-using-CLI\"><a href=\"#Create-Planets-model-and-PlanetService-using-CLI\" class=\"headerlink\" title=\"Create Planets model and PlanetService using CLI\"></a>Create Planets model and PlanetService using CLI</h2><p>As “<em>OurPlanets</em>“ application is about solar system planets, it’s time to create model and service to get planets list and its details in form of planet.</p>\n<blockquote>\n<p><em><strong>Model</strong></em> refers to class structure containing properties just like C#, Java.</p>\n</blockquote>\n<p>Run the following commands to create “planet.model” model class and “planet.service” service.</p>\n<p>//create planet model<br>ng generate class shared/planets model</p>\n<p>//create planet service<br>ng generate service shared/planets</p>\n<p>Note: class generating command lets have suffix with ‘model’, service generating command creates file with ‘service’ suffix.</p>\n<blockquote>\n<p>CLI also generates spec TS files used for unit testing</p>\n</blockquote>\n<p>Open <em><strong>planets.model.ts</strong></em> file &amp; copy below code, its really simple class with four fields.</p>\n<p>export class Planets {<br>    position: number;<br>    name: string;<br>    distanceFromSun: number;<br>    description: string;<br>}</p>\n<p>Open <em><strong>planets.service.ts</strong></em> file to copy below code; it imports ‘planets.model’, <strong>getPlanets</strong> method which returns list of planets data. Nothing fancy, but still good enough</p>\n<p>import { Injectable } from ‘@angular/core’;<br>import { Planets } from ‘./planets.model’;</p>\n<p>@Injectable()<br>export class PlanetsService {</p>\n<p>  constructor() {}<br>  getPlanets(): Promise&lt;Planets[]&gt;{<br>    return Promise.resolve(PLANETSDATA);<br>  }<br>}</p>\n<p>const PLANETSDATA: Planets[] = [<br>  {position: 1, name: ‘Mercury’,distanceFromSun: 58,description: ‘88 earth days to orbit the sun’ },<br>  {position: 2, name: ‘Venus’,distanceFromSun: 108,  description: ‘225 earth days to orbit the sun’ },<br>  {position: 3, name: ‘Earth’,distanceFromSun: 150,  description: ‘365 earth days to orbit the sun’ },<br>  {position: 4, name: ‘Mars’,distanceFromSun: 228,  description: ‘686 earth days to orbit the sun’ },<br>  {position: 5, name: ‘Jupiter’,distanceFromSun: 778,  description: ‘12 earth years to orbit the sun’ },<br>  {position: 6, name: ‘Saturn’,distanceFromSun: 886,  description: ‘29 earth years to orbit the sun’ },<br>  {position: 7, name: ‘Uranus’,distanceFromSun: 1800,  description: ‘84 earth years to orbit the sun’ },<br>  {position: 8, name: ‘Neptune’,distanceFromSun: 2800,  description: ‘165 earth years to orbit the sun’ }<br>];</p>\n<h2 id=\"Loading-Planets-data-on-UI\"><a href=\"#Loading-Planets-data-on-UI\" class=\"headerlink\" title=\"Loading Planets data on UI\"></a>Loading Planets data on UI</h2><p>Here we are importing <strong>Planets</strong> model &amp; <strong>PlanetsService</strong> so that we can load data <strong>app.component.ts</strong></p>\n<p>import { Component, OnInit } from ‘@angular/core’;<br>import { Planets, PlanetsService } from ‘./shared’;</p>\n<p>@Component({<br>  selector: ‘Planets-root’,<br>  templateUrl: ‘./app.component.html’,<br>  styleUrls: [‘./app.component.css’]<br>})<br>export class AppComponent implements OnInit {<br>  planetsList: Planets[] = [];<br>  constructor(<br>    private _planetservice: PlanetsService) {}</p>\n<p>  ngOnInit() {<br>    this._planetservice.getPlanets().then(planets =&gt; this.planetsList = planets);<br>  }<br>}</p>\n<h4 id=\"app-component-html\"><a href=\"#app-component-html\" class=\"headerlink\" title=\"app.component.html\"></a>app.component.html</h4><ul><br>    <li *ngfor=\"let planet of planetsList\">{ {planet.name}}</li><br></ul>\n\n<h4 id=\"app-module-ts\"><a href=\"#app-module-ts\" class=\"headerlink\" title=\"app.module.ts\"></a>app.module.ts</h4><p>We need to provide any services details while loading application in <strong>@NgModule</strong> <em><strong>providers</strong></em> in app.module.ts</p>\n<p>import { BrowserModule } from ‘@angular/platform-browser’;<br>import { NgModule } from ‘@angular/core’;<br>import { FormsModule } from ‘@angular/forms’;<br>import { HttpModule } from ‘@angular/http’;<br>import { PlanetsService } from ‘./shared’;</p>\n<p>import { AppComponent } from ‘./app.component’;</p>\n<p>@NgModule({<br>  declarations: [<br>    AppComponent<br>  ],<br>  imports: [<br>    BrowserModule,<br>    FormsModule,<br>    HttpModule<br>  ],<br>  providers: [PlanetsService],<br>  bootstrap: [AppComponent]<br>})<br>export class AppModule { }</p>\n<p>Run <strong>“ng serve”</strong> command &amp; open localhost:4200 in browser to see running application [caption id=”attachment_544” align=”aligncenter” width=”323”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/runningApp.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/runningApp.png\" alt=\"angular 2 cli\"></a> OurPlanets running on browser[/caption]</p>\n<h2 id=\"What’s-next\"><a href=\"#What’s-next\" class=\"headerlink\" title=\"What’s next?\"></a>What’s next?</h2><ul>\n<li>Adding <a href=\"http://www.mithunvp.com/angular-material-2-angular-cli-webpack/\">Angular Material 2</a> much easier now Angular CLI</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"noopener\"><strong>_Angular 2 CLI _</strong>aka Command Line Interface</a> is developed to get started quickly for building Angular 2 apps, especially when the entire community felt that setting up Angular 2 development environment was cumbersome. With introduction of Angular CLI, it’s now easier than ever to create, run builds, do E2E (end to end) tests, run apps and deploy Angular 2 application. In this article, I will build a very basic Angular 2 application exclusively using CLI. So let’s started. What we will learn here?</p>\n<ol>\n<li>Installing Angular 2 CLI using NPM.</li>\n<li>Creating an Angular 2 application using command line interface</li>\n<li>Examine CLI created project structure.</li>\n<li>Serve or Run Angular 2 application.</li>\n<li>Create models and services to work with data.</li>\n</ol>\n<h2 id=\"Installing-Angular-2-CLI-using-NPM\"><a href=\"#Installing-Angular-2-CLI-using-NPM\" class=\"headerlink\" title=\"Installing Angular 2 CLI using NPM\"></a>Installing Angular 2 CLI using NPM</h2><p>Ensure you have latest <strong>NPM</strong> and <strong>Node</strong> installed on your machine. After that run this command to install Angular 2 CLI globally.</p>\n<p>npm install -g angular-cli</p>\n<p>OR</p>\n<p>npm install -g angular-cli@latest</p>\n<h2 id=\"Creating-an-Angular-2-application-using-CLI\"><a href=\"#Creating-an-Angular-2-application-using-CLI\" class=\"headerlink\" title=\"Creating an Angular 2 application using CLI\"></a>Creating an Angular 2 application using CLI</h2><p>We will be creating a simple “<strong>OurPlanets</strong>“ application displaying list of our solar system planets Run the below command to create new Angular 2 app. “<em>OurPlanets</em>“ is application name, the <em><strong>–prefix</strong></em> option tells us that “<em>Planets</em>“ will be added as prefix for project files.</p>\n<p>ng new OurPlanets –prefix Planets</p>\n<p>[caption id=”attachment_541” align=”aligncenter” width=”512”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/createCLI.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/createCLI.png\" alt=\"angular 2 cli\"></a> Running “ng new “ command[/caption]</p>\n<ol>\n<li>CLI command - <strong>ng new</strong> to create application</li>\n<li>List of files created using CLI command</li>\n<li>The newly created application is now GIT repository by default.</li>\n<li>As the <strong>package.json</strong> is already created, CLI command does restore of packages. It takes few minutes to restore packages.</li>\n</ol>\n<h2 id=\"Examine-CLI-created-“OurPlanets“-project-structure-in-Visual-Studio-Code\"><a href=\"#Examine-CLI-created-“OurPlanets“-project-structure-in-Visual-Studio-Code\" class=\"headerlink\" title=\"Examine CLI created “OurPlanets“ project structure in Visual Studio Code\"></a>Examine CLI created “<em>OurPlanets</em>“ project structure in Visual Studio Code</h2><p>Open Visual Studio code, load this project to check out project structure got created by CLI [caption id=”attachment_543” align=”aligncenter” width=”286”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/projstru.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/projstru.png\" alt=\"Angular 2 cli\"></a> OurPlanets project structure[/caption]</p>\n<ol>\n<li>“<strong>e2e</strong>“ folder containing test files, configurations for performing end to end testing.</li>\n<li>“<strong>node_modules</strong>“ folder contains all packages restored as per <em>package.json</em></li>\n<li>“<strong>src/</strong>“ folder is the main application development folder containing template HTML files, TS files, components.</li>\n<li>“<strong>main.ts,</strong> tsconfig<strong>.</strong>json<strong>, index.html etc</strong>“ are essential files needed for running application</li>\n<li>“<em><strong>packages.json</strong></em>“ contain essential file which contain reference to all packages needed for running Angular 2 app. See <em>.gitignore</em> file also. Automatically “<em>OurPlanets</em>“ application is GIT repo, which we can push it if needed.</li>\n</ol>\n<p>Isn’t it amazing just by running “ng new” command of Angular 2 CLI gives us so much stuff to get started.</p>\n<h2 id=\"Serve-or-run-“OurPlanets”-Angular-2-apps\"><a href=\"#Serve-or-run-“OurPlanets”-Angular-2-apps\" class=\"headerlink\" title=\"Serve or run “OurPlanets” Angular 2 apps\"></a>Serve or run “OurPlanets” Angular 2 apps</h2><p>Now that we have app with all dependencies, build it and run as shown in figure.</p>\n<p>ng build</p>\n<p>ng serve</p>\n<p>Note: <strong>ng build</strong> command creates “dist/“, a folder containing compiled, minified (if applied) Angular 2 application.</p>\n<blockquote>\n<p>Directly running <strong>ng serve</strong> will start <em><strong>webpack-dev-server</strong></em> to run application, this won’t create “<strong>dist</strong>“ folder.</p>\n</blockquote>\n<p>Angular CLI starts running on <a href=\"http://localhost:4200\" target=\"_blank\" rel=\"noopener\">http://localhost:4200</a> and listens for any changes to reload automatically</p>\n<h2 id=\"Create-Planets-model-and-PlanetService-using-CLI\"><a href=\"#Create-Planets-model-and-PlanetService-using-CLI\" class=\"headerlink\" title=\"Create Planets model and PlanetService using CLI\"></a>Create Planets model and PlanetService using CLI</h2><p>As “<em>OurPlanets</em>“ application is about solar system planets, it’s time to create model and service to get planets list and its details in form of planet.</p>\n<blockquote>\n<p><em><strong>Model</strong></em> refers to class structure containing properties just like C#, Java.</p>\n</blockquote>\n<p>Run the following commands to create “planet.model” model class and “planet.service” service.</p>\n<p>//create planet model<br>ng generate class shared/planets model</p>\n<p>//create planet service<br>ng generate service shared/planets</p>\n<p>Note: class generating command lets have suffix with ‘model’, service generating command creates file with ‘service’ suffix.</p>\n<blockquote>\n<p>CLI also generates spec TS files used for unit testing</p>\n</blockquote>\n<p>Open <em><strong>planets.model.ts</strong></em> file &amp; copy below code, its really simple class with four fields.</p>\n<p>export class Planets {<br>    position: number;<br>    name: string;<br>    distanceFromSun: number;<br>    description: string;<br>}</p>\n<p>Open <em><strong>planets.service.ts</strong></em> file to copy below code; it imports ‘planets.model’, <strong>getPlanets</strong> method which returns list of planets data. Nothing fancy, but still good enough</p>\n<p>import { Injectable } from ‘@angular/core’;<br>import { Planets } from ‘./planets.model’;</p>\n<p>@Injectable()<br>export class PlanetsService {</p>\n<p>  constructor() {}<br>  getPlanets(): Promise&lt;Planets[]&gt;{<br>    return Promise.resolve(PLANETSDATA);<br>  }<br>}</p>\n<p>const PLANETSDATA: Planets[] = [<br>  {position: 1, name: ‘Mercury’,distanceFromSun: 58,description: ‘88 earth days to orbit the sun’ },<br>  {position: 2, name: ‘Venus’,distanceFromSun: 108,  description: ‘225 earth days to orbit the sun’ },<br>  {position: 3, name: ‘Earth’,distanceFromSun: 150,  description: ‘365 earth days to orbit the sun’ },<br>  {position: 4, name: ‘Mars’,distanceFromSun: 228,  description: ‘686 earth days to orbit the sun’ },<br>  {position: 5, name: ‘Jupiter’,distanceFromSun: 778,  description: ‘12 earth years to orbit the sun’ },<br>  {position: 6, name: ‘Saturn’,distanceFromSun: 886,  description: ‘29 earth years to orbit the sun’ },<br>  {position: 7, name: ‘Uranus’,distanceFromSun: 1800,  description: ‘84 earth years to orbit the sun’ },<br>  {position: 8, name: ‘Neptune’,distanceFromSun: 2800,  description: ‘165 earth years to orbit the sun’ }<br>];</p>\n<h2 id=\"Loading-Planets-data-on-UI\"><a href=\"#Loading-Planets-data-on-UI\" class=\"headerlink\" title=\"Loading Planets data on UI\"></a>Loading Planets data on UI</h2><p>Here we are importing <strong>Planets</strong> model &amp; <strong>PlanetsService</strong> so that we can load data <strong>app.component.ts</strong></p>\n<p>import { Component, OnInit } from ‘@angular/core’;<br>import { Planets, PlanetsService } from ‘./shared’;</p>\n<p>@Component({<br>  selector: ‘Planets-root’,<br>  templateUrl: ‘./app.component.html’,<br>  styleUrls: [‘./app.component.css’]<br>})<br>export class AppComponent implements OnInit {<br>  planetsList: Planets[] = [];<br>  constructor(<br>    private _planetservice: PlanetsService) {}</p>\n<p>  ngOnInit() {<br>    this._planetservice.getPlanets().then(planets =&gt; this.planetsList = planets);<br>  }<br>}</p>\n<h4 id=\"app-component-html\"><a href=\"#app-component-html\" class=\"headerlink\" title=\"app.component.html\"></a>app.component.html</h4><ul><br>    <li *ngfor=\"let planet of planetsList\">{ {planet.name}}</li><br></ul>\n\n<h4 id=\"app-module-ts\"><a href=\"#app-module-ts\" class=\"headerlink\" title=\"app.module.ts\"></a>app.module.ts</h4><p>We need to provide any services details while loading application in <strong>@NgModule</strong> <em><strong>providers</strong></em> in app.module.ts</p>\n<p>import { BrowserModule } from ‘@angular/platform-browser’;<br>import { NgModule } from ‘@angular/core’;<br>import { FormsModule } from ‘@angular/forms’;<br>import { HttpModule } from ‘@angular/http’;<br>import { PlanetsService } from ‘./shared’;</p>\n<p>import { AppComponent } from ‘./app.component’;</p>\n<p>@NgModule({<br>  declarations: [<br>    AppComponent<br>  ],<br>  imports: [<br>    BrowserModule,<br>    FormsModule,<br>    HttpModule<br>  ],<br>  providers: [PlanetsService],<br>  bootstrap: [AppComponent]<br>})<br>export class AppModule { }</p>\n<p>Run <strong>“ng serve”</strong> command &amp; open localhost:4200 in browser to see running application [caption id=”attachment_544” align=”aligncenter” width=”323”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/runningApp.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/runningApp.png\" alt=\"angular 2 cli\"></a> OurPlanets running on browser[/caption]</p>\n<h2 id=\"What’s-next\"><a href=\"#What’s-next\" class=\"headerlink\" title=\"What’s next?\"></a>What’s next?</h2><ul>\n<li>Adding <a href=\"http://www.mithunvp.com/angular-material-2-angular-cli-webpack/\">Angular Material 2</a> much easier now Angular CLI</li>\n</ul>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Angular 2 CLI - Build Angular 2 apps using Command Line Interface","path":"build-angular-apps-using-angular-2-cli/","eyeCatchImage":null,"excerpt":null,"date":"2016-05-10T18:40:49.000Z","pv":0,"totalPV":0,"categories":"Angular 2","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Building ASP.NET Core MVC as SPA using Angular 2 and TypeScript","url":"579.html","id":"579","date":"2016-10-27T14:47:19.000Z","_content":"\n**ASP.NET Core** as MVC application is completely modular, seamlessly integrate with various JavaScript based frameworks like Angular 2, Angular 1.*, React, Knockout, JQuery etc. In this article we will learn how to build ASP.NET Core MVC as a Single Page Application (SPA) using latest Angular 2. When working with Angular 2 and ASP.NET Core, we should consider these points\n\n*   Angular 2 build strategy to be used i.e. Gulp, Webpack, Rollup. The usage of Webpack is optimal approach for build mechanism.\n*   Using ASP.NET Core tag helpers features also.\n*   Simpler approach to include 3 party libraries\n*   Working in development or production mode with ease.\n\n> These steps can be followed on Windows OS, Linux or Mac OS machines\n\nMicrosoft ASP.NET team have built up excellent infrastructure known as [JavaScriptServices](https://github.com/aspnet/JavaScriptServices) for building SPA based applications. At present they provide Angular 2/ React/ Knockout infrastructure. Lets get started then\n\nStep 1 - Software prerequisites\n-------------------------------\n\nThe following software needs to be installed\n\n*   Visual Studio Code - Light weight cross platform editor\n*   Install ASP.NET and [.NET Core SDK](https://www.microsoft.com/net/core) appropriate for OS\n*   Latest NodeJS and NPM.\n*   Install Visual Studio 2015 Update 3 (optional step). For die hard fan of VS IDE, we can use it too.\n\nWe will be using **Yeoman** generators for scaffolding applications. The project template for ASP.NET Core SPA needs to be installed too **generator-aspnetcore-spa**. Run below command to install them\n\nnpm install -g yo generator-aspnetcore-spa\n\nStep 2 - Creating ASP.NET Core SPA app with Angular 2\n-----------------------------------------------------\n\nNow lets create the SPA application using yeoman generator. Give a name to application and select \"Angular 2\" application in options. It's command line way of creating applications After creating ASP.NET Core MVC application, all the NPM packages are installed automatically. It takes few minutes to install all NPM packages.\n\n> Run **dotnet restore** from CLI to ensure all ASP.NET NuGet packages are installed\n\nStep 3 - Understanding the project structure\n--------------------------------------------\n\nThe generator has created ASP.NET Core MVC application in form SPA with Angular 2, this means we already have MVC application baked with Angular 2 application. Isn't it wonderful, lets understand project structure that is created. \\[caption id=\"attachment_581\" align=\"aligncenter\" width=\"330\"\\][![asp.net core](http://www.mithunvp.com/wp-content/uploads/2016/10/2016-10-25_154243.png)](http://www.mithunvp.com/wp-content/uploads/2016/10/2016-10-25_154243.png) Project Structure of MVC SPA with Angular 2\\[/caption\\]\n\n1.  **ClientApp** is an Angular 2 applications with modules, components, templates, Routing etc. Any further Angular 2 development code should be written here.\n2.  **Controllers** is folder containing ASP.NET Core controllers. Both MVC and Web API controller can be written here.\n3.  **node_modules** contains all the NPM packages installed. **Package.json** contains list of NPM packages needed to work with Angular 2, other technologies like bootstrap, JQuery etc. As soon as project gets created from yeoman, scripts are run from **project.json**\n4.  **Views** folder contains the MVC Razor HTML files like Layout, Error etc. This shows that we are using ASP.NET Core MVC application.\n5.  **dist** compiled folder containing Angular 2 main application, vendor files. It's placed in **wwwroot** folder as its web root folder.\n6.  **package.json** and **project.json** are the essential files for Angular 2 and ASP.NET Core apps. They contain all the dependencies, tooling, build information.\n7.  **webpack configuration files** does the module bundling tasks. For Angular 2 to load, prepare bundles based on vendor files, app related files, minify when in prod are all performed using webpack configuration.\n\nStep 4 - Two ways of running the app\n------------------------------------\n\nThis application can be run either in _**CLI mode**_ or using **_Visual Studio Code_** launch settings.\n\n**Run using CLI mode**\n\nWe need to run the command **dotnet run** from the CLI to start the application. It starts application, listens on localhost 5000 port. Open browser, navigate http://localhost:5000 to see the application in action.\n\nWhen running using CLI, the application run in PROD and even Angular 2 app runs in PROD mode. However you can change it to run under Development mode too.\n\n**Run using VS Code**\n\nWhen you open application in VS Code, you will see following warning that required assets needs to created. Click **Yes**.\n\n[![asp.net core](http://www.mithunvp.com/wp-content/uploads/2016/10/required-asset.png)](http://www.mithunvp.com/wp-content/uploads/2016/10/required-asset.png)\n\nClick Yes will create **.vscode** folder containing two JSON files **launch.json** and **tasks.json**. They have predefined code for running application.\n\nOpening _launch.json_, read through _**.NET Core Launch (web)**_ configuration. It contains necessary config entries so that it can run on any OS. Also env variable **ASPNETCORE_ENVIRONMENT** is Development.\n\nJust pressing the **F5** the application starts running, open browser automatically, reloads on file changes and most important run in DEVELOPMENT mode.\n\nThis is how the application looks like when run using either CLI or VS Code. It's different from the usual ASP.NET web application because this more focused for being SPA. \\[caption id=\"attachment_584\" align=\"aligncenter\" width=\"776\"\\][![asp.net core](http://www.mithunvp.com/wp-content/uploads/2016/10/runningapp.png)](http://www.mithunvp.com/wp-content/uploads/2016/10/runningapp.png) Application running in browser\\[/caption\\]\n\nWhat's so special about using JavaScript services?\n==================================================\n\nPersonally I liked the way Angular 2 and ASP.NET Core are used together here, because\n\n*   Developed from Microsoft ASP.NET team. Its constantly updated with framework changes.\n*   Uses webpack for module bundling, soon webpack 2 will make this light weight.\n*   Very simple way to tweak to run for DEV or PROD mode.\n*   It also uses Angular Universal for server side rendering of Angular 2 application. This helps load apps much faster.\n*   Super simple integration with third party JS libraries using Vendor packaging.\n*   Inbuilt Docker support, makes deployment easy on docker containers.\n*   Hot Module replacement supported when application run in development.\n*   We can write Web API in the same project to access data, in turn displayed on Angular 2 apps\n\nSo far I have integrated Angular 2 in ASP.NET (MVC 5 and Core) in different ways but this is most elegant way. **Hello Readers, let me know in comments if detailed code walk through needed.**","source":"_posts/building-asp-net-core-mvc-angular2-visual-studio.md","raw":"---\ntitle: Building ASP.NET Core MVC as SPA using Angular 2 and TypeScript\ntags:\n  - Angular2\n  - Asp.NET Core 1.0\nurl: 579.html\nid: 579\ncategories:\n  - Angular 2\n  - ASP.NET Core 1.0\ndate: 2016-10-27 20:17:19\n---\n\n**ASP.NET Core** as MVC application is completely modular, seamlessly integrate with various JavaScript based frameworks like Angular 2, Angular 1.*, React, Knockout, JQuery etc. In this article we will learn how to build ASP.NET Core MVC as a Single Page Application (SPA) using latest Angular 2. When working with Angular 2 and ASP.NET Core, we should consider these points\n\n*   Angular 2 build strategy to be used i.e. Gulp, Webpack, Rollup. The usage of Webpack is optimal approach for build mechanism.\n*   Using ASP.NET Core tag helpers features also.\n*   Simpler approach to include 3 party libraries\n*   Working in development or production mode with ease.\n\n> These steps can be followed on Windows OS, Linux or Mac OS machines\n\nMicrosoft ASP.NET team have built up excellent infrastructure known as [JavaScriptServices](https://github.com/aspnet/JavaScriptServices) for building SPA based applications. At present they provide Angular 2/ React/ Knockout infrastructure. Lets get started then\n\nStep 1 - Software prerequisites\n-------------------------------\n\nThe following software needs to be installed\n\n*   Visual Studio Code - Light weight cross platform editor\n*   Install ASP.NET and [.NET Core SDK](https://www.microsoft.com/net/core) appropriate for OS\n*   Latest NodeJS and NPM.\n*   Install Visual Studio 2015 Update 3 (optional step). For die hard fan of VS IDE, we can use it too.\n\nWe will be using **Yeoman** generators for scaffolding applications. The project template for ASP.NET Core SPA needs to be installed too **generator-aspnetcore-spa**. Run below command to install them\n\nnpm install -g yo generator-aspnetcore-spa\n\nStep 2 - Creating ASP.NET Core SPA app with Angular 2\n-----------------------------------------------------\n\nNow lets create the SPA application using yeoman generator. Give a name to application and select \"Angular 2\" application in options. It's command line way of creating applications After creating ASP.NET Core MVC application, all the NPM packages are installed automatically. It takes few minutes to install all NPM packages.\n\n> Run **dotnet restore** from CLI to ensure all ASP.NET NuGet packages are installed\n\nStep 3 - Understanding the project structure\n--------------------------------------------\n\nThe generator has created ASP.NET Core MVC application in form SPA with Angular 2, this means we already have MVC application baked with Angular 2 application. Isn't it wonderful, lets understand project structure that is created. \\[caption id=\"attachment_581\" align=\"aligncenter\" width=\"330\"\\][![asp.net core](http://www.mithunvp.com/wp-content/uploads/2016/10/2016-10-25_154243.png)](http://www.mithunvp.com/wp-content/uploads/2016/10/2016-10-25_154243.png) Project Structure of MVC SPA with Angular 2\\[/caption\\]\n\n1.  **ClientApp** is an Angular 2 applications with modules, components, templates, Routing etc. Any further Angular 2 development code should be written here.\n2.  **Controllers** is folder containing ASP.NET Core controllers. Both MVC and Web API controller can be written here.\n3.  **node_modules** contains all the NPM packages installed. **Package.json** contains list of NPM packages needed to work with Angular 2, other technologies like bootstrap, JQuery etc. As soon as project gets created from yeoman, scripts are run from **project.json**\n4.  **Views** folder contains the MVC Razor HTML files like Layout, Error etc. This shows that we are using ASP.NET Core MVC application.\n5.  **dist** compiled folder containing Angular 2 main application, vendor files. It's placed in **wwwroot** folder as its web root folder.\n6.  **package.json** and **project.json** are the essential files for Angular 2 and ASP.NET Core apps. They contain all the dependencies, tooling, build information.\n7.  **webpack configuration files** does the module bundling tasks. For Angular 2 to load, prepare bundles based on vendor files, app related files, minify when in prod are all performed using webpack configuration.\n\nStep 4 - Two ways of running the app\n------------------------------------\n\nThis application can be run either in _**CLI mode**_ or using **_Visual Studio Code_** launch settings.\n\n**Run using CLI mode**\n\nWe need to run the command **dotnet run** from the CLI to start the application. It starts application, listens on localhost 5000 port. Open browser, navigate http://localhost:5000 to see the application in action.\n\nWhen running using CLI, the application run in PROD and even Angular 2 app runs in PROD mode. However you can change it to run under Development mode too.\n\n**Run using VS Code**\n\nWhen you open application in VS Code, you will see following warning that required assets needs to created. Click **Yes**.\n\n[![asp.net core](http://www.mithunvp.com/wp-content/uploads/2016/10/required-asset.png)](http://www.mithunvp.com/wp-content/uploads/2016/10/required-asset.png)\n\nClick Yes will create **.vscode** folder containing two JSON files **launch.json** and **tasks.json**. They have predefined code for running application.\n\nOpening _launch.json_, read through _**.NET Core Launch (web)**_ configuration. It contains necessary config entries so that it can run on any OS. Also env variable **ASPNETCORE_ENVIRONMENT** is Development.\n\nJust pressing the **F5** the application starts running, open browser automatically, reloads on file changes and most important run in DEVELOPMENT mode.\n\nThis is how the application looks like when run using either CLI or VS Code. It's different from the usual ASP.NET web application because this more focused for being SPA. \\[caption id=\"attachment_584\" align=\"aligncenter\" width=\"776\"\\][![asp.net core](http://www.mithunvp.com/wp-content/uploads/2016/10/runningapp.png)](http://www.mithunvp.com/wp-content/uploads/2016/10/runningapp.png) Application running in browser\\[/caption\\]\n\nWhat's so special about using JavaScript services?\n==================================================\n\nPersonally I liked the way Angular 2 and ASP.NET Core are used together here, because\n\n*   Developed from Microsoft ASP.NET team. Its constantly updated with framework changes.\n*   Uses webpack for module bundling, soon webpack 2 will make this light weight.\n*   Very simple way to tweak to run for DEV or PROD mode.\n*   It also uses Angular Universal for server side rendering of Angular 2 application. This helps load apps much faster.\n*   Super simple integration with third party JS libraries using Vendor packaging.\n*   Inbuilt Docker support, makes deployment easy on docker containers.\n*   Hot Module replacement supported when application run in development.\n*   We can write Web API in the same project to access data, in turn displayed on Angular 2 apps\n\nSo far I have integrated Angular 2 in ASP.NET (MVC 5 and Core) in different ways but this is most elegant way. **Hello Readers, let me know in comments if detailed code walk through needed.**","slug":"building-asp-net-core-mvc-angular2-visual-studio","published":1,"updated":"2018-07-10T19:49:06.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034wa000ss4tjzg3d4gxm","content":"<p><strong>ASP.NET Core</strong> as MVC application is completely modular, seamlessly integrate with various JavaScript based frameworks like Angular 2, Angular 1.*, React, Knockout, JQuery etc. In this article we will learn how to build ASP.NET Core MVC as a Single Page Application (SPA) using latest Angular 2. When working with Angular 2 and ASP.NET Core, we should consider these points</p>\n<ul>\n<li>Angular 2 build strategy to be used i.e. Gulp, Webpack, Rollup. The usage of Webpack is optimal approach for build mechanism.</li>\n<li>Using ASP.NET Core tag helpers features also.</li>\n<li>Simpler approach to include 3 party libraries</li>\n<li>Working in development or production mode with ease.</li>\n</ul>\n<blockquote>\n<p>These steps can be followed on Windows OS, Linux or Mac OS machines</p>\n</blockquote>\n<p>Microsoft ASP.NET team have built up excellent infrastructure known as <a href=\"https://github.com/aspnet/JavaScriptServices\" target=\"_blank\" rel=\"noopener\">JavaScriptServices</a> for building SPA based applications. At present they provide Angular 2/ React/ Knockout infrastructure. Lets get started then</p>\n<h2 id=\"Step-1-Software-prerequisites\"><a href=\"#Step-1-Software-prerequisites\" class=\"headerlink\" title=\"Step 1 - Software prerequisites\"></a>Step 1 - Software prerequisites</h2><p>The following software needs to be installed</p>\n<ul>\n<li>Visual Studio Code - Light weight cross platform editor</li>\n<li>Install ASP.NET and <a href=\"https://www.microsoft.com/net/core\" target=\"_blank\" rel=\"noopener\">.NET Core SDK</a> appropriate for OS</li>\n<li>Latest NodeJS and NPM.</li>\n<li>Install Visual Studio 2015 Update 3 (optional step). For die hard fan of VS IDE, we can use it too.</li>\n</ul>\n<p>We will be using <strong>Yeoman</strong> generators for scaffolding applications. The project template for ASP.NET Core SPA needs to be installed too <strong>generator-aspnetcore-spa</strong>. Run below command to install them</p>\n<p>npm install -g yo generator-aspnetcore-spa</p>\n<h2 id=\"Step-2-Creating-ASP-NET-Core-SPA-app-with-Angular-2\"><a href=\"#Step-2-Creating-ASP-NET-Core-SPA-app-with-Angular-2\" class=\"headerlink\" title=\"Step 2 - Creating ASP.NET Core SPA app with Angular 2\"></a>Step 2 - Creating ASP.NET Core SPA app with Angular 2</h2><p>Now lets create the SPA application using yeoman generator. Give a name to application and select “Angular 2” application in options. It’s command line way of creating applications After creating ASP.NET Core MVC application, all the NPM packages are installed automatically. It takes few minutes to install all NPM packages.</p>\n<blockquote>\n<p>Run <strong>dotnet restore</strong> from CLI to ensure all ASP.NET NuGet packages are installed</p>\n</blockquote>\n<h2 id=\"Step-3-Understanding-the-project-structure\"><a href=\"#Step-3-Understanding-the-project-structure\" class=\"headerlink\" title=\"Step 3 - Understanding the project structure\"></a>Step 3 - Understanding the project structure</h2><p>The generator has created ASP.NET Core MVC application in form SPA with Angular 2, this means we already have MVC application baked with Angular 2 application. Isn’t it wonderful, lets understand project structure that is created. [caption id=”attachment_581” align=”aligncenter” width=”330”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/10/2016-10-25_154243.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/10/2016-10-25_154243.png\" alt=\"asp.net core\"></a> Project Structure of MVC SPA with Angular 2[/caption]</p>\n<ol>\n<li><strong>ClientApp</strong> is an Angular 2 applications with modules, components, templates, Routing etc. Any further Angular 2 development code should be written here.</li>\n<li><strong>Controllers</strong> is folder containing ASP.NET Core controllers. Both MVC and Web API controller can be written here.</li>\n<li><strong>node_modules</strong> contains all the NPM packages installed. <strong>Package.json</strong> contains list of NPM packages needed to work with Angular 2, other technologies like bootstrap, JQuery etc. As soon as project gets created from yeoman, scripts are run from <strong>project.json</strong></li>\n<li><strong>Views</strong> folder contains the MVC Razor HTML files like Layout, Error etc. This shows that we are using ASP.NET Core MVC application.</li>\n<li><strong>dist</strong> compiled folder containing Angular 2 main application, vendor files. It’s placed in <strong>wwwroot</strong> folder as its web root folder.</li>\n<li><strong>package.json</strong> and <strong>project.json</strong> are the essential files for Angular 2 and ASP.NET Core apps. They contain all the dependencies, tooling, build information.</li>\n<li><strong>webpack configuration files</strong> does the module bundling tasks. For Angular 2 to load, prepare bundles based on vendor files, app related files, minify when in prod are all performed using webpack configuration.</li>\n</ol>\n<h2 id=\"Step-4-Two-ways-of-running-the-app\"><a href=\"#Step-4-Two-ways-of-running-the-app\" class=\"headerlink\" title=\"Step 4 - Two ways of running the app\"></a>Step 4 - Two ways of running the app</h2><p>This application can be run either in <em><strong>CLI mode</strong></em> or using <strong><em>Visual Studio Code</em></strong> launch settings.</p>\n<p><strong>Run using CLI mode</strong></p>\n<p>We need to run the command <strong>dotnet run</strong> from the CLI to start the application. It starts application, listens on localhost 5000 port. Open browser, navigate <a href=\"http://localhost:5000\" target=\"_blank\" rel=\"noopener\">http://localhost:5000</a> to see the application in action.</p>\n<p>When running using CLI, the application run in PROD and even Angular 2 app runs in PROD mode. However you can change it to run under Development mode too.</p>\n<p><strong>Run using VS Code</strong></p>\n<p>When you open application in VS Code, you will see following warning that required assets needs to created. Click <strong>Yes</strong>.</p>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2016/10/required-asset.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/10/required-asset.png\" alt=\"asp.net core\"></a></p>\n<p>Click Yes will create <strong>.vscode</strong> folder containing two JSON files <strong>launch.json</strong> and <strong>tasks.json</strong>. They have predefined code for running application.</p>\n<p>Opening <em>launch.json</em>, read through <em><strong>.NET Core Launch (web)</strong></em> configuration. It contains necessary config entries so that it can run on any OS. Also env variable <strong>ASPNETCORE_ENVIRONMENT</strong> is Development.</p>\n<p>Just pressing the <strong>F5</strong> the application starts running, open browser automatically, reloads on file changes and most important run in DEVELOPMENT mode.</p>\n<p>This is how the application looks like when run using either CLI or VS Code. It’s different from the usual ASP.NET web application because this more focused for being SPA. [caption id=”attachment_584” align=”aligncenter” width=”776”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/10/runningapp.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/10/runningapp.png\" alt=\"asp.net core\"></a> Application running in browser[/caption]</p>\n<h1 id=\"What’s-so-special-about-using-JavaScript-services\"><a href=\"#What’s-so-special-about-using-JavaScript-services\" class=\"headerlink\" title=\"What’s so special about using JavaScript services?\"></a>What’s so special about using JavaScript services?</h1><p>Personally I liked the way Angular 2 and ASP.NET Core are used together here, because</p>\n<ul>\n<li>Developed from Microsoft ASP.NET team. Its constantly updated with framework changes.</li>\n<li>Uses webpack for module bundling, soon webpack 2 will make this light weight.</li>\n<li>Very simple way to tweak to run for DEV or PROD mode.</li>\n<li>It also uses Angular Universal for server side rendering of Angular 2 application. This helps load apps much faster.</li>\n<li>Super simple integration with third party JS libraries using Vendor packaging.</li>\n<li>Inbuilt Docker support, makes deployment easy on docker containers.</li>\n<li>Hot Module replacement supported when application run in development.</li>\n<li>We can write Web API in the same project to access data, in turn displayed on Angular 2 apps</li>\n</ul>\n<p>So far I have integrated Angular 2 in ASP.NET (MVC 5 and Core) in different ways but this is most elegant way. <strong>Hello Readers, let me know in comments if detailed code walk through needed.</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>ASP.NET Core</strong> as MVC application is completely modular, seamlessly integrate with various JavaScript based frameworks like Angular 2, Angular 1.*, React, Knockout, JQuery etc. In this article we will learn how to build ASP.NET Core MVC as a Single Page Application (SPA) using latest Angular 2. When working with Angular 2 and ASP.NET Core, we should consider these points</p>\n<ul>\n<li>Angular 2 build strategy to be used i.e. Gulp, Webpack, Rollup. The usage of Webpack is optimal approach for build mechanism.</li>\n<li>Using ASP.NET Core tag helpers features also.</li>\n<li>Simpler approach to include 3 party libraries</li>\n<li>Working in development or production mode with ease.</li>\n</ul>\n<blockquote>\n<p>These steps can be followed on Windows OS, Linux or Mac OS machines</p>\n</blockquote>\n<p>Microsoft ASP.NET team have built up excellent infrastructure known as <a href=\"https://github.com/aspnet/JavaScriptServices\" target=\"_blank\" rel=\"noopener\">JavaScriptServices</a> for building SPA based applications. At present they provide Angular 2/ React/ Knockout infrastructure. Lets get started then</p>\n<h2 id=\"Step-1-Software-prerequisites\"><a href=\"#Step-1-Software-prerequisites\" class=\"headerlink\" title=\"Step 1 - Software prerequisites\"></a>Step 1 - Software prerequisites</h2><p>The following software needs to be installed</p>\n<ul>\n<li>Visual Studio Code - Light weight cross platform editor</li>\n<li>Install ASP.NET and <a href=\"https://www.microsoft.com/net/core\" target=\"_blank\" rel=\"noopener\">.NET Core SDK</a> appropriate for OS</li>\n<li>Latest NodeJS and NPM.</li>\n<li>Install Visual Studio 2015 Update 3 (optional step). For die hard fan of VS IDE, we can use it too.</li>\n</ul>\n<p>We will be using <strong>Yeoman</strong> generators for scaffolding applications. The project template for ASP.NET Core SPA needs to be installed too <strong>generator-aspnetcore-spa</strong>. Run below command to install them</p>\n<p>npm install -g yo generator-aspnetcore-spa</p>\n<h2 id=\"Step-2-Creating-ASP-NET-Core-SPA-app-with-Angular-2\"><a href=\"#Step-2-Creating-ASP-NET-Core-SPA-app-with-Angular-2\" class=\"headerlink\" title=\"Step 2 - Creating ASP.NET Core SPA app with Angular 2\"></a>Step 2 - Creating ASP.NET Core SPA app with Angular 2</h2><p>Now lets create the SPA application using yeoman generator. Give a name to application and select “Angular 2” application in options. It’s command line way of creating applications After creating ASP.NET Core MVC application, all the NPM packages are installed automatically. It takes few minutes to install all NPM packages.</p>\n<blockquote>\n<p>Run <strong>dotnet restore</strong> from CLI to ensure all ASP.NET NuGet packages are installed</p>\n</blockquote>\n<h2 id=\"Step-3-Understanding-the-project-structure\"><a href=\"#Step-3-Understanding-the-project-structure\" class=\"headerlink\" title=\"Step 3 - Understanding the project structure\"></a>Step 3 - Understanding the project structure</h2><p>The generator has created ASP.NET Core MVC application in form SPA with Angular 2, this means we already have MVC application baked with Angular 2 application. Isn’t it wonderful, lets understand project structure that is created. [caption id=”attachment_581” align=”aligncenter” width=”330”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/10/2016-10-25_154243.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/10/2016-10-25_154243.png\" alt=\"asp.net core\"></a> Project Structure of MVC SPA with Angular 2[/caption]</p>\n<ol>\n<li><strong>ClientApp</strong> is an Angular 2 applications with modules, components, templates, Routing etc. Any further Angular 2 development code should be written here.</li>\n<li><strong>Controllers</strong> is folder containing ASP.NET Core controllers. Both MVC and Web API controller can be written here.</li>\n<li><strong>node_modules</strong> contains all the NPM packages installed. <strong>Package.json</strong> contains list of NPM packages needed to work with Angular 2, other technologies like bootstrap, JQuery etc. As soon as project gets created from yeoman, scripts are run from <strong>project.json</strong></li>\n<li><strong>Views</strong> folder contains the MVC Razor HTML files like Layout, Error etc. This shows that we are using ASP.NET Core MVC application.</li>\n<li><strong>dist</strong> compiled folder containing Angular 2 main application, vendor files. It’s placed in <strong>wwwroot</strong> folder as its web root folder.</li>\n<li><strong>package.json</strong> and <strong>project.json</strong> are the essential files for Angular 2 and ASP.NET Core apps. They contain all the dependencies, tooling, build information.</li>\n<li><strong>webpack configuration files</strong> does the module bundling tasks. For Angular 2 to load, prepare bundles based on vendor files, app related files, minify when in prod are all performed using webpack configuration.</li>\n</ol>\n<h2 id=\"Step-4-Two-ways-of-running-the-app\"><a href=\"#Step-4-Two-ways-of-running-the-app\" class=\"headerlink\" title=\"Step 4 - Two ways of running the app\"></a>Step 4 - Two ways of running the app</h2><p>This application can be run either in <em><strong>CLI mode</strong></em> or using <strong><em>Visual Studio Code</em></strong> launch settings.</p>\n<p><strong>Run using CLI mode</strong></p>\n<p>We need to run the command <strong>dotnet run</strong> from the CLI to start the application. It starts application, listens on localhost 5000 port. Open browser, navigate <a href=\"http://localhost:5000\" target=\"_blank\" rel=\"noopener\">http://localhost:5000</a> to see the application in action.</p>\n<p>When running using CLI, the application run in PROD and even Angular 2 app runs in PROD mode. However you can change it to run under Development mode too.</p>\n<p><strong>Run using VS Code</strong></p>\n<p>When you open application in VS Code, you will see following warning that required assets needs to created. Click <strong>Yes</strong>.</p>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2016/10/required-asset.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/10/required-asset.png\" alt=\"asp.net core\"></a></p>\n<p>Click Yes will create <strong>.vscode</strong> folder containing two JSON files <strong>launch.json</strong> and <strong>tasks.json</strong>. They have predefined code for running application.</p>\n<p>Opening <em>launch.json</em>, read through <em><strong>.NET Core Launch (web)</strong></em> configuration. It contains necessary config entries so that it can run on any OS. Also env variable <strong>ASPNETCORE_ENVIRONMENT</strong> is Development.</p>\n<p>Just pressing the <strong>F5</strong> the application starts running, open browser automatically, reloads on file changes and most important run in DEVELOPMENT mode.</p>\n<p>This is how the application looks like when run using either CLI or VS Code. It’s different from the usual ASP.NET web application because this more focused for being SPA. [caption id=”attachment_584” align=”aligncenter” width=”776”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/10/runningapp.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/10/runningapp.png\" alt=\"asp.net core\"></a> Application running in browser[/caption]</p>\n<h1 id=\"What’s-so-special-about-using-JavaScript-services\"><a href=\"#What’s-so-special-about-using-JavaScript-services\" class=\"headerlink\" title=\"What’s so special about using JavaScript services?\"></a>What’s so special about using JavaScript services?</h1><p>Personally I liked the way Angular 2 and ASP.NET Core are used together here, because</p>\n<ul>\n<li>Developed from Microsoft ASP.NET team. Its constantly updated with framework changes.</li>\n<li>Uses webpack for module bundling, soon webpack 2 will make this light weight.</li>\n<li>Very simple way to tweak to run for DEV or PROD mode.</li>\n<li>It also uses Angular Universal for server side rendering of Angular 2 application. This helps load apps much faster.</li>\n<li>Super simple integration with third party JS libraries using Vendor packaging.</li>\n<li>Inbuilt Docker support, makes deployment easy on docker containers.</li>\n<li>Hot Module replacement supported when application run in development.</li>\n<li>We can write Web API in the same project to access data, in turn displayed on Angular 2 apps</li>\n</ul>\n<p>So far I have integrated Angular 2 in ASP.NET (MVC 5 and Core) in different ways but this is most elegant way. <strong>Hello Readers, let me know in comments if detailed code walk through needed.</strong></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Building ASP.NET Core MVC as SPA using Angular 2 and TypeScript","path":"building-asp-net-core-mvc-angular2-visual-studio/","eyeCatchImage":null,"excerpt":null,"date":"2016-10-27T14:47:19.000Z","pv":0,"totalPV":0,"categories":"Angular 2 > ASP.NET Core 1.0","tags":["Angular2","Asp.NET Core 1.0"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Creating ASP.NET Core 2 Web API in Visual Studio 2017","url":"322.html","id":"322","date":"2016-01-17T09:18:07.000Z","_content":"\nThis tutorial lets us create very basic ASP.NET Core 2 Web API using Visual Studio 2017. We will be creating **Contacts API** which let's do popular CRUD operations. [ASP.NET Web API](http://www.asp.net/web-api) is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices.\n\n> **ASP.NET Web API** is an ideal platform for building _**RESTful**_ applications on the .NET Framework.\n\nWhat's in this tutorial?\n\n*   Contacts API Overview\n*   Create ASP.NET Core 2 Web API project\n*   Create **Contacts** model\n*   Create and Register repository class for Contacts\n*   Add Contacts API Controller\n*   Writing Contacts CRUD methods\n*   Testing WEB API using POSTMAN\n\nStep 1: Contacts API Overview\n-----------------------------\n\nThe Contacts API is very simple, basic Web API which does CRUD operations. I have focused on writing web API rather than integrating it with databases.  This table summaries Contacts API which we'll create \\[table id=3 /\\]\n\nStep 2: Create ASP.NET Core 2 Web API project\n---------------------------------------------\n\n> Install .NET Core 2.0 SDK and Visual Studio 2017 (15.3)\n\nOpen Visual Studio 2017, create \"New Project\" with name \"**ContactsApi**\" From ASP.NET Core templates select \"Web API\"  for ASP.NET Core 2.0 (I haven't selected any Authentication, we will add them later)\n\n> _**Program.cs**_ file is an entry point when application run, that's right _**public static void main()**_. ASP.NET Core apps are considered as console apps.\n\nStep 3: Creating Contacts model\n-------------------------------\n\n**Contacts** class is the centre of this Web API project. Its POCO class containing some properties which are self-explanatory. Right click \"_**ContactsApi**_\" solution, create folder \"**Models**\"; under this \"**Models**\" folder create C# class \"_**Contacts.cs**_\" and copy this code\n\nusing System;\n\nnamespace ContactsApi.Models\n{\n    public class Contacts\n    {        \n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public bool IsFamilyMember { get; set; }        \n        public string Company { get; set; }\n        public string JobTitle { get; set; }\n        public string Email { get; set; }\n        public string MobilePhone { get; set; }\n        public DateTime DateOfBirth { get; set; }\n        public DateTime AnniversaryDate { get; set; }\n    }\n}\n\nStep 4: Create and Register repository class for _Contacts_\n-----------------------------------------------------------\n\nThe use of repository classes is really optional, but I have added it so that we can connect to any databases later. Create \"**Repository**\" folder under \"_ContactsApi_\" solution, we will add one C# interface file and C# class file implementing this interface. Create \"**IContactsRepository.cs**\" interface file in \"_Repository_\" folder and copy below code\n\nusing ContactsApi.Models;\nusing System.Collections.Generic;\n\nnamespace ContactsApi.Repository\n{\n    public interface IContactsRepository\n    {\n        void Add(Contacts item);\n        IEnumerable<Contacts> GetAll();\n        Contacts Find(string key);\n        void Remove(string Id);\n        void Update(Contacts item);\n    }\n}\n\nCreate \"**ContactsRepository.cs**\" class file, implement \"_IContactsRepository_\" and copy below code\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing ContactsApi.Models;\n\nnamespace ContactsApi.Repository\n{\n    public class ContactsRepository : IContactsRepository\n    {\n        static List<Contacts> ContactsList = new List<Contacts>();\n\n        public void Add(Contacts item)\n        {\n            ContactsList.Add(item);\n        }\n\n        public Contacts Find(string key)\n        {\n            return ContactsList\n                .Where(e => e.MobilePhone.Equals(key))\n                .SingleOrDefault();\n        }\n\n        public IEnumerable<Contacts> GetAll()\n        {\n            return ContactsList;\n        }\n\n        public void Remove(string Id)\n        {\n            var itemToRemove = ContactsList.SingleOrDefault(r => r.MobilePhone == Id);\n            if (itemToRemove != null)\n                ContactsList.Remove(itemToRemove);            \n        }\n\n        public void Update(Contacts item)\n        {\n            var itemToUpdate = ContactsList.SingleOrDefault(r => r.MobilePhone == item.MobilePhone);\n            if (itemToUpdate != null)\n            {\n                itemToUpdate.FirstName = item.FirstName;\n                itemToUpdate.LastName = item.LastName;\n                itemToUpdate.IsFamilyMember = item.IsFamilyMember;\n                itemToUpdate.Company = item.Company;\n                itemToUpdate.JobTitle = item.JobTitle;\n                itemToUpdate.Email = item.Email;\n                itemToUpdate.MobilePhone = item.MobilePhone;\n                itemToUpdate.DateOfBirth = item.DateOfBirth;\n                itemToUpdate.AnniversaryDate = item.AnniversaryDate;\n            }\n        }\n    }\n}\n\nASP.NET Core 2 provides out of box support for Dependency Injection, we will include that in our \"_**ConfigureServices**_\" method of _Startup.cs_.  We will see entire code in Step 5\n\nStep 5: Add Contacts API Controller\n-----------------------------------\n\nIt's time to add the controller API which acts as Web API. Create \"**Controllers**\" folder under \"_ContactsApi_\" project solution and add C# class file \"**ContactsController.cs**\"; copy below code\n\nusing ContactsApi.Models;\nusing ContactsApi.Repository;\nusing Microsoft.AspNetCore.Mvc;\n\nusing System.Collections.Generic;\n\nnamespace ContactsApi.Controllers\n{\n    \\[Route(\"api/\\[controller\\]\")\\]\n    public class ContactsController : Controller\n    {\n        public IContactsRepository ContactsRepo { get; set; }\n\n        public ContactsController(IContactsRepository _repo)\n        {\n            ContactsRepo = _repo;\n        }\n        \n        \\[HttpGet\\]\n        public IEnumerable<Contacts> GetAll()\n        {\n            return ContactsRepo.GetAll();\n        }\n\n        \\[HttpGet(\"{id}\", Name = \"GetContacts\")\\]\n        public IActionResult GetById(string id)\n        {\n            var item = ContactsRepo.Find(id);\n            if (item == null)\n            {\n                return NotFound();\n            }\n            return new ObjectResult(item);\n        }\n\n        \\[HttpPost\\]\n        public IActionResult Create(\\[FromBody\\] Contacts item)\n        {\n            if (item == null)\n            {\n                return BadRequest();\n            }\n            ContactsRepo.Add(item);\n            return CreatedAtRoute(\"GetContacts\", new { Controller = \"Contacts\", id = item.MobilePhone }, item);\n        }\n\n        \\[HttpPut(\"{id}\")\\]\n        public IActionResult Update(string id, \\[FromBody\\] Contacts item)\n        {\n            if (item == null)\n            {\n                return BadRequest();\n            }\n            var contactObj = ContactsRepo.Find(id);\n            if (contactObj == null)\n            {\n                return NotFound();\n            }\n            ContactsRepo.Update(item);\n            return new NoContentResult();\n        }\n\n        \\[HttpDelete(\"{id}\")\\]\n        public void Delete(string id)\n        {\n            ContactsRepo.Remove(id);\n        }\n    }\n}\n\nSome quick notes of this ContactsController\n\n1.  **\\[Route(\"api/\\[controller\\]\")\\]** \\- this used attribute based routing to access the ASP.NET Core Web API.\n2.  _ContactsRepo_ is instantiated using dependency injection which we configure in _services.cs_.\n3.  **GetAll()** is simple _HttpGet_ method which gets all contacts\n4.  **GetById** fetches contact based on the mobile phone. Its given _HttpGet_ with Name attribute so that we can use that in Create method to be used for location header.\n5.  Create method after inserting contact, returns 201 response and provides location header.\n\n> Note: HTTP Status codes are now written as _BadReqest()_, _NotFound()_, _Unauthorized()_ etc\n\nStep 6: Testing Contacts Web API using POSTMAN\n----------------------------------------------\n\nASP.NET Core 2 Web API allows disabling of launching browser when we debug the application. Right click on \"_ContactsApi_\", goto \"_Properties_\" and Select Debug. You can uncheck \"_Launch URL_\" check box to ensure it doesn't the open browser (this is optional). RUN/ DEBUG application by clicking \"IIS Express\" which starts Web API, we can use other ways to start the application. Since Web API does CRUD operations on Contacts using in memory collections. we will start with POST, GET, PUT, DELETE operations Using Chrome's POSTMAN extension to test client, it's very easy to use. Even Fiddler can also be used for testing.\n\n##### Contacts API's POST operation\n\n\\[caption id=\"attachment_332\" align=\"aligncenter\" width=\"1043\"\\][![ASP.NET Core 2 Web API](http://www.mithunvp.com/wp-content/uploads/2016/01/fourth.png)](http://www.mithunvp.com/wp-content/uploads/2016/01/fourth.png) Contacts API POST operation\\[/caption\\] Point 2 provides location header which can be used fetch result.\n\n##### Contacts API GET operation\n\n\\[caption id=\"attachment_333\" align=\"aligncenter\" width=\"1051\"\\][![ASP.NET Core 2 Web API](http://www.mithunvp.com/wp-content/uploads/2016/01/five.png)](http://www.mithunvp.com/wp-content/uploads/2016/01/five.png) Contacts Api GET operation\\[/caption\\]\n\n##### Contacts API PUT operation\n\n\\[caption id=\"attachment_335\" align=\"aligncenter\" width=\"1051\"\\][![ASP.NET Core 2 Web API](http://www.mithunvp.com/wp-content/uploads/2016/01/six.png)](http://www.mithunvp.com/wp-content/uploads/2016/01/six.png) Contacts Api PUT operation\\[/caption\\]\n\n##### Contacts API DELETE operation\n\n\\[caption id=\"attachment_334\" align=\"aligncenter\" width=\"1039\"\\][![ASP.NET Core 2 Web API](http://www.mithunvp.com/wp-content/uploads/2016/01/seven.png)](http://www.mithunvp.com/wp-content/uploads/2016/01/seven.png) Contacts Api DELETE operation\\[/caption\\] This sample will be made better by adding logging, connecting to the database using EF Core or EF 6 or any ORMs.\n\n> Read [Integrating EF Core](http://www.mithunvp.com/aspnet-core-web-api-entity-framework-core/) with ASP.NET Core 2 Web API\n\nThe [source code](https://github.com/mithunvp/ContactsAPI) of this article is at **mithunvp** github repo","source":"_posts/create-aspnet-mvc-6-web-api-visual-studio-2017.md","raw":"---\ntitle: Creating ASP.NET Core 2 Web API in Visual Studio 2017\ntags:\n  - ASP.NET Core 2\n  - 'C#'\n  - Visual Studio\nurl: 322.html\nid: 322\ncategories:\n  - ASP.NET Core 2\ndate: 2016-01-17 14:48:07\n---\n\nThis tutorial lets us create very basic ASP.NET Core 2 Web API using Visual Studio 2017. We will be creating **Contacts API** which let's do popular CRUD operations. [ASP.NET Web API](http://www.asp.net/web-api) is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices.\n\n> **ASP.NET Web API** is an ideal platform for building _**RESTful**_ applications on the .NET Framework.\n\nWhat's in this tutorial?\n\n*   Contacts API Overview\n*   Create ASP.NET Core 2 Web API project\n*   Create **Contacts** model\n*   Create and Register repository class for Contacts\n*   Add Contacts API Controller\n*   Writing Contacts CRUD methods\n*   Testing WEB API using POSTMAN\n\nStep 1: Contacts API Overview\n-----------------------------\n\nThe Contacts API is very simple, basic Web API which does CRUD operations. I have focused on writing web API rather than integrating it with databases.  This table summaries Contacts API which we'll create \\[table id=3 /\\]\n\nStep 2: Create ASP.NET Core 2 Web API project\n---------------------------------------------\n\n> Install .NET Core 2.0 SDK and Visual Studio 2017 (15.3)\n\nOpen Visual Studio 2017, create \"New Project\" with name \"**ContactsApi**\" From ASP.NET Core templates select \"Web API\"  for ASP.NET Core 2.0 (I haven't selected any Authentication, we will add them later)\n\n> _**Program.cs**_ file is an entry point when application run, that's right _**public static void main()**_. ASP.NET Core apps are considered as console apps.\n\nStep 3: Creating Contacts model\n-------------------------------\n\n**Contacts** class is the centre of this Web API project. Its POCO class containing some properties which are self-explanatory. Right click \"_**ContactsApi**_\" solution, create folder \"**Models**\"; under this \"**Models**\" folder create C# class \"_**Contacts.cs**_\" and copy this code\n\nusing System;\n\nnamespace ContactsApi.Models\n{\n    public class Contacts\n    {        \n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public bool IsFamilyMember { get; set; }        \n        public string Company { get; set; }\n        public string JobTitle { get; set; }\n        public string Email { get; set; }\n        public string MobilePhone { get; set; }\n        public DateTime DateOfBirth { get; set; }\n        public DateTime AnniversaryDate { get; set; }\n    }\n}\n\nStep 4: Create and Register repository class for _Contacts_\n-----------------------------------------------------------\n\nThe use of repository classes is really optional, but I have added it so that we can connect to any databases later. Create \"**Repository**\" folder under \"_ContactsApi_\" solution, we will add one C# interface file and C# class file implementing this interface. Create \"**IContactsRepository.cs**\" interface file in \"_Repository_\" folder and copy below code\n\nusing ContactsApi.Models;\nusing System.Collections.Generic;\n\nnamespace ContactsApi.Repository\n{\n    public interface IContactsRepository\n    {\n        void Add(Contacts item);\n        IEnumerable<Contacts> GetAll();\n        Contacts Find(string key);\n        void Remove(string Id);\n        void Update(Contacts item);\n    }\n}\n\nCreate \"**ContactsRepository.cs**\" class file, implement \"_IContactsRepository_\" and copy below code\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing ContactsApi.Models;\n\nnamespace ContactsApi.Repository\n{\n    public class ContactsRepository : IContactsRepository\n    {\n        static List<Contacts> ContactsList = new List<Contacts>();\n\n        public void Add(Contacts item)\n        {\n            ContactsList.Add(item);\n        }\n\n        public Contacts Find(string key)\n        {\n            return ContactsList\n                .Where(e => e.MobilePhone.Equals(key))\n                .SingleOrDefault();\n        }\n\n        public IEnumerable<Contacts> GetAll()\n        {\n            return ContactsList;\n        }\n\n        public void Remove(string Id)\n        {\n            var itemToRemove = ContactsList.SingleOrDefault(r => r.MobilePhone == Id);\n            if (itemToRemove != null)\n                ContactsList.Remove(itemToRemove);            \n        }\n\n        public void Update(Contacts item)\n        {\n            var itemToUpdate = ContactsList.SingleOrDefault(r => r.MobilePhone == item.MobilePhone);\n            if (itemToUpdate != null)\n            {\n                itemToUpdate.FirstName = item.FirstName;\n                itemToUpdate.LastName = item.LastName;\n                itemToUpdate.IsFamilyMember = item.IsFamilyMember;\n                itemToUpdate.Company = item.Company;\n                itemToUpdate.JobTitle = item.JobTitle;\n                itemToUpdate.Email = item.Email;\n                itemToUpdate.MobilePhone = item.MobilePhone;\n                itemToUpdate.DateOfBirth = item.DateOfBirth;\n                itemToUpdate.AnniversaryDate = item.AnniversaryDate;\n            }\n        }\n    }\n}\n\nASP.NET Core 2 provides out of box support for Dependency Injection, we will include that in our \"_**ConfigureServices**_\" method of _Startup.cs_.  We will see entire code in Step 5\n\nStep 5: Add Contacts API Controller\n-----------------------------------\n\nIt's time to add the controller API which acts as Web API. Create \"**Controllers**\" folder under \"_ContactsApi_\" project solution and add C# class file \"**ContactsController.cs**\"; copy below code\n\nusing ContactsApi.Models;\nusing ContactsApi.Repository;\nusing Microsoft.AspNetCore.Mvc;\n\nusing System.Collections.Generic;\n\nnamespace ContactsApi.Controllers\n{\n    \\[Route(\"api/\\[controller\\]\")\\]\n    public class ContactsController : Controller\n    {\n        public IContactsRepository ContactsRepo { get; set; }\n\n        public ContactsController(IContactsRepository _repo)\n        {\n            ContactsRepo = _repo;\n        }\n        \n        \\[HttpGet\\]\n        public IEnumerable<Contacts> GetAll()\n        {\n            return ContactsRepo.GetAll();\n        }\n\n        \\[HttpGet(\"{id}\", Name = \"GetContacts\")\\]\n        public IActionResult GetById(string id)\n        {\n            var item = ContactsRepo.Find(id);\n            if (item == null)\n            {\n                return NotFound();\n            }\n            return new ObjectResult(item);\n        }\n\n        \\[HttpPost\\]\n        public IActionResult Create(\\[FromBody\\] Contacts item)\n        {\n            if (item == null)\n            {\n                return BadRequest();\n            }\n            ContactsRepo.Add(item);\n            return CreatedAtRoute(\"GetContacts\", new { Controller = \"Contacts\", id = item.MobilePhone }, item);\n        }\n\n        \\[HttpPut(\"{id}\")\\]\n        public IActionResult Update(string id, \\[FromBody\\] Contacts item)\n        {\n            if (item == null)\n            {\n                return BadRequest();\n            }\n            var contactObj = ContactsRepo.Find(id);\n            if (contactObj == null)\n            {\n                return NotFound();\n            }\n            ContactsRepo.Update(item);\n            return new NoContentResult();\n        }\n\n        \\[HttpDelete(\"{id}\")\\]\n        public void Delete(string id)\n        {\n            ContactsRepo.Remove(id);\n        }\n    }\n}\n\nSome quick notes of this ContactsController\n\n1.  **\\[Route(\"api/\\[controller\\]\")\\]** \\- this used attribute based routing to access the ASP.NET Core Web API.\n2.  _ContactsRepo_ is instantiated using dependency injection which we configure in _services.cs_.\n3.  **GetAll()** is simple _HttpGet_ method which gets all contacts\n4.  **GetById** fetches contact based on the mobile phone. Its given _HttpGet_ with Name attribute so that we can use that in Create method to be used for location header.\n5.  Create method after inserting contact, returns 201 response and provides location header.\n\n> Note: HTTP Status codes are now written as _BadReqest()_, _NotFound()_, _Unauthorized()_ etc\n\nStep 6: Testing Contacts Web API using POSTMAN\n----------------------------------------------\n\nASP.NET Core 2 Web API allows disabling of launching browser when we debug the application. Right click on \"_ContactsApi_\", goto \"_Properties_\" and Select Debug. You can uncheck \"_Launch URL_\" check box to ensure it doesn't the open browser (this is optional). RUN/ DEBUG application by clicking \"IIS Express\" which starts Web API, we can use other ways to start the application. Since Web API does CRUD operations on Contacts using in memory collections. we will start with POST, GET, PUT, DELETE operations Using Chrome's POSTMAN extension to test client, it's very easy to use. Even Fiddler can also be used for testing.\n\n##### Contacts API's POST operation\n\n\\[caption id=\"attachment_332\" align=\"aligncenter\" width=\"1043\"\\][![ASP.NET Core 2 Web API](http://www.mithunvp.com/wp-content/uploads/2016/01/fourth.png)](http://www.mithunvp.com/wp-content/uploads/2016/01/fourth.png) Contacts API POST operation\\[/caption\\] Point 2 provides location header which can be used fetch result.\n\n##### Contacts API GET operation\n\n\\[caption id=\"attachment_333\" align=\"aligncenter\" width=\"1051\"\\][![ASP.NET Core 2 Web API](http://www.mithunvp.com/wp-content/uploads/2016/01/five.png)](http://www.mithunvp.com/wp-content/uploads/2016/01/five.png) Contacts Api GET operation\\[/caption\\]\n\n##### Contacts API PUT operation\n\n\\[caption id=\"attachment_335\" align=\"aligncenter\" width=\"1051\"\\][![ASP.NET Core 2 Web API](http://www.mithunvp.com/wp-content/uploads/2016/01/six.png)](http://www.mithunvp.com/wp-content/uploads/2016/01/six.png) Contacts Api PUT operation\\[/caption\\]\n\n##### Contacts API DELETE operation\n\n\\[caption id=\"attachment_334\" align=\"aligncenter\" width=\"1039\"\\][![ASP.NET Core 2 Web API](http://www.mithunvp.com/wp-content/uploads/2016/01/seven.png)](http://www.mithunvp.com/wp-content/uploads/2016/01/seven.png) Contacts Api DELETE operation\\[/caption\\] This sample will be made better by adding logging, connecting to the database using EF Core or EF 6 or any ORMs.\n\n> Read [Integrating EF Core](http://www.mithunvp.com/aspnet-core-web-api-entity-framework-core/) with ASP.NET Core 2 Web API\n\nThe [source code](https://github.com/mithunvp/ContactsAPI) of this article is at **mithunvp** github repo","slug":"create-aspnet-mvc-6-web-api-visual-studio-2017","published":1,"updated":"2018-07-10T19:49:06.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034wa000us4tjpvgo3ong","content":"<p>This tutorial lets us create very basic ASP.NET Core 2 Web API using Visual Studio 2017. We will be creating <strong>Contacts API</strong> which let’s do popular CRUD operations. <a href=\"http://www.asp.net/web-api\" target=\"_blank\" rel=\"noopener\">ASP.NET Web API</a> is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices.</p>\n<blockquote>\n<p><strong>ASP.NET Web API</strong> is an ideal platform for building <em><strong>RESTful</strong></em> applications on the .NET Framework.</p>\n</blockquote>\n<p>What’s in this tutorial?</p>\n<ul>\n<li>Contacts API Overview</li>\n<li>Create ASP.NET Core 2 Web API project</li>\n<li>Create <strong>Contacts</strong> model</li>\n<li>Create and Register repository class for Contacts</li>\n<li>Add Contacts API Controller</li>\n<li>Writing Contacts CRUD methods</li>\n<li>Testing WEB API using POSTMAN</li>\n</ul>\n<h2 id=\"Step-1-Contacts-API-Overview\"><a href=\"#Step-1-Contacts-API-Overview\" class=\"headerlink\" title=\"Step 1: Contacts API Overview\"></a>Step 1: Contacts API Overview</h2><p>The Contacts API is very simple, basic Web API which does CRUD operations. I have focused on writing web API rather than integrating it with databases.  This table summaries Contacts API which we’ll create [table id=3 /]</p>\n<h2 id=\"Step-2-Create-ASP-NET-Core-2-Web-API-project\"><a href=\"#Step-2-Create-ASP-NET-Core-2-Web-API-project\" class=\"headerlink\" title=\"Step 2: Create ASP.NET Core 2 Web API project\"></a>Step 2: Create ASP.NET Core 2 Web API project</h2><blockquote>\n<p>Install .NET Core 2.0 SDK and Visual Studio 2017 (15.3)</p>\n</blockquote>\n<p>Open Visual Studio 2017, create “New Project” with name “<strong>ContactsApi</strong>“ From ASP.NET Core templates select “Web API”  for ASP.NET Core 2.0 (I haven’t selected any Authentication, we will add them later)</p>\n<blockquote>\n<p><em><strong>Program.cs</strong></em> file is an entry point when application run, that’s right <em><strong>public static void main()</strong></em>. ASP.NET Core apps are considered as console apps.</p>\n</blockquote>\n<h2 id=\"Step-3-Creating-Contacts-model\"><a href=\"#Step-3-Creating-Contacts-model\" class=\"headerlink\" title=\"Step 3: Creating Contacts model\"></a>Step 3: Creating Contacts model</h2><p><strong>Contacts</strong> class is the centre of this Web API project. Its POCO class containing some properties which are self-explanatory. Right click “<em><strong>ContactsApi</strong></em>“ solution, create folder “<strong>Models</strong>“; under this “<strong>Models</strong>“ folder create C# class “<em><strong>Contacts.cs</strong></em>“ and copy this code</p>\n<p>using System;</p>\n<p>namespace ContactsApi.Models<br>{<br>    public class Contacts<br>    {<br>        public string FirstName { get; set; }<br>        public string LastName { get; set; }<br>        public bool IsFamilyMember { get; set; }<br>        public string Company { get; set; }<br>        public string JobTitle { get; set; }<br>        public string Email { get; set; }<br>        public string MobilePhone { get; set; }<br>        public DateTime DateOfBirth { get; set; }<br>        public DateTime AnniversaryDate { get; set; }<br>    }<br>}</p>\n<h2 id=\"Step-4-Create-and-Register-repository-class-for-Contacts\"><a href=\"#Step-4-Create-and-Register-repository-class-for-Contacts\" class=\"headerlink\" title=\"Step 4: Create and Register repository class for Contacts\"></a>Step 4: Create and Register repository class for <em>Contacts</em></h2><p>The use of repository classes is really optional, but I have added it so that we can connect to any databases later. Create “<strong>Repository</strong>“ folder under “<em>ContactsApi</em>“ solution, we will add one C# interface file and C# class file implementing this interface. Create “<strong>IContactsRepository.cs</strong>“ interface file in “<em>Repository</em>“ folder and copy below code</p>\n<p>using ContactsApi.Models;<br>using System.Collections.Generic;</p>\n<p>namespace ContactsApi.Repository<br>{<br>    public interface IContactsRepository<br>    {<br>        void Add(Contacts item);<br>        IEnumerable<contacts> GetAll();<br>        Contacts Find(string key);<br>        void Remove(string Id);<br>        void Update(Contacts item);<br>    }<br>}</contacts></p>\n<p>Create “<strong>ContactsRepository.cs</strong>“ class file, implement “<em>IContactsRepository</em>“ and copy below code</p>\n<p>using System.Collections.Generic;<br>using System.Linq;<br>using ContactsApi.Models;</p>\n<p>namespace ContactsApi.Repository<br>{<br>    public class ContactsRepository : IContactsRepository<br>    {<br>        static List<contacts> ContactsList = new List<contacts>();</contacts></contacts></p>\n<pre><code>    public void Add(Contacts item)\n    {\n        ContactsList.Add(item);\n    }\n\n    public Contacts Find(string key)\n    {\n        return ContactsList\n            .Where(e =&gt; e.MobilePhone.Equals(key))\n            .SingleOrDefault();\n    }\n\n    public IEnumerable&lt;Contacts&gt; GetAll()\n    {\n        return ContactsList;\n    }\n\n    public void Remove(string Id)\n    {\n        var itemToRemove = ContactsList.SingleOrDefault(r =&gt; r.MobilePhone == Id);\n        if (itemToRemove != null)\n            ContactsList.Remove(itemToRemove);            \n    }\n\n    public void Update(Contacts item)\n    {\n        var itemToUpdate = ContactsList.SingleOrDefault(r =&gt; r.MobilePhone == item.MobilePhone);\n        if (itemToUpdate != null)\n        {\n            itemToUpdate.FirstName = item.FirstName;\n            itemToUpdate.LastName = item.LastName;\n            itemToUpdate.IsFamilyMember = item.IsFamilyMember;\n            itemToUpdate.Company = item.Company;\n            itemToUpdate.JobTitle = item.JobTitle;\n            itemToUpdate.Email = item.Email;\n            itemToUpdate.MobilePhone = item.MobilePhone;\n            itemToUpdate.DateOfBirth = item.DateOfBirth;\n            itemToUpdate.AnniversaryDate = item.AnniversaryDate;\n        }\n    }\n}\n</code></pre><p>}</p>\n<p>ASP.NET Core 2 provides out of box support for Dependency Injection, we will include that in our “<em><strong>ConfigureServices</strong></em>“ method of <em>Startup.cs</em>.  We will see entire code in Step 5</p>\n<h2 id=\"Step-5-Add-Contacts-API-Controller\"><a href=\"#Step-5-Add-Contacts-API-Controller\" class=\"headerlink\" title=\"Step 5: Add Contacts API Controller\"></a>Step 5: Add Contacts API Controller</h2><p>It’s time to add the controller API which acts as Web API. Create “<strong>Controllers</strong>“ folder under “<em>ContactsApi</em>“ project solution and add C# class file “<strong>ContactsController.cs</strong>“; copy below code</p>\n<p>using ContactsApi.Models;<br>using ContactsApi.Repository;<br>using Microsoft.AspNetCore.Mvc;</p>\n<p>using System.Collections.Generic;</p>\n<p>namespace ContactsApi.Controllers<br>{<br>    [Route(“api/[controller]“)]<br>    public class ContactsController : Controller<br>    {<br>        public IContactsRepository ContactsRepo { get; set; }</p>\n<pre><code>    public ContactsController(IContactsRepository _repo)\n    {\n        ContactsRepo = _repo;\n    }\n\n    \\[HttpGet\\]\n    public IEnumerable&lt;Contacts&gt; GetAll()\n    {\n        return ContactsRepo.GetAll();\n    }\n\n    \\[HttpGet(&quot;{id}&quot;, Name = &quot;GetContacts&quot;)\\]\n    public IActionResult GetById(string id)\n    {\n        var item = ContactsRepo.Find(id);\n        if (item == null)\n        {\n            return NotFound();\n        }\n        return new ObjectResult(item);\n    }\n\n    \\[HttpPost\\]\n    public IActionResult Create(\\[FromBody\\] Contacts item)\n    {\n        if (item == null)\n        {\n            return BadRequest();\n        }\n        ContactsRepo.Add(item);\n        return CreatedAtRoute(&quot;GetContacts&quot;, new { Controller = &quot;Contacts&quot;, id = item.MobilePhone }, item);\n    }\n\n    \\[HttpPut(&quot;{id}&quot;)\\]\n    public IActionResult Update(string id, \\[FromBody\\] Contacts item)\n    {\n        if (item == null)\n        {\n            return BadRequest();\n        }\n        var contactObj = ContactsRepo.Find(id);\n        if (contactObj == null)\n        {\n            return NotFound();\n        }\n        ContactsRepo.Update(item);\n        return new NoContentResult();\n    }\n\n    \\[HttpDelete(&quot;{id}&quot;)\\]\n    public void Delete(string id)\n    {\n        ContactsRepo.Remove(id);\n    }\n}\n</code></pre><p>}</p>\n<p>Some quick notes of this ContactsController</p>\n<ol>\n<li><strong>[Route(“api/[controller]“)]</strong> - this used attribute based routing to access the ASP.NET Core Web API.</li>\n<li><em>ContactsRepo</em> is instantiated using dependency injection which we configure in <em>services.cs</em>.</li>\n<li><strong>GetAll()</strong> is simple <em>HttpGet</em> method which gets all contacts</li>\n<li><strong>GetById</strong> fetches contact based on the mobile phone. Its given <em>HttpGet</em> with Name attribute so that we can use that in Create method to be used for location header.</li>\n<li>Create method after inserting contact, returns 201 response and provides location header.</li>\n</ol>\n<blockquote>\n<p>Note: HTTP Status codes are now written as <em>BadReqest()</em>, <em>NotFound()</em>, <em>Unauthorized()</em> etc</p>\n</blockquote>\n<h2 id=\"Step-6-Testing-Contacts-Web-API-using-POSTMAN\"><a href=\"#Step-6-Testing-Contacts-Web-API-using-POSTMAN\" class=\"headerlink\" title=\"Step 6: Testing Contacts Web API using POSTMAN\"></a>Step 6: Testing Contacts Web API using POSTMAN</h2><p>ASP.NET Core 2 Web API allows disabling of launching browser when we debug the application. Right click on “<em>ContactsApi</em>“, goto “<em>Properties</em>“ and Select Debug. You can uncheck “<em>Launch URL</em>“ check box to ensure it doesn’t the open browser (this is optional). RUN/ DEBUG application by clicking “IIS Express” which starts Web API, we can use other ways to start the application. Since Web API does CRUD operations on Contacts using in memory collections. we will start with POST, GET, PUT, DELETE operations Using Chrome’s POSTMAN extension to test client, it’s very easy to use. Even Fiddler can also be used for testing.</p>\n<h5 id=\"Contacts-API’s-POST-operation\"><a href=\"#Contacts-API’s-POST-operation\" class=\"headerlink\" title=\"Contacts API’s POST operation\"></a>Contacts API’s POST operation</h5><p>[caption id=”attachment_332” align=”aligncenter” width=”1043”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/01/fourth.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/01/fourth.png\" alt=\"ASP.NET Core 2 Web API\"></a> Contacts API POST operation[/caption] Point 2 provides location header which can be used fetch result.</p>\n<h5 id=\"Contacts-API-GET-operation\"><a href=\"#Contacts-API-GET-operation\" class=\"headerlink\" title=\"Contacts API GET operation\"></a>Contacts API GET operation</h5><p>[caption id=”attachment_333” align=”aligncenter” width=”1051”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/01/five.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/01/five.png\" alt=\"ASP.NET Core 2 Web API\"></a> Contacts Api GET operation[/caption]</p>\n<h5 id=\"Contacts-API-PUT-operation\"><a href=\"#Contacts-API-PUT-operation\" class=\"headerlink\" title=\"Contacts API PUT operation\"></a>Contacts API PUT operation</h5><p>[caption id=”attachment_335” align=”aligncenter” width=”1051”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/01/six.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/01/six.png\" alt=\"ASP.NET Core 2 Web API\"></a> Contacts Api PUT operation[/caption]</p>\n<h5 id=\"Contacts-API-DELETE-operation\"><a href=\"#Contacts-API-DELETE-operation\" class=\"headerlink\" title=\"Contacts API DELETE operation\"></a>Contacts API DELETE operation</h5><p>[caption id=”attachment_334” align=”aligncenter” width=”1039”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/01/seven.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/01/seven.png\" alt=\"ASP.NET Core 2 Web API\"></a> Contacts Api DELETE operation[/caption] This sample will be made better by adding logging, connecting to the database using EF Core or EF 6 or any ORMs.</p>\n<blockquote>\n<p>Read <a href=\"http://www.mithunvp.com/aspnet-core-web-api-entity-framework-core/\">Integrating EF Core</a> with ASP.NET Core 2 Web API</p>\n</blockquote>\n<p>The <a href=\"https://github.com/mithunvp/ContactsAPI\" target=\"_blank\" rel=\"noopener\">source code</a> of this article is at <strong>mithunvp</strong> github repo</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This tutorial lets us create very basic ASP.NET Core 2 Web API using Visual Studio 2017. We will be creating <strong>Contacts API</strong> which let’s do popular CRUD operations. <a href=\"http://www.asp.net/web-api\" target=\"_blank\" rel=\"noopener\">ASP.NET Web API</a> is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices.</p>\n<blockquote>\n<p><strong>ASP.NET Web API</strong> is an ideal platform for building <em><strong>RESTful</strong></em> applications on the .NET Framework.</p>\n</blockquote>\n<p>What’s in this tutorial?</p>\n<ul>\n<li>Contacts API Overview</li>\n<li>Create ASP.NET Core 2 Web API project</li>\n<li>Create <strong>Contacts</strong> model</li>\n<li>Create and Register repository class for Contacts</li>\n<li>Add Contacts API Controller</li>\n<li>Writing Contacts CRUD methods</li>\n<li>Testing WEB API using POSTMAN</li>\n</ul>\n<h2 id=\"Step-1-Contacts-API-Overview\"><a href=\"#Step-1-Contacts-API-Overview\" class=\"headerlink\" title=\"Step 1: Contacts API Overview\"></a>Step 1: Contacts API Overview</h2><p>The Contacts API is very simple, basic Web API which does CRUD operations. I have focused on writing web API rather than integrating it with databases.  This table summaries Contacts API which we’ll create [table id=3 /]</p>\n<h2 id=\"Step-2-Create-ASP-NET-Core-2-Web-API-project\"><a href=\"#Step-2-Create-ASP-NET-Core-2-Web-API-project\" class=\"headerlink\" title=\"Step 2: Create ASP.NET Core 2 Web API project\"></a>Step 2: Create ASP.NET Core 2 Web API project</h2><blockquote>\n<p>Install .NET Core 2.0 SDK and Visual Studio 2017 (15.3)</p>\n</blockquote>\n<p>Open Visual Studio 2017, create “New Project” with name “<strong>ContactsApi</strong>“ From ASP.NET Core templates select “Web API”  for ASP.NET Core 2.0 (I haven’t selected any Authentication, we will add them later)</p>\n<blockquote>\n<p><em><strong>Program.cs</strong></em> file is an entry point when application run, that’s right <em><strong>public static void main()</strong></em>. ASP.NET Core apps are considered as console apps.</p>\n</blockquote>\n<h2 id=\"Step-3-Creating-Contacts-model\"><a href=\"#Step-3-Creating-Contacts-model\" class=\"headerlink\" title=\"Step 3: Creating Contacts model\"></a>Step 3: Creating Contacts model</h2><p><strong>Contacts</strong> class is the centre of this Web API project. Its POCO class containing some properties which are self-explanatory. Right click “<em><strong>ContactsApi</strong></em>“ solution, create folder “<strong>Models</strong>“; under this “<strong>Models</strong>“ folder create C# class “<em><strong>Contacts.cs</strong></em>“ and copy this code</p>\n<p>using System;</p>\n<p>namespace ContactsApi.Models<br>{<br>    public class Contacts<br>    {<br>        public string FirstName { get; set; }<br>        public string LastName { get; set; }<br>        public bool IsFamilyMember { get; set; }<br>        public string Company { get; set; }<br>        public string JobTitle { get; set; }<br>        public string Email { get; set; }<br>        public string MobilePhone { get; set; }<br>        public DateTime DateOfBirth { get; set; }<br>        public DateTime AnniversaryDate { get; set; }<br>    }<br>}</p>\n<h2 id=\"Step-4-Create-and-Register-repository-class-for-Contacts\"><a href=\"#Step-4-Create-and-Register-repository-class-for-Contacts\" class=\"headerlink\" title=\"Step 4: Create and Register repository class for Contacts\"></a>Step 4: Create and Register repository class for <em>Contacts</em></h2><p>The use of repository classes is really optional, but I have added it so that we can connect to any databases later. Create “<strong>Repository</strong>“ folder under “<em>ContactsApi</em>“ solution, we will add one C# interface file and C# class file implementing this interface. Create “<strong>IContactsRepository.cs</strong>“ interface file in “<em>Repository</em>“ folder and copy below code</p>\n<p>using ContactsApi.Models;<br>using System.Collections.Generic;</p>\n<p>namespace ContactsApi.Repository<br>{<br>    public interface IContactsRepository<br>    {<br>        void Add(Contacts item);<br>        IEnumerable<contacts> GetAll();<br>        Contacts Find(string key);<br>        void Remove(string Id);<br>        void Update(Contacts item);<br>    }<br>}</contacts></p>\n<p>Create “<strong>ContactsRepository.cs</strong>“ class file, implement “<em>IContactsRepository</em>“ and copy below code</p>\n<p>using System.Collections.Generic;<br>using System.Linq;<br>using ContactsApi.Models;</p>\n<p>namespace ContactsApi.Repository<br>{<br>    public class ContactsRepository : IContactsRepository<br>    {<br>        static List<contacts> ContactsList = new List<contacts>();</contacts></contacts></p>\n<pre><code>    public void Add(Contacts item)\n    {\n        ContactsList.Add(item);\n    }\n\n    public Contacts Find(string key)\n    {\n        return ContactsList\n            .Where(e =&gt; e.MobilePhone.Equals(key))\n            .SingleOrDefault();\n    }\n\n    public IEnumerable&lt;Contacts&gt; GetAll()\n    {\n        return ContactsList;\n    }\n\n    public void Remove(string Id)\n    {\n        var itemToRemove = ContactsList.SingleOrDefault(r =&gt; r.MobilePhone == Id);\n        if (itemToRemove != null)\n            ContactsList.Remove(itemToRemove);            \n    }\n\n    public void Update(Contacts item)\n    {\n        var itemToUpdate = ContactsList.SingleOrDefault(r =&gt; r.MobilePhone == item.MobilePhone);\n        if (itemToUpdate != null)\n        {\n            itemToUpdate.FirstName = item.FirstName;\n            itemToUpdate.LastName = item.LastName;\n            itemToUpdate.IsFamilyMember = item.IsFamilyMember;\n            itemToUpdate.Company = item.Company;\n            itemToUpdate.JobTitle = item.JobTitle;\n            itemToUpdate.Email = item.Email;\n            itemToUpdate.MobilePhone = item.MobilePhone;\n            itemToUpdate.DateOfBirth = item.DateOfBirth;\n            itemToUpdate.AnniversaryDate = item.AnniversaryDate;\n        }\n    }\n}\n</code></pre><p>}</p>\n<p>ASP.NET Core 2 provides out of box support for Dependency Injection, we will include that in our “<em><strong>ConfigureServices</strong></em>“ method of <em>Startup.cs</em>.  We will see entire code in Step 5</p>\n<h2 id=\"Step-5-Add-Contacts-API-Controller\"><a href=\"#Step-5-Add-Contacts-API-Controller\" class=\"headerlink\" title=\"Step 5: Add Contacts API Controller\"></a>Step 5: Add Contacts API Controller</h2><p>It’s time to add the controller API which acts as Web API. Create “<strong>Controllers</strong>“ folder under “<em>ContactsApi</em>“ project solution and add C# class file “<strong>ContactsController.cs</strong>“; copy below code</p>\n<p>using ContactsApi.Models;<br>using ContactsApi.Repository;<br>using Microsoft.AspNetCore.Mvc;</p>\n<p>using System.Collections.Generic;</p>\n<p>namespace ContactsApi.Controllers<br>{<br>    [Route(“api/[controller]“)]<br>    public class ContactsController : Controller<br>    {<br>        public IContactsRepository ContactsRepo { get; set; }</p>\n<pre><code>    public ContactsController(IContactsRepository _repo)\n    {\n        ContactsRepo = _repo;\n    }\n\n    \\[HttpGet\\]\n    public IEnumerable&lt;Contacts&gt; GetAll()\n    {\n        return ContactsRepo.GetAll();\n    }\n\n    \\[HttpGet(&quot;{id}&quot;, Name = &quot;GetContacts&quot;)\\]\n    public IActionResult GetById(string id)\n    {\n        var item = ContactsRepo.Find(id);\n        if (item == null)\n        {\n            return NotFound();\n        }\n        return new ObjectResult(item);\n    }\n\n    \\[HttpPost\\]\n    public IActionResult Create(\\[FromBody\\] Contacts item)\n    {\n        if (item == null)\n        {\n            return BadRequest();\n        }\n        ContactsRepo.Add(item);\n        return CreatedAtRoute(&quot;GetContacts&quot;, new { Controller = &quot;Contacts&quot;, id = item.MobilePhone }, item);\n    }\n\n    \\[HttpPut(&quot;{id}&quot;)\\]\n    public IActionResult Update(string id, \\[FromBody\\] Contacts item)\n    {\n        if (item == null)\n        {\n            return BadRequest();\n        }\n        var contactObj = ContactsRepo.Find(id);\n        if (contactObj == null)\n        {\n            return NotFound();\n        }\n        ContactsRepo.Update(item);\n        return new NoContentResult();\n    }\n\n    \\[HttpDelete(&quot;{id}&quot;)\\]\n    public void Delete(string id)\n    {\n        ContactsRepo.Remove(id);\n    }\n}\n</code></pre><p>}</p>\n<p>Some quick notes of this ContactsController</p>\n<ol>\n<li><strong>[Route(“api/[controller]“)]</strong> - this used attribute based routing to access the ASP.NET Core Web API.</li>\n<li><em>ContactsRepo</em> is instantiated using dependency injection which we configure in <em>services.cs</em>.</li>\n<li><strong>GetAll()</strong> is simple <em>HttpGet</em> method which gets all contacts</li>\n<li><strong>GetById</strong> fetches contact based on the mobile phone. Its given <em>HttpGet</em> with Name attribute so that we can use that in Create method to be used for location header.</li>\n<li>Create method after inserting contact, returns 201 response and provides location header.</li>\n</ol>\n<blockquote>\n<p>Note: HTTP Status codes are now written as <em>BadReqest()</em>, <em>NotFound()</em>, <em>Unauthorized()</em> etc</p>\n</blockquote>\n<h2 id=\"Step-6-Testing-Contacts-Web-API-using-POSTMAN\"><a href=\"#Step-6-Testing-Contacts-Web-API-using-POSTMAN\" class=\"headerlink\" title=\"Step 6: Testing Contacts Web API using POSTMAN\"></a>Step 6: Testing Contacts Web API using POSTMAN</h2><p>ASP.NET Core 2 Web API allows disabling of launching browser when we debug the application. Right click on “<em>ContactsApi</em>“, goto “<em>Properties</em>“ and Select Debug. You can uncheck “<em>Launch URL</em>“ check box to ensure it doesn’t the open browser (this is optional). RUN/ DEBUG application by clicking “IIS Express” which starts Web API, we can use other ways to start the application. Since Web API does CRUD operations on Contacts using in memory collections. we will start with POST, GET, PUT, DELETE operations Using Chrome’s POSTMAN extension to test client, it’s very easy to use. Even Fiddler can also be used for testing.</p>\n<h5 id=\"Contacts-API’s-POST-operation\"><a href=\"#Contacts-API’s-POST-operation\" class=\"headerlink\" title=\"Contacts API’s POST operation\"></a>Contacts API’s POST operation</h5><p>[caption id=”attachment_332” align=”aligncenter” width=”1043”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/01/fourth.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/01/fourth.png\" alt=\"ASP.NET Core 2 Web API\"></a> Contacts API POST operation[/caption] Point 2 provides location header which can be used fetch result.</p>\n<h5 id=\"Contacts-API-GET-operation\"><a href=\"#Contacts-API-GET-operation\" class=\"headerlink\" title=\"Contacts API GET operation\"></a>Contacts API GET operation</h5><p>[caption id=”attachment_333” align=”aligncenter” width=”1051”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/01/five.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/01/five.png\" alt=\"ASP.NET Core 2 Web API\"></a> Contacts Api GET operation[/caption]</p>\n<h5 id=\"Contacts-API-PUT-operation\"><a href=\"#Contacts-API-PUT-operation\" class=\"headerlink\" title=\"Contacts API PUT operation\"></a>Contacts API PUT operation</h5><p>[caption id=”attachment_335” align=”aligncenter” width=”1051”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/01/six.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/01/six.png\" alt=\"ASP.NET Core 2 Web API\"></a> Contacts Api PUT operation[/caption]</p>\n<h5 id=\"Contacts-API-DELETE-operation\"><a href=\"#Contacts-API-DELETE-operation\" class=\"headerlink\" title=\"Contacts API DELETE operation\"></a>Contacts API DELETE operation</h5><p>[caption id=”attachment_334” align=”aligncenter” width=”1039”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/01/seven.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/01/seven.png\" alt=\"ASP.NET Core 2 Web API\"></a> Contacts Api DELETE operation[/caption] This sample will be made better by adding logging, connecting to the database using EF Core or EF 6 or any ORMs.</p>\n<blockquote>\n<p>Read <a href=\"http://www.mithunvp.com/aspnet-core-web-api-entity-framework-core/\">Integrating EF Core</a> with ASP.NET Core 2 Web API</p>\n</blockquote>\n<p>The <a href=\"https://github.com/mithunvp/ContactsAPI\" target=\"_blank\" rel=\"noopener\">source code</a> of this article is at <strong>mithunvp</strong> github repo</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Creating ASP.NET Core 2 Web API in Visual Studio 2017","path":"create-aspnet-mvc-6-web-api-visual-studio-2017/","eyeCatchImage":null,"excerpt":null,"date":"2016-01-17T09:18:07.000Z","pv":0,"totalPV":0,"categories":"ASP.NET Core 2","tags":["ASP.NET Core 2","C#","Visual Studio"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Building Responsive UI using Async Await in C#","url":"175.html","id":"175","date":"2015-09-12T21:28:02.000Z","_content":"\nWhy build responsive UI? Answer seems obvious that end-user should experience that application doesn't hang often (for developers POV, a time taking background operation makes it look like hanging). So lets learn building responsive UI using Async Await keywords\n\n> Visual Studio 2012 introduced a simplified approach, async programming, that leverage asynchronous support in the .NET Framework 4.5 and the Windows Runtime. The compiler does the difficult work that the developer used to do, and your application retains a logical structure that resembles synchronous code. This is extract from [MSDN](https://msdn.microsoft.com/en-us/library/hh191443.aspx)\n\n##### Source Code was in written Visual Studio 2015 Community Edition, WPF, C#, .NET 4.5 on Windows 7 OS. However it can be used with Visual Studio 2013/2012(any version) on Windows 8, Windows 10 also.\n\n\nBuilding Responsive UI using Async Await in C#\n----------------------------------------------\n\nA simple WPF application which reads 12MB text file, then loops through and returns unique words with count of its occurrences in text file. Instead of using Thread Sleep or HttpClient to demonstrate async await, I have word count kind of example.\n\n### Create time taking library \"WordCountLib\"\n\n*   Create blank solution naming \"AsyncAwaitDemoApp\".\n*   Create class library naming \"WordCountLib\" and create C# class file \"WordCountClass\".\n*   Copy below code containing methods \"FindWordCounts\" and \"FindWordCountsAsync\".\n{% codeblock lang:cs %}\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\n\nnamespace WordCountLib\n{\n    public class WordCountClass\n    {\n        /// \n        /// Reads through the file, generates unique words and its number of occurrences\n        /// \n        /// \n        public List FindWordCounts()\n        {\n            //Ensure that LongFile.txt exists\n            var words = Regex.Matches(File.ReadAllText(@\"D:\\\\LongFile.txt\"), @\"\\\\w+\").Cast()\n            .Select((m, pos) => new { Word = m.Value, Pos = pos })\n            .GroupBy(s => s.Word, StringComparer.CurrentCultureIgnoreCase)\n            .Select(g => new Words { WordName = g.Key, NoOfOccurance = g.Select(z => z.Pos).Count() })\n            .ToList();\n\n            return words;\n        }\n\n        /// \n        /// Reads through the file, generates unique words and its number of occurrences using Async and Await\n        /// \n        /// \n        public async Task FindWordCountsAsync()\n        {\n            //Ensure that LongFile.txt exists\n            var words = Regex.Matches(File.ReadAllText(@\"D:\\\\LongFile.txt\"), @\"\\\\w+\").Cast()\n            .Select((m, pos) => new { Word = m.Value, Pos = pos })\n            .GroupBy(s => s.Word, StringComparer.CurrentCultureIgnoreCase)\n            .Select(g => new Words { WordName = g.Key, NoOfOccurance = g.Select(z => z.Pos).Count() });\n\n            //This is more like Task-Based Asynchronous Pattern\n            return await Task.Run(() => words.ToList());           \n        }\n    }\n}\n{% endcodeblock %}\n*   Create C# class \"Words\". This is POCO class to hold words name and its occurrences. Copy below\n{% codeblock lang:cs %}\nnamespace WordCountLib\n{\n    public class Words\n    {\n        public string WordName { get; set; }\n        public int NoOfOccurance { get; set; }\n    }\n}\n{% endcodeblock %}\n*   LongFile.txt contains text copied from http://norvig.com/big.txt ; I have copied all text twice so that file is 12MB and processing should take time. Ensure that you have file at D:\\\\LongFile.txt or else FileNotFound exception. _Its present in GitHub source now._\n\n### Building UI using WPF\n\n*   Create WPF application \"WordCount.UI\", add \"WordCountLib\" assembly reference so that we can call WordCountClass methods.\n*   Open MainWindow.xaml and copy below code. This is startup window for our WPF. Draw using toolbar not so elegant but that's  not needed.\n\nDue to some issues in pasting XAML code, I have moved the entire demo application to GitHub, download it from [Async Await Demo App](https://github.com/mithunvp/AsyncAwaitDemoApp)\n\n*   Open MainWindow.xaml.cs, its code behind file for our start up window. Copy the below code.\n    *   Method \"btndwn_Click\" is old school type of button click event handler for \"Search Words\", it instantiate \"WordCountClass\", calls \"FindWordsCounts\", shows listbox and binds a list of words to listbox\n    *   Method \"btndwnasyn_Click\" is old school type of button click event handler for \"Search Words Async Way\", it instantiate \"WordCountClass\", calls \"FindWordsCountsAsync\", shows listbox and binds a list of words to listbox. Note that it has async keyword in its method signature and await keyword while \"FindWordsCountsAsync\"\n    *   \"Log\" is very simple method to log information to screen.\n*   Build and run it, check out image after it loads screen.\n\n> If we carefully see, await keyword is placed in-line while calling \"FindWordsCountsAsync\". It clearly indicates this method is time-consuming and will block UI thread.\n{% codeblock lang:cs %}\nusing System;\nusing System.Windows;\nusing WordCountLib;\n\nnamespace WordCount.UI\n{\n    /// \n    /// Interaction logic for MainWindow.xaml\n    /// \n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        /// \n        /// Button click Synchronous processing\n        /// \n        \n        private  void btndwn_Click(object sender, RoutedEventArgs e)\n        {\n            Log(\"START\");\n            \n            if (listBox.Visibility == Visibility.Visible)\n            {\n                listBox.Visibility = Visibility.Collapsed;\n            }\n\n            WordCountClass wrdSimple = new WordCountClass();            \n            var listCount = wrdSimple.FindWordCounts();            \n            listBox.Visibility = Visibility.Visible;\n            listBoxasync.Visibility = Visibility.Collapsed;\n            listBox.ItemsSource = listCount;            \n            Log(\"Done \");\n        }\n        \n        private async void btndwnasyn_Click(object sender, RoutedEventArgs e)\n        {\n            Log(\"START Async\");\n            if (listBoxasync.Visibility == Visibility.Visible)\n            {\n                listBoxasync.Visibility = Visibility.Collapsed;\n            }\n            WordCountClass wrdSimple = new WordCountClass();\n            var listCount = await wrdSimple.FindWordCountsAsync();\n            listBoxasync.Visibility = Visibility.Visible;\n            listBox.Visibility = Visibility.Collapsed;\n            listBoxasync.ItemsSource = listCount;\n            \n            Log(\"Done Async\");\n        }\n\n        private void Log(string text)\n        {\n            string line = string.Format(\"{0:HH:mm:ss.fff}: {1}\\\\r\\\\n\", DateTime.Now, text);\n            logtxtBlock.AppendText(line);\n        }\n    }\n}\n{% endcodeblock %}\n[![WPF Main Window for Async Await Demo](http://www.mithunvp.com/wp-content/uploads/2015/09/asyncWindow.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/asyncWindow.png)\n\n### Testing the responsiveness of the WPF UI\n\n*   Click on button \"Search Words\", try to move window, resize it. You can't do anything as it reads the file, finds all words count and binds to list box. This is called non responsive UI or application hanging. Check out GIF image below. Notice that after it loads list box, screen window moves bit because after button click I tried to use window.\n[![Non Responsive UI on button click](http://www.mithunvp.com/wp-content/uploads/2015/09/asyncNONresponsive.gif)](http://www.mithunvp.com/wp-content/uploads/2015/09/asyncNONresponsive.gif)\n\n*   Now run application again, click \"Search Words Async Way\". Just move around window, resize it, see Log information being written. This called **RESPONSIVE UI using Async Await in C#**\n*   Just play around it by clicking buttons back and forth.\n\n[![Responsive UI using Async Await](http://www.mithunvp.com/wp-content/uploads/2015/09/NewResponsiveUI.gif)](http://www.mithunvp.com/wp-content/uploads/2015/09/NewResponsiveUI.gif)  \n\n> *   Async methods are intended to be non-blocking operations. An await expression in an async method doesn’t block the current thread while the awaited task is running.\n> *   The async and await keywords don't cause extra threads to be created. Async methods don't need multi-threading because an async method doesn't run on its own thread.","source":"_posts/building-responsive-ui-using-async-await-csharp.md","raw":"---\ntitle: 'Building Responsive UI using Async Await in C#'\ntags:\n  - AsyncAwait\n  - 'C#'\nurl: 175.html\nid: 175\ncategories:\n  - .NET\ndate: 2015-09-13 02:58:02\n---\n\nWhy build responsive UI? Answer seems obvious that end-user should experience that application doesn't hang often (for developers POV, a time taking background operation makes it look like hanging). So lets learn building responsive UI using Async Await keywords\n\n> Visual Studio 2012 introduced a simplified approach, async programming, that leverage asynchronous support in the .NET Framework 4.5 and the Windows Runtime. The compiler does the difficult work that the developer used to do, and your application retains a logical structure that resembles synchronous code. This is extract from [MSDN](https://msdn.microsoft.com/en-us/library/hh191443.aspx)\n\n##### Source Code was in written Visual Studio 2015 Community Edition, WPF, C#, .NET 4.5 on Windows 7 OS. However it can be used with Visual Studio 2013/2012(any version) on Windows 8, Windows 10 also.\n\n\nBuilding Responsive UI using Async Await in C#\n----------------------------------------------\n\nA simple WPF application which reads 12MB text file, then loops through and returns unique words with count of its occurrences in text file. Instead of using Thread Sleep or HttpClient to demonstrate async await, I have word count kind of example.\n\n### Create time taking library \"WordCountLib\"\n\n*   Create blank solution naming \"AsyncAwaitDemoApp\".\n*   Create class library naming \"WordCountLib\" and create C# class file \"WordCountClass\".\n*   Copy below code containing methods \"FindWordCounts\" and \"FindWordCountsAsync\".\n{% codeblock lang:cs %}\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\n\nnamespace WordCountLib\n{\n    public class WordCountClass\n    {\n        /// \n        /// Reads through the file, generates unique words and its number of occurrences\n        /// \n        /// \n        public List FindWordCounts()\n        {\n            //Ensure that LongFile.txt exists\n            var words = Regex.Matches(File.ReadAllText(@\"D:\\\\LongFile.txt\"), @\"\\\\w+\").Cast()\n            .Select((m, pos) => new { Word = m.Value, Pos = pos })\n            .GroupBy(s => s.Word, StringComparer.CurrentCultureIgnoreCase)\n            .Select(g => new Words { WordName = g.Key, NoOfOccurance = g.Select(z => z.Pos).Count() })\n            .ToList();\n\n            return words;\n        }\n\n        /// \n        /// Reads through the file, generates unique words and its number of occurrences using Async and Await\n        /// \n        /// \n        public async Task FindWordCountsAsync()\n        {\n            //Ensure that LongFile.txt exists\n            var words = Regex.Matches(File.ReadAllText(@\"D:\\\\LongFile.txt\"), @\"\\\\w+\").Cast()\n            .Select((m, pos) => new { Word = m.Value, Pos = pos })\n            .GroupBy(s => s.Word, StringComparer.CurrentCultureIgnoreCase)\n            .Select(g => new Words { WordName = g.Key, NoOfOccurance = g.Select(z => z.Pos).Count() });\n\n            //This is more like Task-Based Asynchronous Pattern\n            return await Task.Run(() => words.ToList());           \n        }\n    }\n}\n{% endcodeblock %}\n*   Create C# class \"Words\". This is POCO class to hold words name and its occurrences. Copy below\n{% codeblock lang:cs %}\nnamespace WordCountLib\n{\n    public class Words\n    {\n        public string WordName { get; set; }\n        public int NoOfOccurance { get; set; }\n    }\n}\n{% endcodeblock %}\n*   LongFile.txt contains text copied from http://norvig.com/big.txt ; I have copied all text twice so that file is 12MB and processing should take time. Ensure that you have file at D:\\\\LongFile.txt or else FileNotFound exception. _Its present in GitHub source now._\n\n### Building UI using WPF\n\n*   Create WPF application \"WordCount.UI\", add \"WordCountLib\" assembly reference so that we can call WordCountClass methods.\n*   Open MainWindow.xaml and copy below code. This is startup window for our WPF. Draw using toolbar not so elegant but that's  not needed.\n\nDue to some issues in pasting XAML code, I have moved the entire demo application to GitHub, download it from [Async Await Demo App](https://github.com/mithunvp/AsyncAwaitDemoApp)\n\n*   Open MainWindow.xaml.cs, its code behind file for our start up window. Copy the below code.\n    *   Method \"btndwn_Click\" is old school type of button click event handler for \"Search Words\", it instantiate \"WordCountClass\", calls \"FindWordsCounts\", shows listbox and binds a list of words to listbox\n    *   Method \"btndwnasyn_Click\" is old school type of button click event handler for \"Search Words Async Way\", it instantiate \"WordCountClass\", calls \"FindWordsCountsAsync\", shows listbox and binds a list of words to listbox. Note that it has async keyword in its method signature and await keyword while \"FindWordsCountsAsync\"\n    *   \"Log\" is very simple method to log information to screen.\n*   Build and run it, check out image after it loads screen.\n\n> If we carefully see, await keyword is placed in-line while calling \"FindWordsCountsAsync\". It clearly indicates this method is time-consuming and will block UI thread.\n{% codeblock lang:cs %}\nusing System;\nusing System.Windows;\nusing WordCountLib;\n\nnamespace WordCount.UI\n{\n    /// \n    /// Interaction logic for MainWindow.xaml\n    /// \n    public partial class MainWindow : Window\n    {\n        public MainWindow()\n        {\n            InitializeComponent();\n        }\n\n        /// \n        /// Button click Synchronous processing\n        /// \n        \n        private  void btndwn_Click(object sender, RoutedEventArgs e)\n        {\n            Log(\"START\");\n            \n            if (listBox.Visibility == Visibility.Visible)\n            {\n                listBox.Visibility = Visibility.Collapsed;\n            }\n\n            WordCountClass wrdSimple = new WordCountClass();            \n            var listCount = wrdSimple.FindWordCounts();            \n            listBox.Visibility = Visibility.Visible;\n            listBoxasync.Visibility = Visibility.Collapsed;\n            listBox.ItemsSource = listCount;            \n            Log(\"Done \");\n        }\n        \n        private async void btndwnasyn_Click(object sender, RoutedEventArgs e)\n        {\n            Log(\"START Async\");\n            if (listBoxasync.Visibility == Visibility.Visible)\n            {\n                listBoxasync.Visibility = Visibility.Collapsed;\n            }\n            WordCountClass wrdSimple = new WordCountClass();\n            var listCount = await wrdSimple.FindWordCountsAsync();\n            listBoxasync.Visibility = Visibility.Visible;\n            listBox.Visibility = Visibility.Collapsed;\n            listBoxasync.ItemsSource = listCount;\n            \n            Log(\"Done Async\");\n        }\n\n        private void Log(string text)\n        {\n            string line = string.Format(\"{0:HH:mm:ss.fff}: {1}\\\\r\\\\n\", DateTime.Now, text);\n            logtxtBlock.AppendText(line);\n        }\n    }\n}\n{% endcodeblock %}\n[![WPF Main Window for Async Await Demo](http://www.mithunvp.com/wp-content/uploads/2015/09/asyncWindow.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/asyncWindow.png)\n\n### Testing the responsiveness of the WPF UI\n\n*   Click on button \"Search Words\", try to move window, resize it. You can't do anything as it reads the file, finds all words count and binds to list box. This is called non responsive UI or application hanging. Check out GIF image below. Notice that after it loads list box, screen window moves bit because after button click I tried to use window.\n[![Non Responsive UI on button click](http://www.mithunvp.com/wp-content/uploads/2015/09/asyncNONresponsive.gif)](http://www.mithunvp.com/wp-content/uploads/2015/09/asyncNONresponsive.gif)\n\n*   Now run application again, click \"Search Words Async Way\". Just move around window, resize it, see Log information being written. This called **RESPONSIVE UI using Async Await in C#**\n*   Just play around it by clicking buttons back and forth.\n\n[![Responsive UI using Async Await](http://www.mithunvp.com/wp-content/uploads/2015/09/NewResponsiveUI.gif)](http://www.mithunvp.com/wp-content/uploads/2015/09/NewResponsiveUI.gif)  \n\n> *   Async methods are intended to be non-blocking operations. An await expression in an async method doesn’t block the current thread while the awaited task is running.\n> *   The async and await keywords don't cause extra threads to be created. Async methods don't need multi-threading because an async method doesn't run on its own thread.","slug":"building-responsive-ui-using-async-await-csharp","published":1,"updated":"2018-07-26T18:25:19.129Z","_id":"cjjt034we000ys4tjew45nqxy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Why build responsive UI? Answer seems obvious that end-user should experience that application doesn’t hang often (for developers POV, a time taking background operation makes it look like hanging). So lets learn building responsive UI using Async Await keywords</p>\n<blockquote>\n<p>Visual Studio 2012 introduced a simplified approach, async programming, that leverage asynchronous support in the .NET Framework 4.5 and the Windows Runtime. The compiler does the difficult work that the developer used to do, and your application retains a logical structure that resembles synchronous code. This is extract from <a href=\"https://msdn.microsoft.com/en-us/library/hh191443.aspx\" target=\"_blank\" rel=\"noopener\">MSDN</a></p>\n</blockquote>\n<h5 id=\"Source-Code-was-in-written-Visual-Studio-2015-Community-Edition-WPF-C-NET-4-5-on-Windows-7-OS-However-it-can-be-used-with-Visual-Studio-2013-2012-any-version-on-Windows-8-Windows-10-also\"><a href=\"#Source-Code-was-in-written-Visual-Studio-2015-Community-Edition-WPF-C-NET-4-5-on-Windows-7-OS-However-it-can-be-used-with-Visual-Studio-2013-2012-any-version-on-Windows-8-Windows-10-also\" class=\"headerlink\" title=\"Source Code was in written Visual Studio 2015 Community Edition, WPF, C#, .NET 4.5 on Windows 7 OS. However it can be used with Visual Studio 2013/2012(any version) on Windows 8, Windows 10 also.\"></a>Source Code was in written Visual Studio 2015 Community Edition, WPF, C#, .NET 4.5 on Windows 7 OS. However it can be used with Visual Studio 2013/2012(any version) on Windows 8, Windows 10 also.</h5><h2 id=\"Building-Responsive-UI-using-Async-Await-in-C\"><a href=\"#Building-Responsive-UI-using-Async-Await-in-C\" class=\"headerlink\" title=\"Building Responsive UI using Async Await in C#\"></a>Building Responsive UI using Async Await in C#</h2><p>A simple WPF application which reads 12MB text file, then loops through and returns unique words with count of its occurrences in text file. Instead of using Thread Sleep or HttpClient to demonstrate async await, I have word count kind of example.</p>\n<h3 id=\"Create-time-taking-library-“WordCountLib”\"><a href=\"#Create-time-taking-library-“WordCountLib”\" class=\"headerlink\" title=\"Create time taking library “WordCountLib”\"></a>Create time taking library “WordCountLib”</h3><ul>\n<li>Create blank solution naming “AsyncAwaitDemoApp”.</li>\n<li>Create class library naming “WordCountLib” and create C# class file “WordCountClass”.</li>\n<li>Copy below code containing methods “FindWordCounts” and “FindWordCountsAsync”.<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text.RegularExpressions;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WordCountLib</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WordCountClass</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Reads through the file, generates unique words and its number of occurrences</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">FindWordCounts</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//Ensure that LongFile.txt exists</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> words = Regex.Matches(File.ReadAllText(<span class=\"string\">@\"D:\\\\LongFile.txt\"</span>), <span class=\"string\">@\"\\\\w+\"</span>).Cast()</span><br><span class=\"line\">            .Select((m, pos) =&gt; <span class=\"keyword\">new</span> &#123; Word = m.Value, Pos = pos &#125;)</span><br><span class=\"line\">            .GroupBy(s =&gt; s.Word, StringComparer.CurrentCultureIgnoreCase)</span><br><span class=\"line\">            .Select(g =&gt; <span class=\"keyword\">new</span> Words &#123; WordName = g.Key, NoOfOccurance = g.Select(z =&gt; z.Pos).Count() &#125;)</span><br><span class=\"line\">            .ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> words;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Reads through the file, generates unique words and its number of occurrences using Async and Await</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">FindWordCountsAsync</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//Ensure that LongFile.txt exists</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> words = Regex.Matches(File.ReadAllText(<span class=\"string\">@\"D:\\\\LongFile.txt\"</span>), <span class=\"string\">@\"\\\\w+\"</span>).Cast()</span><br><span class=\"line\">            .Select((m, pos) =&gt; <span class=\"keyword\">new</span> &#123; Word = m.Value, Pos = pos &#125;)</span><br><span class=\"line\">            .GroupBy(s =&gt; s.Word, StringComparer.CurrentCultureIgnoreCase)</span><br><span class=\"line\">            .Select(g =&gt; <span class=\"keyword\">new</span> Words &#123; WordName = g.Key, NoOfOccurance = g.Select(z =&gt; z.Pos).Count() &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//This is more like Task-Based Asynchronous Pattern</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> Task.Run(() =&gt; words.ToList());           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Create C# class “Words”. This is POCO class to hold words name and its occurrences. Copy below<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WordCountLib</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Words</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> WordName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> NoOfOccurance &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>LongFile.txt contains text copied from <a href=\"http://norvig.com/big.txt\" target=\"_blank\" rel=\"noopener\">http://norvig.com/big.txt</a> ; I have copied all text twice so that file is 12MB and processing should take time. Ensure that you have file at D:\\LongFile.txt or else FileNotFound exception. <em>Its present in GitHub source now.</em></li>\n</ul>\n<h3 id=\"Building-UI-using-WPF\"><a href=\"#Building-UI-using-WPF\" class=\"headerlink\" title=\"Building UI using WPF\"></a>Building UI using WPF</h3><ul>\n<li>Create WPF application “WordCount.UI”, add “WordCountLib” assembly reference so that we can call WordCountClass methods.</li>\n<li>Open MainWindow.xaml and copy below code. This is startup window for our WPF. Draw using toolbar not so elegant but that’s  not needed.</li>\n</ul>\n<p>Due to some issues in pasting XAML code, I have moved the entire demo application to GitHub, download it from <a href=\"https://github.com/mithunvp/AsyncAwaitDemoApp\" target=\"_blank\" rel=\"noopener\">Async Await Demo App</a></p>\n<ul>\n<li>Open MainWindow.xaml.cs, its code behind file for our start up window. Copy the below code.<ul>\n<li>Method “btndwn_Click” is old school type of button click event handler for “Search Words”, it instantiate “WordCountClass”, calls “FindWordsCounts”, shows listbox and binds a list of words to listbox</li>\n<li>Method “btndwnasyn_Click” is old school type of button click event handler for “Search Words Async Way”, it instantiate “WordCountClass”, calls “FindWordsCountsAsync”, shows listbox and binds a list of words to listbox. Note that it has async keyword in its method signature and await keyword while “FindWordsCountsAsync”</li>\n<li>“Log” is very simple method to log information to screen.</li>\n</ul>\n</li>\n<li>Build and run it, check out image after it loads screen.</li>\n</ul>\n<blockquote>\n<p>If we carefully see, await keyword is placed in-line while calling “FindWordsCountsAsync”. It clearly indicates this method is time-consuming and will block UI thread.<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows;</span><br><span class=\"line\"><span class=\"keyword\">using</span> WordCountLib;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WordCount.UI</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Interaction logic for MainWindow.xaml</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">MainWindow</span> : <span class=\"title\">Window</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MainWindow</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            InitializeComponent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Button click Synchronous processing</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">void</span> <span class=\"title\">btndwn_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Log(<span class=\"string\">\"START\"</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (listBox.Visibility == Visibility.Visible)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                listBox.Visibility = Visibility.Collapsed;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            WordCountClass wrdSimple = <span class=\"keyword\">new</span> WordCountClass();            </span><br><span class=\"line\">            <span class=\"keyword\">var</span> listCount = wrdSimple.FindWordCounts();            </span><br><span class=\"line\">            listBox.Visibility = Visibility.Visible;</span><br><span class=\"line\">            listBoxasync.Visibility = Visibility.Collapsed;</span><br><span class=\"line\">            listBox.ItemsSource = listCount;            </span><br><span class=\"line\">            Log(<span class=\"string\">\"Done \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> <span class=\"keyword\">void</span> <span class=\"title\">btndwnasyn_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Log(<span class=\"string\">\"START Async\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (listBoxasync.Visibility == Visibility.Visible)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                listBoxasync.Visibility = Visibility.Collapsed;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            WordCountClass wrdSimple = <span class=\"keyword\">new</span> WordCountClass();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> listCount = <span class=\"keyword\">await</span> wrdSimple.FindWordCountsAsync();</span><br><span class=\"line\">            listBoxasync.Visibility = Visibility.Visible;</span><br><span class=\"line\">            listBox.Visibility = Visibility.Collapsed;</span><br><span class=\"line\">            listBoxasync.ItemsSource = listCount;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Log(<span class=\"string\">\"Done Async\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Log</span>(<span class=\"params\"><span class=\"keyword\">string</span> text</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> line = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0:HH:mm:ss.fff&#125;: &#123;1&#125;\\\\r\\\\n\"</span>, DateTime.Now, text);</span><br><span class=\"line\">            logtxtBlock.AppendText(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/asyncWindow.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/asyncWindow.png\" alt=\"WPF Main Window for Async Await Demo\"></a></p>\n</blockquote>\n<h3 id=\"Testing-the-responsiveness-of-the-WPF-UI\"><a href=\"#Testing-the-responsiveness-of-the-WPF-UI\" class=\"headerlink\" title=\"Testing the responsiveness of the WPF UI\"></a>Testing the responsiveness of the WPF UI</h3><ul>\n<li><p>Click on button “Search Words”, try to move window, resize it. You can’t do anything as it reads the file, finds all words count and binds to list box. This is called non responsive UI or application hanging. Check out GIF image below. Notice that after it loads list box, screen window moves bit because after button click I tried to use window.<br><a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/asyncNONresponsive.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/asyncNONresponsive.gif\" alt=\"Non Responsive UI on button click\"></a></p>\n</li>\n<li><p>Now run application again, click “Search Words Async Way”. Just move around window, resize it, see Log information being written. This called <strong>RESPONSIVE UI using Async Await in C#</strong></p>\n</li>\n<li>Just play around it by clicking buttons back and forth.</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/NewResponsiveUI.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/NewResponsiveUI.gif\" alt=\"Responsive UI using Async Await\"></a>  </p>\n<blockquote>\n<ul>\n<li>Async methods are intended to be non-blocking operations. An await expression in an async method doesn’t block the current thread while the awaited task is running.</li>\n<li>The async and await keywords don’t cause extra threads to be created. Async methods don’t need multi-threading because an async method doesn’t run on its own thread.</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Why build responsive UI? Answer seems obvious that end-user should experience that application doesn’t hang often (for developers POV, a time taking background operation makes it look like hanging). So lets learn building responsive UI using Async Await keywords</p>\n<blockquote>\n<p>Visual Studio 2012 introduced a simplified approach, async programming, that leverage asynchronous support in the .NET Framework 4.5 and the Windows Runtime. The compiler does the difficult work that the developer used to do, and your application retains a logical structure that resembles synchronous code. This is extract from <a href=\"https://msdn.microsoft.com/en-us/library/hh191443.aspx\" target=\"_blank\" rel=\"noopener\">MSDN</a></p>\n</blockquote>\n<h5 id=\"Source-Code-was-in-written-Visual-Studio-2015-Community-Edition-WPF-C-NET-4-5-on-Windows-7-OS-However-it-can-be-used-with-Visual-Studio-2013-2012-any-version-on-Windows-8-Windows-10-also\"><a href=\"#Source-Code-was-in-written-Visual-Studio-2015-Community-Edition-WPF-C-NET-4-5-on-Windows-7-OS-However-it-can-be-used-with-Visual-Studio-2013-2012-any-version-on-Windows-8-Windows-10-also\" class=\"headerlink\" title=\"Source Code was in written Visual Studio 2015 Community Edition, WPF, C#, .NET 4.5 on Windows 7 OS. However it can be used with Visual Studio 2013/2012(any version) on Windows 8, Windows 10 also.\"></a>Source Code was in written Visual Studio 2015 Community Edition, WPF, C#, .NET 4.5 on Windows 7 OS. However it can be used with Visual Studio 2013/2012(any version) on Windows 8, Windows 10 also.</h5><h2 id=\"Building-Responsive-UI-using-Async-Await-in-C\"><a href=\"#Building-Responsive-UI-using-Async-Await-in-C\" class=\"headerlink\" title=\"Building Responsive UI using Async Await in C#\"></a>Building Responsive UI using Async Await in C#</h2><p>A simple WPF application which reads 12MB text file, then loops through and returns unique words with count of its occurrences in text file. Instead of using Thread Sleep or HttpClient to demonstrate async await, I have word count kind of example.</p>\n<h3 id=\"Create-time-taking-library-“WordCountLib”\"><a href=\"#Create-time-taking-library-“WordCountLib”\" class=\"headerlink\" title=\"Create time taking library “WordCountLib”\"></a>Create time taking library “WordCountLib”</h3><ul>\n<li>Create blank solution naming “AsyncAwaitDemoApp”.</li>\n<li>Create class library naming “WordCountLib” and create C# class file “WordCountClass”.</li>\n<li>Copy below code containing methods “FindWordCounts” and “FindWordCountsAsync”.<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text.RegularExpressions;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WordCountLib</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WordCountClass</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Reads through the file, generates unique words and its number of occurrences</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">FindWordCounts</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//Ensure that LongFile.txt exists</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> words = Regex.Matches(File.ReadAllText(<span class=\"string\">@\"D:\\\\LongFile.txt\"</span>), <span class=\"string\">@\"\\\\w+\"</span>).Cast()</span><br><span class=\"line\">            .Select((m, pos) =&gt; <span class=\"keyword\">new</span> &#123; Word = m.Value, Pos = pos &#125;)</span><br><span class=\"line\">            .GroupBy(s =&gt; s.Word, StringComparer.CurrentCultureIgnoreCase)</span><br><span class=\"line\">            .Select(g =&gt; <span class=\"keyword\">new</span> Words &#123; WordName = g.Key, NoOfOccurance = g.Select(z =&gt; z.Pos).Count() &#125;)</span><br><span class=\"line\">            .ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> words;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Reads through the file, generates unique words and its number of occurrences using Async and Await</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">FindWordCountsAsync</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//Ensure that LongFile.txt exists</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> words = Regex.Matches(File.ReadAllText(<span class=\"string\">@\"D:\\\\LongFile.txt\"</span>), <span class=\"string\">@\"\\\\w+\"</span>).Cast()</span><br><span class=\"line\">            .Select((m, pos) =&gt; <span class=\"keyword\">new</span> &#123; Word = m.Value, Pos = pos &#125;)</span><br><span class=\"line\">            .GroupBy(s =&gt; s.Word, StringComparer.CurrentCultureIgnoreCase)</span><br><span class=\"line\">            .Select(g =&gt; <span class=\"keyword\">new</span> Words &#123; WordName = g.Key, NoOfOccurance = g.Select(z =&gt; z.Pos).Count() &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//This is more like Task-Based Asynchronous Pattern</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> Task.Run(() =&gt; words.ToList());           </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Create C# class “Words”. This is POCO class to hold words name and its occurrences. Copy below<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WordCountLib</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Words</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> WordName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> NoOfOccurance &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>LongFile.txt contains text copied from <a href=\"http://norvig.com/big.txt\" target=\"_blank\" rel=\"noopener\">http://norvig.com/big.txt</a> ; I have copied all text twice so that file is 12MB and processing should take time. Ensure that you have file at D:\\LongFile.txt or else FileNotFound exception. <em>Its present in GitHub source now.</em></li>\n</ul>\n<h3 id=\"Building-UI-using-WPF\"><a href=\"#Building-UI-using-WPF\" class=\"headerlink\" title=\"Building UI using WPF\"></a>Building UI using WPF</h3><ul>\n<li>Create WPF application “WordCount.UI”, add “WordCountLib” assembly reference so that we can call WordCountClass methods.</li>\n<li>Open MainWindow.xaml and copy below code. This is startup window for our WPF. Draw using toolbar not so elegant but that’s  not needed.</li>\n</ul>\n<p>Due to some issues in pasting XAML code, I have moved the entire demo application to GitHub, download it from <a href=\"https://github.com/mithunvp/AsyncAwaitDemoApp\" target=\"_blank\" rel=\"noopener\">Async Await Demo App</a></p>\n<ul>\n<li>Open MainWindow.xaml.cs, its code behind file for our start up window. Copy the below code.<ul>\n<li>Method “btndwn_Click” is old school type of button click event handler for “Search Words”, it instantiate “WordCountClass”, calls “FindWordsCounts”, shows listbox and binds a list of words to listbox</li>\n<li>Method “btndwnasyn_Click” is old school type of button click event handler for “Search Words Async Way”, it instantiate “WordCountClass”, calls “FindWordsCountsAsync”, shows listbox and binds a list of words to listbox. Note that it has async keyword in its method signature and await keyword while “FindWordsCountsAsync”</li>\n<li>“Log” is very simple method to log information to screen.</li>\n</ul>\n</li>\n<li>Build and run it, check out image after it loads screen.</li>\n</ul>\n<blockquote>\n<p>If we carefully see, await keyword is placed in-line while calling “FindWordsCountsAsync”. It clearly indicates this method is time-consuming and will block UI thread.<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows;</span><br><span class=\"line\"><span class=\"keyword\">using</span> WordCountLib;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WordCount.UI</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Interaction logic for MainWindow.xaml</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">MainWindow</span> : <span class=\"title\">Window</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MainWindow</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            InitializeComponent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Button click Synchronous processing</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> </span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">void</span> <span class=\"title\">btndwn_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Log(<span class=\"string\">\"START\"</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (listBox.Visibility == Visibility.Visible)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                listBox.Visibility = Visibility.Collapsed;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            WordCountClass wrdSimple = <span class=\"keyword\">new</span> WordCountClass();            </span><br><span class=\"line\">            <span class=\"keyword\">var</span> listCount = wrdSimple.FindWordCounts();            </span><br><span class=\"line\">            listBox.Visibility = Visibility.Visible;</span><br><span class=\"line\">            listBoxasync.Visibility = Visibility.Collapsed;</span><br><span class=\"line\">            listBox.ItemsSource = listCount;            </span><br><span class=\"line\">            Log(<span class=\"string\">\"Done \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> <span class=\"keyword\">void</span> <span class=\"title\">btndwnasyn_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            Log(<span class=\"string\">\"START Async\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (listBoxasync.Visibility == Visibility.Visible)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                listBoxasync.Visibility = Visibility.Collapsed;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            WordCountClass wrdSimple = <span class=\"keyword\">new</span> WordCountClass();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> listCount = <span class=\"keyword\">await</span> wrdSimple.FindWordCountsAsync();</span><br><span class=\"line\">            listBoxasync.Visibility = Visibility.Visible;</span><br><span class=\"line\">            listBox.Visibility = Visibility.Collapsed;</span><br><span class=\"line\">            listBoxasync.ItemsSource = listCount;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Log(<span class=\"string\">\"Done Async\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Log</span>(<span class=\"params\"><span class=\"keyword\">string</span> text</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">string</span> line = <span class=\"keyword\">string</span>.Format(<span class=\"string\">\"&#123;0:HH:mm:ss.fff&#125;: &#123;1&#125;\\\\r\\\\n\"</span>, DateTime.Now, text);</span><br><span class=\"line\">            logtxtBlock.AppendText(line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/asyncWindow.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/asyncWindow.png\" alt=\"WPF Main Window for Async Await Demo\"></a></p>\n</blockquote>\n<h3 id=\"Testing-the-responsiveness-of-the-WPF-UI\"><a href=\"#Testing-the-responsiveness-of-the-WPF-UI\" class=\"headerlink\" title=\"Testing the responsiveness of the WPF UI\"></a>Testing the responsiveness of the WPF UI</h3><ul>\n<li><p>Click on button “Search Words”, try to move window, resize it. You can’t do anything as it reads the file, finds all words count and binds to list box. This is called non responsive UI or application hanging. Check out GIF image below. Notice that after it loads list box, screen window moves bit because after button click I tried to use window.<br><a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/asyncNONresponsive.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/asyncNONresponsive.gif\" alt=\"Non Responsive UI on button click\"></a></p>\n</li>\n<li><p>Now run application again, click “Search Words Async Way”. Just move around window, resize it, see Log information being written. This called <strong>RESPONSIVE UI using Async Await in C#</strong></p>\n</li>\n<li>Just play around it by clicking buttons back and forth.</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/NewResponsiveUI.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/NewResponsiveUI.gif\" alt=\"Responsive UI using Async Await\"></a>  </p>\n<blockquote>\n<ul>\n<li>Async methods are intended to be non-blocking operations. An await expression in an async method doesn’t block the current thread while the awaited task is running.</li>\n<li>The async and await keywords don’t cause extra threads to be created. Async methods don’t need multi-threading because an async method doesn’t run on its own thread.</li>\n</ul>\n</blockquote>\n","popularPost_tmp_postPath":false,"popularPost_tmp_gaData":{"updated":"Thu Jul 26 2018 23:55:19 GMT+0530 (India Standard Time)","title":"Building Responsive UI using Async Await in C#","path":"building-responsive-ui-using-async-await-csharp/","eyeCatchImage":null,"excerpt":null,"date":"2015-09-12T21:28:02.000Z","pv":0,"totalPV":0,"categories":".NET","tags":["C#","AsyncAwait"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Understanding Clean, Build and Rebuild in Visual Studio","url":"84.html","id":"84","date":"2013-09-30T18:26:00.000Z","_content":"\nThere isn't any DOT NET developer using Visual Studio as IDE hasn't used Clean, Build and Rebuild features as part of the Solution Explorer. They come handy when we work on large projects having multiple references, projects which get updated very often or hardly updated with any code changes. Recently i have being dealing with solution having more than 40 projects with lots of proxy service references. Source code in TFS gets checked almost every hour. Sometimes it says \"BUILD SUCCEED\" but on running the application, every things breaks down. I just CLEAN Solution, then REBUILD or BUILD Solution, it starts working. This isn't magic in Visual Studio nor it's best practice to followed but its worth knowing that what actually Clean, Build & Rebuild in Visual Studio main functionality is.\n\nCreating a solution in Visual Studio with different projects\n------------------------------------------------------------\n\n*    Created a blank solution \"CleanBuildSolution\" in Visual Studio 2012.\n*   Add class library project to it \"EmployeeDetails\" to above solution. It has three files _EmployeeObject_.cs, _EmployeeOperations.cs_, _EmployeeStore.xml_\n*   Add WPF project \"EmployeeDetails.UI\". At present it doesn't contain any reference to class library project created above. _Note: Any project template can be used Windows Forms, ASP.NET, Console etc_ [![Solution having 2 projects created by following above steps](http://www.mithunvp.com/wp-content/uploads/2013/09/build-new-project-172x300.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/build-new-project.png)\n\nWhen we check the folders in this solution, it contains only files which we created in above steps along with project files. Now then Build solution by 2 ways \"Right click solution --> Build Solution\" or Press F6 key. If we see now in file explorer, few folders got created like \"bin\", \"Debug\", \"Release\", \"obj\", this is effect of BUILD SOLUTION telling that \"I have now transformed the C# code into assembly\".\n\nReferring another library in a project\n--------------------------------------\n\n*   In the project \"_EmployeeDetails.UI_\", add \"_EmployeeDetails_\" class library project. Now either BUILD or REBUILD solution. Here in this step \"_EmployeeDetails.UI_\" will be added with assembly and any other files part of class library. Below screen shot shows DLL, EXE, XML files of both projects.\n\n[![Assemblies, Files, Configs when we build or rebuild a solution](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-300x72.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build.png)\n\nUnderstanding the difference between BUILD, REBUILD, CLEAN in Visual Studio\n---------------------------------------------------------------------------\n\n### What is a Build Solution?\n\n> **Build Solution** \\- Builds any assemblies which have changed files. If an assembly has no changes, it won't be re-built. Also will not delete any intermediate files.\n\n*   Modify some code in \"EmployeeDetails\" library project, then BUILD solution. In the below screen shot, refer time stamp of DLL, EXE its updated. It happens for both projects as library project is referred in WPF application.\n\n[![Assemblies, EXE gets complied after code changes on BUILD solution.](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange-300x67.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange.png).\n\n*   Now modify or add some code in \"EmployeeDetails.UI\" WPF project. Build this project to see what happens. Only WPF project gets complied or builded. Figure 4 shows that only code changes gets build not all projects.\n\n[![Code changed in WPF will be complied when we BUILD it.](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange-wpf-300x64.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange-wpf.png)\n\n### What is Rebuild Solution?\n\n> **Rebuild solution** will clean and then build the solution from scratch, ignoring anything it's done before\n\n*   Right click on the solution name \"CleanBuildSolution\". What it does is deletes all the assemblies, exe's and referred files to compile again. Screen shot below shows this\n\n[![Shows time stamp on assemblies, exe in folder indicating all where deleted & recompiled.](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-ReBuild-300x68.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-ReBuild.png).\n\n### What is Clean Solution?\n\n> **Clean Solution** will delete all compiled files (i.e., EXE’s and DLL’s) from the bin/obj directory.\n\n*   Right click on solution \"CleanBuildSolution\" or WPF project \"EmployeeDetails.UI\" and click on CLEAN. This will delete all the compiled files from BIN/ OBJ directory. This is quite important esp when we are working on large of inter linked projects.  **There is no files in BIN/ OBJ folders to show screen shot**.\n\nThis Visual Studio's feature is one of best among its numerous features. Lets Clean, Build and Rebuild solutions everyday !!!  Reference: [Building and Cleaning Projects and Solutions in Visual Studio](http://msdn.microsoft.com/en-us/library/vstudio/5tdasz7h.aspx \"Building and Cleaning Projects and Solutions in Visual Studio\")","source":"_posts/clean-build-and-rebuild-in-visual-studio.md","raw":"---\ntitle: 'Understanding Clean, Build and Rebuild in Visual Studio'\nurl: 84.html\nid: 84\ncategories:\n  - .NET\ndate: 2013-09-30 23:56:00\ntags:\n---\n\nThere isn't any DOT NET developer using Visual Studio as IDE hasn't used Clean, Build and Rebuild features as part of the Solution Explorer. They come handy when we work on large projects having multiple references, projects which get updated very often or hardly updated with any code changes. Recently i have being dealing with solution having more than 40 projects with lots of proxy service references. Source code in TFS gets checked almost every hour. Sometimes it says \"BUILD SUCCEED\" but on running the application, every things breaks down. I just CLEAN Solution, then REBUILD or BUILD Solution, it starts working. This isn't magic in Visual Studio nor it's best practice to followed but its worth knowing that what actually Clean, Build & Rebuild in Visual Studio main functionality is.\n\nCreating a solution in Visual Studio with different projects\n------------------------------------------------------------\n\n*    Created a blank solution \"CleanBuildSolution\" in Visual Studio 2012.\n*   Add class library project to it \"EmployeeDetails\" to above solution. It has three files _EmployeeObject_.cs, _EmployeeOperations.cs_, _EmployeeStore.xml_\n*   Add WPF project \"EmployeeDetails.UI\". At present it doesn't contain any reference to class library project created above. _Note: Any project template can be used Windows Forms, ASP.NET, Console etc_ [![Solution having 2 projects created by following above steps](http://www.mithunvp.com/wp-content/uploads/2013/09/build-new-project-172x300.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/build-new-project.png)\n\nWhen we check the folders in this solution, it contains only files which we created in above steps along with project files. Now then Build solution by 2 ways \"Right click solution --> Build Solution\" or Press F6 key. If we see now in file explorer, few folders got created like \"bin\", \"Debug\", \"Release\", \"obj\", this is effect of BUILD SOLUTION telling that \"I have now transformed the C# code into assembly\".\n\nReferring another library in a project\n--------------------------------------\n\n*   In the project \"_EmployeeDetails.UI_\", add \"_EmployeeDetails_\" class library project. Now either BUILD or REBUILD solution. Here in this step \"_EmployeeDetails.UI_\" will be added with assembly and any other files part of class library. Below screen shot shows DLL, EXE, XML files of both projects.\n\n[![Assemblies, Files, Configs when we build or rebuild a solution](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-300x72.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build.png)\n\nUnderstanding the difference between BUILD, REBUILD, CLEAN in Visual Studio\n---------------------------------------------------------------------------\n\n### What is a Build Solution?\n\n> **Build Solution** \\- Builds any assemblies which have changed files. If an assembly has no changes, it won't be re-built. Also will not delete any intermediate files.\n\n*   Modify some code in \"EmployeeDetails\" library project, then BUILD solution. In the below screen shot, refer time stamp of DLL, EXE its updated. It happens for both projects as library project is referred in WPF application.\n\n[![Assemblies, EXE gets complied after code changes on BUILD solution.](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange-300x67.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange.png).\n\n*   Now modify or add some code in \"EmployeeDetails.UI\" WPF project. Build this project to see what happens. Only WPF project gets complied or builded. Figure 4 shows that only code changes gets build not all projects.\n\n[![Code changed in WPF will be complied when we BUILD it.](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange-wpf-300x64.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange-wpf.png)\n\n### What is Rebuild Solution?\n\n> **Rebuild solution** will clean and then build the solution from scratch, ignoring anything it's done before\n\n*   Right click on the solution name \"CleanBuildSolution\". What it does is deletes all the assemblies, exe's and referred files to compile again. Screen shot below shows this\n\n[![Shows time stamp on assemblies, exe in folder indicating all where deleted & recompiled.](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-ReBuild-300x68.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-ReBuild.png).\n\n### What is Clean Solution?\n\n> **Clean Solution** will delete all compiled files (i.e., EXE’s and DLL’s) from the bin/obj directory.\n\n*   Right click on solution \"CleanBuildSolution\" or WPF project \"EmployeeDetails.UI\" and click on CLEAN. This will delete all the compiled files from BIN/ OBJ directory. This is quite important esp when we are working on large of inter linked projects.  **There is no files in BIN/ OBJ folders to show screen shot**.\n\nThis Visual Studio's feature is one of best among its numerous features. Lets Clean, Build and Rebuild solutions everyday !!!  Reference: [Building and Cleaning Projects and Solutions in Visual Studio](http://msdn.microsoft.com/en-us/library/vstudio/5tdasz7h.aspx \"Building and Cleaning Projects and Solutions in Visual Studio\")","slug":"clean-build-and-rebuild-in-visual-studio","published":1,"updated":"2018-07-26T18:04:54.943Z","_id":"cjjt034we0011s4tj6slxo3uf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>There isn’t any DOT NET developer using Visual Studio as IDE hasn’t used Clean, Build and Rebuild features as part of the Solution Explorer. They come handy when we work on large projects having multiple references, projects which get updated very often or hardly updated with any code changes. Recently i have being dealing with solution having more than 40 projects with lots of proxy service references. Source code in TFS gets checked almost every hour. Sometimes it says “BUILD SUCCEED” but on running the application, every things breaks down. I just CLEAN Solution, then REBUILD or BUILD Solution, it starts working. This isn’t magic in Visual Studio nor it’s best practice to followed but its worth knowing that what actually Clean, Build &amp; Rebuild in Visual Studio main functionality is.</p>\n<h2 id=\"Creating-a-solution-in-Visual-Studio-with-different-projects\"><a href=\"#Creating-a-solution-in-Visual-Studio-with-different-projects\" class=\"headerlink\" title=\"Creating a solution in Visual Studio with different projects\"></a>Creating a solution in Visual Studio with different projects</h2><ul>\n<li>Created a blank solution “CleanBuildSolution” in Visual Studio 2012.</li>\n<li>Add class library project to it “EmployeeDetails” to above solution. It has three files <em>EmployeeObject</em>.cs, <em>EmployeeOperations.cs</em>, <em>EmployeeStore.xml</em></li>\n<li>Add WPF project “EmployeeDetails.UI”. At present it doesn’t contain any reference to class library project created above. <em>Note: Any project template can be used Windows Forms, ASP.NET, Console etc</em> <a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/build-new-project.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/build-new-project-172x300.png\" alt=\"Solution having 2 projects created by following above steps\"></a></li>\n</ul>\n<p>When we check the folders in this solution, it contains only files which we created in above steps along with project files. Now then Build solution by 2 ways “Right click solution –&gt; Build Solution” or Press F6 key. If we see now in file explorer, few folders got created like “bin”, “Debug”, “Release”, “obj”, this is effect of BUILD SOLUTION telling that “I have now transformed the C# code into assembly”.</p>\n<h2 id=\"Referring-another-library-in-a-project\"><a href=\"#Referring-another-library-in-a-project\" class=\"headerlink\" title=\"Referring another library in a project\"></a>Referring another library in a project</h2><ul>\n<li>In the project “<em>EmployeeDetails.UI</em>“, add “<em>EmployeeDetails</em>“ class library project. Now either BUILD or REBUILD solution. Here in this step “<em>EmployeeDetails.UI</em>“ will be added with assembly and any other files part of class library. Below screen shot shows DLL, EXE, XML files of both projects.</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-300x72.png\" alt=\"Assemblies, Files, Configs when we build or rebuild a solution\"></a></p>\n<h2 id=\"Understanding-the-difference-between-BUILD-REBUILD-CLEAN-in-Visual-Studio\"><a href=\"#Understanding-the-difference-between-BUILD-REBUILD-CLEAN-in-Visual-Studio\" class=\"headerlink\" title=\"Understanding the difference between BUILD, REBUILD, CLEAN in Visual Studio\"></a>Understanding the difference between BUILD, REBUILD, CLEAN in Visual Studio</h2><h3 id=\"What-is-a-Build-Solution\"><a href=\"#What-is-a-Build-Solution\" class=\"headerlink\" title=\"What is a Build Solution?\"></a>What is a Build Solution?</h3><blockquote>\n<p><strong>Build Solution</strong> - Builds any assemblies which have changed files. If an assembly has no changes, it won’t be re-built. Also will not delete any intermediate files.</p>\n</blockquote>\n<ul>\n<li>Modify some code in “EmployeeDetails” library project, then BUILD solution. In the below screen shot, refer time stamp of DLL, EXE its updated. It happens for both projects as library project is referred in WPF application.</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange-300x67.png\" alt=\"Assemblies, EXE gets complied after code changes on BUILD solution.\"></a>.</p>\n<ul>\n<li>Now modify or add some code in “EmployeeDetails.UI” WPF project. Build this project to see what happens. Only WPF project gets complied or builded. Figure 4 shows that only code changes gets build not all projects.</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange-wpf.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange-wpf-300x64.png\" alt=\"Code changed in WPF will be complied when we BUILD it.\"></a></p>\n<h3 id=\"What-is-Rebuild-Solution\"><a href=\"#What-is-Rebuild-Solution\" class=\"headerlink\" title=\"What is Rebuild Solution?\"></a>What is Rebuild Solution?</h3><blockquote>\n<p><strong>Rebuild solution</strong> will clean and then build the solution from scratch, ignoring anything it’s done before</p>\n</blockquote>\n<ul>\n<li>Right click on the solution name “CleanBuildSolution”. What it does is deletes all the assemblies, exe’s and referred files to compile again. Screen shot below shows this</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-ReBuild.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-ReBuild-300x68.png\" alt=\"Shows time stamp on assemblies, exe in folder indicating all where deleted &amp; recompiled.\"></a>.</p>\n<h3 id=\"What-is-Clean-Solution\"><a href=\"#What-is-Clean-Solution\" class=\"headerlink\" title=\"What is Clean Solution?\"></a>What is Clean Solution?</h3><blockquote>\n<p><strong>Clean Solution</strong> will delete all compiled files (i.e., EXE’s and DLL’s) from the bin/obj directory.</p>\n</blockquote>\n<ul>\n<li>Right click on solution “CleanBuildSolution” or WPF project “EmployeeDetails.UI” and click on CLEAN. This will delete all the compiled files from BIN/ OBJ directory. This is quite important esp when we are working on large of inter linked projects.  <strong>There is no files in BIN/ OBJ folders to show screen shot</strong>.</li>\n</ul>\n<p>This Visual Studio’s feature is one of best among its numerous features. Lets Clean, Build and Rebuild solutions everyday !!!  Reference: <a href=\"http://msdn.microsoft.com/en-us/library/vstudio/5tdasz7h.aspx\" title=\"Building and Cleaning Projects and Solutions in Visual Studio\" target=\"_blank\" rel=\"noopener\">Building and Cleaning Projects and Solutions in Visual Studio</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>There isn’t any DOT NET developer using Visual Studio as IDE hasn’t used Clean, Build and Rebuild features as part of the Solution Explorer. They come handy when we work on large projects having multiple references, projects which get updated very often or hardly updated with any code changes. Recently i have being dealing with solution having more than 40 projects with lots of proxy service references. Source code in TFS gets checked almost every hour. Sometimes it says “BUILD SUCCEED” but on running the application, every things breaks down. I just CLEAN Solution, then REBUILD or BUILD Solution, it starts working. This isn’t magic in Visual Studio nor it’s best practice to followed but its worth knowing that what actually Clean, Build &amp; Rebuild in Visual Studio main functionality is.</p>\n<h2 id=\"Creating-a-solution-in-Visual-Studio-with-different-projects\"><a href=\"#Creating-a-solution-in-Visual-Studio-with-different-projects\" class=\"headerlink\" title=\"Creating a solution in Visual Studio with different projects\"></a>Creating a solution in Visual Studio with different projects</h2><ul>\n<li>Created a blank solution “CleanBuildSolution” in Visual Studio 2012.</li>\n<li>Add class library project to it “EmployeeDetails” to above solution. It has three files <em>EmployeeObject</em>.cs, <em>EmployeeOperations.cs</em>, <em>EmployeeStore.xml</em></li>\n<li>Add WPF project “EmployeeDetails.UI”. At present it doesn’t contain any reference to class library project created above. <em>Note: Any project template can be used Windows Forms, ASP.NET, Console etc</em> <a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/build-new-project.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/build-new-project-172x300.png\" alt=\"Solution having 2 projects created by following above steps\"></a></li>\n</ul>\n<p>When we check the folders in this solution, it contains only files which we created in above steps along with project files. Now then Build solution by 2 ways “Right click solution –&gt; Build Solution” or Press F6 key. If we see now in file explorer, few folders got created like “bin”, “Debug”, “Release”, “obj”, this is effect of BUILD SOLUTION telling that “I have now transformed the C# code into assembly”.</p>\n<h2 id=\"Referring-another-library-in-a-project\"><a href=\"#Referring-another-library-in-a-project\" class=\"headerlink\" title=\"Referring another library in a project\"></a>Referring another library in a project</h2><ul>\n<li>In the project “<em>EmployeeDetails.UI</em>“, add “<em>EmployeeDetails</em>“ class library project. Now either BUILD or REBUILD solution. Here in this step “<em>EmployeeDetails.UI</em>“ will be added with assembly and any other files part of class library. Below screen shot shows DLL, EXE, XML files of both projects.</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-300x72.png\" alt=\"Assemblies, Files, Configs when we build or rebuild a solution\"></a></p>\n<h2 id=\"Understanding-the-difference-between-BUILD-REBUILD-CLEAN-in-Visual-Studio\"><a href=\"#Understanding-the-difference-between-BUILD-REBUILD-CLEAN-in-Visual-Studio\" class=\"headerlink\" title=\"Understanding the difference between BUILD, REBUILD, CLEAN in Visual Studio\"></a>Understanding the difference between BUILD, REBUILD, CLEAN in Visual Studio</h2><h3 id=\"What-is-a-Build-Solution\"><a href=\"#What-is-a-Build-Solution\" class=\"headerlink\" title=\"What is a Build Solution?\"></a>What is a Build Solution?</h3><blockquote>\n<p><strong>Build Solution</strong> - Builds any assemblies which have changed files. If an assembly has no changes, it won’t be re-built. Also will not delete any intermediate files.</p>\n</blockquote>\n<ul>\n<li>Modify some code in “EmployeeDetails” library project, then BUILD solution. In the below screen shot, refer time stamp of DLL, EXE its updated. It happens for both projects as library project is referred in WPF application.</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange-300x67.png\" alt=\"Assemblies, EXE gets complied after code changes on BUILD solution.\"></a>.</p>\n<ul>\n<li>Now modify or add some code in “EmployeeDetails.UI” WPF project. Build this project to see what happens. Only WPF project gets complied or builded. Figure 4 shows that only code changes gets build not all projects.</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange-wpf.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-Build-codeChange-wpf-300x64.png\" alt=\"Code changed in WPF will be complied when we BUILD it.\"></a></p>\n<h3 id=\"What-is-Rebuild-Solution\"><a href=\"#What-is-Rebuild-Solution\" class=\"headerlink\" title=\"What is Rebuild Solution?\"></a>What is Rebuild Solution?</h3><blockquote>\n<p><strong>Rebuild solution</strong> will clean and then build the solution from scratch, ignoring anything it’s done before</p>\n</blockquote>\n<ul>\n<li>Right click on the solution name “CleanBuildSolution”. What it does is deletes all the assemblies, exe’s and referred files to compile again. Screen shot below shows this</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-ReBuild.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/Project-reference-ReBuild-300x68.png\" alt=\"Shows time stamp on assemblies, exe in folder indicating all where deleted &amp; recompiled.\"></a>.</p>\n<h3 id=\"What-is-Clean-Solution\"><a href=\"#What-is-Clean-Solution\" class=\"headerlink\" title=\"What is Clean Solution?\"></a>What is Clean Solution?</h3><blockquote>\n<p><strong>Clean Solution</strong> will delete all compiled files (i.e., EXE’s and DLL’s) from the bin/obj directory.</p>\n</blockquote>\n<ul>\n<li>Right click on solution “CleanBuildSolution” or WPF project “EmployeeDetails.UI” and click on CLEAN. This will delete all the compiled files from BIN/ OBJ directory. This is quite important esp when we are working on large of inter linked projects.  <strong>There is no files in BIN/ OBJ folders to show screen shot</strong>.</li>\n</ul>\n<p>This Visual Studio’s feature is one of best among its numerous features. Lets Clean, Build and Rebuild solutions everyday !!!  Reference: <a href=\"http://msdn.microsoft.com/en-us/library/vstudio/5tdasz7h.aspx\" title=\"Building and Cleaning Projects and Solutions in Visual Studio\" target=\"_blank\" rel=\"noopener\">Building and Cleaning Projects and Solutions in Visual Studio</a></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Jul 26 2018 23:34:54 GMT+0530 (India Standard Time)","title":"Understanding Clean, Build and Rebuild in Visual Studio","path":"clean-build-and-rebuild-in-visual-studio/","eyeCatchImage":null,"excerpt":null,"date":"2013-09-30T18:26:00.000Z","pv":0,"totalPV":0,"categories":".NET","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Creating WCF service without SVC file","url":"33.html","id":"33","date":"2013-09-08T17:05:31.000Z","_content":"\nRecently I came across WCF service without SVC file and was wondering how to achieve this. This post teaches us how to create SVC less WCF service.\n\n> .SVC files are used to host WCF service in IIS.\n\n\nCreating WCF service without SVC file\n-------------------------------------\n\n*   Create blank solution with name “LearnWCF” with appropriate location.\n*   Add class library project with name “WelcomeService”.\n\n> We are creating class library to understand service interface implementation better.\n\n*   Add DLL reference “**System.ServiceModel**”, this provides classes related to the service model. We are one step closer making class library to WCF service.\n*   Add an interface file “_IWelcomeService.cs_” to the project. Include “System.ServiceModel” namespace section and decorate the interface with **\\[ServiceContract\\]** attribute.\n*   Add method “_GreetWithMessage_” decorating with **\\[OperationContract\\]** attribute. It accepts a string parameter “name” returning welcome message.\n\n[![Service-Operational-Contracts](http://www.mithunvp.com/wp-content/uploads/2013/09/thirdImage-300x193.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/thirdImage.png) IWelcomeService Interface with Service & Operational Contracts\n\n*   Create a class file “_WelcomeService.cs_” which will implement the _IWelcomeService_ interface and only returns formatted string. Here's code snippet in WelcomeService.cs\n{% codeblock lang:cs %}\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nnamespace WelcomeService\n{\n    public class WelcomeService : IWelcomeService\n    {\n        public string GreetWithMessage(string name)\n        {\n            return name + \" Welcome to mithunvp.com !!\";\n        }\n    }\n}\n{% endcodeblock %}\n\nASP.NET Empty web site as hosting application for WCF\n-----------------------------------------------------\n\n*   Add ASP.NET Empty web site to same solution with name “**WelcomeServiceHost**”. Add Reference to the class library “_WelcomeService_” created above. [CodeProject](http://www.codeproject.com)\n\n*   Let’s DEBUG this website to see that happens. This is because we don’t have hosting file in this empty web site and of course its not configured to show directory structure\n\n[![ASP.NET host without SVC file](http://www.mithunvp.com/wp-content/uploads/2013/09/IISError-300x85.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/IISError.png) ASP.NET hosting WCF doesn't contain SVC file. This is the main agenda of the article - Creating WCF service without SVC file. Following image shows that is main setting that enables to access the WCF service.[![web.config for SVC less WCF](http://www.mithunvp.com/wp-content/uploads/2013/09/web-config-settings-300x175.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/web-config-settings.png) \n\n*   Update the ASP.NET site's web.config with below settings to make WCF service to work without SVC\n{% codeblock lang:xml %}\n<configuration>\n <system.web>\n <compilation debug=\"true\" targetFramework=\"4.5\" />\n <httpRuntime targetFramework=\"4.5\" />\n </system.web>\n <system.serviceModel>\n <serviceHostingEnvironment >\n <serviceActivations>\n <add factory=\"System.ServiceModel.Activation.ServiceHostFactory\" \nrelativeAddress=\"./WelcomeServiceHost/WelcomeService.svc\"\n service=\"WelcomeService.WelcomeService\" />\n </serviceActivations>\n </serviceHostingEnvironment>\n <behaviors>\n <serviceBehaviors>\n <behavior>\n <serviceMetadata httpGetEnabled=\"true\"/>\n </behavior>\n </serviceBehaviors>\n </behaviors>\n </system.serviceModel>\n</configuration>\n{% endcodeblock %}\n\n*    DEBUG or RUN Empty website to verify WCF is service ready to be consumed.\n\n[![wcf service ready with SVC](http://www.mithunvp.com/wp-content/uploads/2013/09/service-300x129.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/service.png) WCF service ready to be consumed with SVC link.\n\n> _System.ServiceModel's_ **ServiceActivations** is responsible for creating WCF service without SVC file.","source":"_posts/creating-wcf-service-without-svc.md","raw":"---\ntitle: Creating WCF service without SVC file\nurl: 33.html\nid: 33\ncategories:\n  - .NET\ndate: 2013-09-08 22:35:31\ntags:\n---\n\nRecently I came across WCF service without SVC file and was wondering how to achieve this. This post teaches us how to create SVC less WCF service.\n\n> .SVC files are used to host WCF service in IIS.\n\n\nCreating WCF service without SVC file\n-------------------------------------\n\n*   Create blank solution with name “LearnWCF” with appropriate location.\n*   Add class library project with name “WelcomeService”.\n\n> We are creating class library to understand service interface implementation better.\n\n*   Add DLL reference “**System.ServiceModel**”, this provides classes related to the service model. We are one step closer making class library to WCF service.\n*   Add an interface file “_IWelcomeService.cs_” to the project. Include “System.ServiceModel” namespace section and decorate the interface with **\\[ServiceContract\\]** attribute.\n*   Add method “_GreetWithMessage_” decorating with **\\[OperationContract\\]** attribute. It accepts a string parameter “name” returning welcome message.\n\n[![Service-Operational-Contracts](http://www.mithunvp.com/wp-content/uploads/2013/09/thirdImage-300x193.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/thirdImage.png) IWelcomeService Interface with Service & Operational Contracts\n\n*   Create a class file “_WelcomeService.cs_” which will implement the _IWelcomeService_ interface and only returns formatted string. Here's code snippet in WelcomeService.cs\n{% codeblock lang:cs %}\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nnamespace WelcomeService\n{\n    public class WelcomeService : IWelcomeService\n    {\n        public string GreetWithMessage(string name)\n        {\n            return name + \" Welcome to mithunvp.com !!\";\n        }\n    }\n}\n{% endcodeblock %}\n\nASP.NET Empty web site as hosting application for WCF\n-----------------------------------------------------\n\n*   Add ASP.NET Empty web site to same solution with name “**WelcomeServiceHost**”. Add Reference to the class library “_WelcomeService_” created above. [CodeProject](http://www.codeproject.com)\n\n*   Let’s DEBUG this website to see that happens. This is because we don’t have hosting file in this empty web site and of course its not configured to show directory structure\n\n[![ASP.NET host without SVC file](http://www.mithunvp.com/wp-content/uploads/2013/09/IISError-300x85.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/IISError.png) ASP.NET hosting WCF doesn't contain SVC file. This is the main agenda of the article - Creating WCF service without SVC file. Following image shows that is main setting that enables to access the WCF service.[![web.config for SVC less WCF](http://www.mithunvp.com/wp-content/uploads/2013/09/web-config-settings-300x175.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/web-config-settings.png) \n\n*   Update the ASP.NET site's web.config with below settings to make WCF service to work without SVC\n{% codeblock lang:xml %}\n<configuration>\n <system.web>\n <compilation debug=\"true\" targetFramework=\"4.5\" />\n <httpRuntime targetFramework=\"4.5\" />\n </system.web>\n <system.serviceModel>\n <serviceHostingEnvironment >\n <serviceActivations>\n <add factory=\"System.ServiceModel.Activation.ServiceHostFactory\" \nrelativeAddress=\"./WelcomeServiceHost/WelcomeService.svc\"\n service=\"WelcomeService.WelcomeService\" />\n </serviceActivations>\n </serviceHostingEnvironment>\n <behaviors>\n <serviceBehaviors>\n <behavior>\n <serviceMetadata httpGetEnabled=\"true\"/>\n </behavior>\n </serviceBehaviors>\n </behaviors>\n </system.serviceModel>\n</configuration>\n{% endcodeblock %}\n\n*    DEBUG or RUN Empty website to verify WCF is service ready to be consumed.\n\n[![wcf service ready with SVC](http://www.mithunvp.com/wp-content/uploads/2013/09/service-300x129.png)](http://www.mithunvp.com/wp-content/uploads/2013/09/service.png) WCF service ready to be consumed with SVC link.\n\n> _System.ServiceModel's_ **ServiceActivations** is responsible for creating WCF service without SVC file.","slug":"creating-wcf-service-without-svc","published":1,"updated":"2018-07-26T18:04:36.699Z","_id":"cjjt034wm0014s4tj0alofmj5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Recently I came across WCF service without SVC file and was wondering how to achieve this. This post teaches us how to create SVC less WCF service.</p>\n<blockquote>\n<p>.SVC files are used to host WCF service in IIS.</p>\n</blockquote>\n<h2 id=\"Creating-WCF-service-without-SVC-file\"><a href=\"#Creating-WCF-service-without-SVC-file\" class=\"headerlink\" title=\"Creating WCF service without SVC file\"></a>Creating WCF service without SVC file</h2><ul>\n<li>Create blank solution with name “LearnWCF” with appropriate location.</li>\n<li>Add class library project with name “WelcomeService”.</li>\n</ul>\n<blockquote>\n<p>We are creating class library to understand service interface implementation better.</p>\n</blockquote>\n<ul>\n<li>Add DLL reference “<strong>System.ServiceModel</strong>”, this provides classes related to the service model. We are one step closer making class library to WCF service.</li>\n<li>Add an interface file “<em>IWelcomeService.cs</em>” to the project. Include “System.ServiceModel” namespace section and decorate the interface with <strong>[ServiceContract]</strong> attribute.</li>\n<li>Add method “<em>GreetWithMessage</em>” decorating with <strong>[OperationContract]</strong> attribute. It accepts a string parameter “name” returning welcome message.</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/thirdImage.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/thirdImage-300x193.png\" alt=\"Service-Operational-Contracts\"></a> IWelcomeService Interface with Service &amp; Operational Contracts</p>\n<ul>\n<li>Create a class file “<em>WelcomeService.cs</em>” which will implement the <em>IWelcomeService</em> interface and only returns formatted string. Here’s code snippet in WelcomeService.cs<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WelcomeService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WelcomeService</span> : <span class=\"title\">IWelcomeService</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GreetWithMessage</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name + <span class=\"string\">\" Welcome to mithunvp.com !!\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"ASP-NET-Empty-web-site-as-hosting-application-for-WCF\"><a href=\"#ASP-NET-Empty-web-site-as-hosting-application-for-WCF\" class=\"headerlink\" title=\"ASP.NET Empty web site as hosting application for WCF\"></a>ASP.NET Empty web site as hosting application for WCF</h2><ul>\n<li><p>Add ASP.NET Empty web site to same solution with name “<strong>WelcomeServiceHost</strong>”. Add Reference to the class library “<em>WelcomeService</em>” created above. <a href=\"http://www.codeproject.com\" target=\"_blank\" rel=\"noopener\">CodeProject</a></p>\n</li>\n<li><p>Let’s DEBUG this website to see that happens. This is because we don’t have hosting file in this empty web site and of course its not configured to show directory structure</p>\n</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/IISError.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/IISError-300x85.png\" alt=\"ASP.NET host without SVC file\"></a> ASP.NET hosting WCF doesn’t contain SVC file. This is the main agenda of the article - Creating WCF service without SVC file. Following image shows that is main setting that enables to access the WCF service.<a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/web-config-settings.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/web-config-settings-300x175.png\" alt=\"web.config for SVC less WCF\"></a> </p>\n<ul>\n<li><p>Update the ASP.NET site’s web.config with below settings to make WCF service to work without SVC</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">compilation</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">\"4.5\"</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">httpRuntime</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">\"4.5\"</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">system.serviceModel</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">serviceHostingEnvironment</span> &gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">serviceActivations</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">factory</span>=<span class=\"string\">\"System.ServiceModel.Activation.ServiceHostFactory\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">relativeAddress</span>=<span class=\"string\">\"./WelcomeServiceHost/WelcomeService.svc\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">service</span>=<span class=\"string\">\"WelcomeService.WelcomeService\"</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">serviceActivations</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">serviceHostingEnvironment</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">behaviors</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">serviceBehaviors</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">behavior</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">serviceMetadata</span> <span class=\"attr\">httpGetEnabled</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">behavior</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">serviceBehaviors</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">behaviors</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">system.serviceModel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DEBUG or RUN Empty website to verify WCF is service ready to be consumed.</p>\n</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/service.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/service-300x129.png\" alt=\"wcf service ready with SVC\"></a> WCF service ready to be consumed with SVC link.</p>\n<blockquote>\n<p><em>System.ServiceModel’s</em> <strong>ServiceActivations</strong> is responsible for creating WCF service without SVC file.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Recently I came across WCF service without SVC file and was wondering how to achieve this. This post teaches us how to create SVC less WCF service.</p>\n<blockquote>\n<p>.SVC files are used to host WCF service in IIS.</p>\n</blockquote>\n<h2 id=\"Creating-WCF-service-without-SVC-file\"><a href=\"#Creating-WCF-service-without-SVC-file\" class=\"headerlink\" title=\"Creating WCF service without SVC file\"></a>Creating WCF service without SVC file</h2><ul>\n<li>Create blank solution with name “LearnWCF” with appropriate location.</li>\n<li>Add class library project with name “WelcomeService”.</li>\n</ul>\n<blockquote>\n<p>We are creating class library to understand service interface implementation better.</p>\n</blockquote>\n<ul>\n<li>Add DLL reference “<strong>System.ServiceModel</strong>”, this provides classes related to the service model. We are one step closer making class library to WCF service.</li>\n<li>Add an interface file “<em>IWelcomeService.cs</em>” to the project. Include “System.ServiceModel” namespace section and decorate the interface with <strong>[ServiceContract]</strong> attribute.</li>\n<li>Add method “<em>GreetWithMessage</em>” decorating with <strong>[OperationContract]</strong> attribute. It accepts a string parameter “name” returning welcome message.</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/thirdImage.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/thirdImage-300x193.png\" alt=\"Service-Operational-Contracts\"></a> IWelcomeService Interface with Service &amp; Operational Contracts</p>\n<ul>\n<li>Create a class file “<em>WelcomeService.cs</em>” which will implement the <em>IWelcomeService</em> interface and only returns formatted string. Here’s code snippet in WelcomeService.cs<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Linq;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">WelcomeService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WelcomeService</span> : <span class=\"title\">IWelcomeService</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GreetWithMessage</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name + <span class=\"string\">\" Welcome to mithunvp.com !!\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"ASP-NET-Empty-web-site-as-hosting-application-for-WCF\"><a href=\"#ASP-NET-Empty-web-site-as-hosting-application-for-WCF\" class=\"headerlink\" title=\"ASP.NET Empty web site as hosting application for WCF\"></a>ASP.NET Empty web site as hosting application for WCF</h2><ul>\n<li><p>Add ASP.NET Empty web site to same solution with name “<strong>WelcomeServiceHost</strong>”. Add Reference to the class library “<em>WelcomeService</em>” created above. <a href=\"http://www.codeproject.com\" target=\"_blank\" rel=\"noopener\">CodeProject</a></p>\n</li>\n<li><p>Let’s DEBUG this website to see that happens. This is because we don’t have hosting file in this empty web site and of course its not configured to show directory structure</p>\n</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/IISError.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/IISError-300x85.png\" alt=\"ASP.NET host without SVC file\"></a> ASP.NET hosting WCF doesn’t contain SVC file. This is the main agenda of the article - Creating WCF service without SVC file. Following image shows that is main setting that enables to access the WCF service.<a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/web-config-settings.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/web-config-settings-300x175.png\" alt=\"web.config for SVC less WCF\"></a> </p>\n<ul>\n<li><p>Update the ASP.NET site’s web.config with below settings to make WCF service to work without SVC</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">system.web</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">compilation</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">\"4.5\"</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">httpRuntime</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">\"4.5\"</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">system.web</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">system.serviceModel</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">serviceHostingEnvironment</span> &gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">serviceActivations</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">factory</span>=<span class=\"string\">\"System.ServiceModel.Activation.ServiceHostFactory\"</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">relativeAddress</span>=<span class=\"string\">\"./WelcomeServiceHost/WelcomeService.svc\"</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">service</span>=<span class=\"string\">\"WelcomeService.WelcomeService\"</span> /&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">serviceActivations</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">serviceHostingEnvironment</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">behaviors</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">serviceBehaviors</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">behavior</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">serviceMetadata</span> <span class=\"attr\">httpGetEnabled</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">behavior</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">serviceBehaviors</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">behaviors</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">system.serviceModel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DEBUG or RUN Empty website to verify WCF is service ready to be consumed.</p>\n</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/09/service.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/09/service-300x129.png\" alt=\"wcf service ready with SVC\"></a> WCF service ready to be consumed with SVC link.</p>\n<blockquote>\n<p><em>System.ServiceModel’s</em> <strong>ServiceActivations</strong> is responsible for creating WCF service without SVC file.</p>\n</blockquote>\n","popularPost_tmp_postPath":false,"popularPost_tmp_gaData":{"updated":"Thu Jul 26 2018 23:34:36 GMT+0530 (India Standard Time)","title":"Creating WCF service without SVC file","path":"creating-wcf-service-without-svc/","eyeCatchImage":null,"excerpt":null,"date":"2013-09-08T17:05:31.000Z","pv":0,"totalPV":0,"categories":".NET","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Difference between ASP.NET Core and ASP.NET MVC 5","url":"245.html","id":"245","date":"2015-09-26T14:22:14.000Z","_content":"\nThe best way to learn what's new in any technology is to compare with its earlier version. Here will be understanding the difference between ASP.NET Core (MVC) and ASP.NET MVC 5 by creating a sample application and comparing project solution structure between them. Well, we have many differences between ASP.NET Core MVC and ASP.NET MVC 5 in solution structure itself, let's explore them without a code being written.\n\n> ASP.NET Core is a lean and composable framework for building web and cloud applications. ASP.NET Core is fully open source.\n\nBeing fully open source is not an easy task, Microsoft has done some amazing work on making it work across Windows, Mac, Linux OS.\n\n#### A quick look at ASP.NET Core improvements\n\n*   Build and run cross-platform ASP.NET apps on Windows, Mac, and Linux\n*   Built on .NET Core, which supports true side-by-side app versioning\n*   New tooling that simplifies modern Web development\n*   Single aligned web stack for MVC and Web API\n*   Cloud-ready environment-based configuration\n*   Integrated support for creating and using NuGet packages\n*   Built-in support for dependency injection\n*   Ability to host on IIS or self-host in your own process\n\nFirstly create ASP.NET Core MVC application and ASP.NET MVC 5 using Visual Studio 2015/ VS 2017 Community Edition\n\nDifference 1 - Single aligned web stack for ASP.NET Core MVC and Web APIs\n-------------------------------------------------------------------------\n\nASP.NET MVC 5 will give us option of choosing MVC or Web API or both while creating a web application. It was because web stack for MVC 5 and Web API was not the same. ASP.NET Core MVC now has single aligned web stack for MVC and Web API. The image below shows checkbox is GREYED out for MVC and Web API while MVC 5 gives the option to add Web API.[![Single aligned web stack for MVC and Web APIs](http://www.mithunvp.com/wp-content/uploads/2015/09/difference1-1024x422.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/09/difference1.jpg)\n\nDifference 2 - Project(Solution) Structure Changes\n--------------------------------------------------\n\nIf you see ASP.NET Core MVC solution explorer on the right-hand side, there is no Web.config, Global.asax. Then how it deals with configuration settings, authentication and application start specific code execution. **appsettings.json, custom configuration files** are some files which do those work of missing files from ASP.NET MVC 5. There are many changes if we look at folder by folder. [![Difference in Project structure (Old image)](http://www.mithunvp.com/wp-content/uploads/2015/09/difference2.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/09/difference2.jpg)\n\nDifference 3 - ASP.NET Core targets Full .NET  and .NET Core\n------------------------------------------------------------\n\nWe have been working on the full .NET framework, it is an amazing experience till now and will continue to be. Then what is .NET core?\n\n> .NET Core is a general purpose development platform maintained by Microsoft and the .NET community on GitHub. It is cross-platform, supporting Windows, macOS and Linux, and can be used in device, cloud, and embedded/IoT scenarios\n\nOh, cross-platform !! Yes, now we can develop ASP.NET Core web apps against the .NET core and run in either Windows or Linux or Mac. Wait it's not over yet, not only we can develop in Windows OS but also in Linux, Mac using [Visual Studio Code](https://code.visualstudio.com/)  or any other code editors like Vim, Atom, Sublime\n\nDifference 4 - ASP.NET Core apps  don't need IIS for hosting\n------------------------------------------------------------\n\nDon't get surprised, the goal of ASP.NET Core is to be cross-platform using .NET Core. With this in mind, Microsoft decided to host ASP.NET Core applications not only on IIS but they can be self-hosted or use Nginx web server on Linux. Kestrel will be internal web server for request processing\n\nDifference 5 - wwwroot folder for static files\n----------------------------------------------\n\nThe _wwwroot_ folder represents the actual root of the web app when running on a web server. Static files like config.json, which are not in _wwwroot_ will never be accessible, and there is no need to create special rules to block access to sensitive files. These static files might be plain HTML, Javascript, CSS, images, library etc.[![ASP.NET Core wwwroot - place for static files](http://www.mithunvp.com/wp-content/uploads/2015/09/wwwroot.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/09/wwwroot.jpg). In addition to the security benefits, the wwwroot folder also simplifies common tasks like bundling and minification, which can now be more easily incorporated into a standard build process and automated using tools like Grunt. \"wwwroot\" name can be changed in project.json under \"webroot\": \"Demowwwroot\"      \n\nDifference 6 - New approach to Server side and client side dependency management of packages.\n---------------------------------------------------------------------------------------------\n\nAny .NET developer would be familiar that **References** folder holds all DLLs,  NuGet packages for particular .NET Framework. Leverage the experience of working in Visual Studio IDE and deploy ASP.NET Core applications either on Windows, Linux or Mac using .NET Core. Its Server side management of dependencies. Client-side dependency management is more important because client-side has more different packages from the server side. Client side will surely have jQuery, Bootstrap, grunt, any Javascript frameworks like AngularJS, Backbone etc, images, style files. Client-side package management in open source community has two great names \"Bower\" and \"NPM\". They are part of \"Dependencies\". [![Server Side and Client Side Dependency Management (Old Image)](http://www.mithunvp.com/wp-content/uploads/2015/09/server-client-side.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/09/server-client-side.jpg)\n\nDifference 7 - Server-side packages save space in ASP.NET Core\n--------------------------------------------------------------\n\nWe have been using NuGet package manager to add a reference to assemblies, library, framework or any third party packages. They would have been downloaded from NuGet which creates \"Packages\" folder in project structure. 30 sample ASP.NET applications, all of them use NuGet packages to reference dependencies each costly approx 70 MB disk space, so we end up nearly using 2GB disk space for storing packages even though they all are same. Some SMART developers know this issue, they have some workaround of their own. ASP.NET Core came up with storing all the packages related to its development in Users folder and while creating ASP.NET Core applications, Visual Studio will reference them from Users folder. This feature is called _**Runtime Store for .NET Core 2**_ Now even if you have 100 sample ASP.NET Core applications, they all are referencing from _**dotnet**_ in Users folder which is near to few MBs only.\n\nDifference 8 - Inbuilt Dependency Injection (DI) support for ASP.NET Core\n-------------------------------------------------------------------------\n\nDependency Injection (DI) achieves loosely coupled, more testable code, it's very important because it helps for writing unit testing. In ASP.NET MVC 5/4 or classic ASPX based applications, we use to have separate DI containers used like Unity, AutoFac, StructureMap etc. We had to build up our project to use DI, its additional effort. Now in ASP.NET Core applications, dependency injection is inbuilt i.e. no setup headache for DI. Just create some services and get ready to use DI. In fact sample Core MVC application has DI inbuilt in it, let's open \"Startup.cs\" and look for \"ConfigureServices(IServiceCollection services)\" method. Its main purpose is the configuration of services like EF, Authentication, adding MVC and handwritten custom services like IEmailServer and ISmsSender. [![Inbuilt Dependency Injection in ASP.NET Core](http://www.mithunvp.com/wp-content/uploads/2015/09/diexample.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/09/diexample.jpg)\n\nDifference 9 - User Secrets of ASP.NET Core\n-------------------------------------------\n\nMany times we keep sensitive data during our development work inside project tree, often we mistakenly share these secrets with other through sharing of code, accidentally adding it TFS (source control). Once in awhile, we might have experienced this. ASP.NET Core based applications have now a concept of User Secrets; The **Secret Manager** tool provides a more general mechanism to store sensitive data for development work outside of your project tree.\n\n> The Secret Manager tool does not encrypt the stored secrets and should not be treated as a trusted store. It is for development purposes only.\n\nThere are many differences compared to ASP.NET MVC 5/4 but without writing single of code if we can find these differences then it means Microsoft has moved much ahead in terms of making it Open Source.","source":"_posts/difference-between-asp-net-mvc6-asp-net-mvc5.md","raw":"---\ntitle: Difference between ASP.NET Core and ASP.NET MVC 5\ntags:\n  - ASP.NET Core\n  - ASP.NET MVC 5\nurl: 245.html\nid: 245\ncategories:\n  - ASP.NET Core\ndate: 2015-09-26 19:52:14\n---\n\nThe best way to learn what's new in any technology is to compare with its earlier version. Here will be understanding the difference between ASP.NET Core (MVC) and ASP.NET MVC 5 by creating a sample application and comparing project solution structure between them. Well, we have many differences between ASP.NET Core MVC and ASP.NET MVC 5 in solution structure itself, let's explore them without a code being written.\n\n> ASP.NET Core is a lean and composable framework for building web and cloud applications. ASP.NET Core is fully open source.\n\nBeing fully open source is not an easy task, Microsoft has done some amazing work on making it work across Windows, Mac, Linux OS.\n\n#### A quick look at ASP.NET Core improvements\n\n*   Build and run cross-platform ASP.NET apps on Windows, Mac, and Linux\n*   Built on .NET Core, which supports true side-by-side app versioning\n*   New tooling that simplifies modern Web development\n*   Single aligned web stack for MVC and Web API\n*   Cloud-ready environment-based configuration\n*   Integrated support for creating and using NuGet packages\n*   Built-in support for dependency injection\n*   Ability to host on IIS or self-host in your own process\n\nFirstly create ASP.NET Core MVC application and ASP.NET MVC 5 using Visual Studio 2015/ VS 2017 Community Edition\n\nDifference 1 - Single aligned web stack for ASP.NET Core MVC and Web APIs\n-------------------------------------------------------------------------\n\nASP.NET MVC 5 will give us option of choosing MVC or Web API or both while creating a web application. It was because web stack for MVC 5 and Web API was not the same. ASP.NET Core MVC now has single aligned web stack for MVC and Web API. The image below shows checkbox is GREYED out for MVC and Web API while MVC 5 gives the option to add Web API.[![Single aligned web stack for MVC and Web APIs](http://www.mithunvp.com/wp-content/uploads/2015/09/difference1-1024x422.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/09/difference1.jpg)\n\nDifference 2 - Project(Solution) Structure Changes\n--------------------------------------------------\n\nIf you see ASP.NET Core MVC solution explorer on the right-hand side, there is no Web.config, Global.asax. Then how it deals with configuration settings, authentication and application start specific code execution. **appsettings.json, custom configuration files** are some files which do those work of missing files from ASP.NET MVC 5. There are many changes if we look at folder by folder. [![Difference in Project structure (Old image)](http://www.mithunvp.com/wp-content/uploads/2015/09/difference2.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/09/difference2.jpg)\n\nDifference 3 - ASP.NET Core targets Full .NET  and .NET Core\n------------------------------------------------------------\n\nWe have been working on the full .NET framework, it is an amazing experience till now and will continue to be. Then what is .NET core?\n\n> .NET Core is a general purpose development platform maintained by Microsoft and the .NET community on GitHub. It is cross-platform, supporting Windows, macOS and Linux, and can be used in device, cloud, and embedded/IoT scenarios\n\nOh, cross-platform !! Yes, now we can develop ASP.NET Core web apps against the .NET core and run in either Windows or Linux or Mac. Wait it's not over yet, not only we can develop in Windows OS but also in Linux, Mac using [Visual Studio Code](https://code.visualstudio.com/)  or any other code editors like Vim, Atom, Sublime\n\nDifference 4 - ASP.NET Core apps  don't need IIS for hosting\n------------------------------------------------------------\n\nDon't get surprised, the goal of ASP.NET Core is to be cross-platform using .NET Core. With this in mind, Microsoft decided to host ASP.NET Core applications not only on IIS but they can be self-hosted or use Nginx web server on Linux. Kestrel will be internal web server for request processing\n\nDifference 5 - wwwroot folder for static files\n----------------------------------------------\n\nThe _wwwroot_ folder represents the actual root of the web app when running on a web server. Static files like config.json, which are not in _wwwroot_ will never be accessible, and there is no need to create special rules to block access to sensitive files. These static files might be plain HTML, Javascript, CSS, images, library etc.[![ASP.NET Core wwwroot - place for static files](http://www.mithunvp.com/wp-content/uploads/2015/09/wwwroot.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/09/wwwroot.jpg). In addition to the security benefits, the wwwroot folder also simplifies common tasks like bundling and minification, which can now be more easily incorporated into a standard build process and automated using tools like Grunt. \"wwwroot\" name can be changed in project.json under \"webroot\": \"Demowwwroot\"      \n\nDifference 6 - New approach to Server side and client side dependency management of packages.\n---------------------------------------------------------------------------------------------\n\nAny .NET developer would be familiar that **References** folder holds all DLLs,  NuGet packages for particular .NET Framework. Leverage the experience of working in Visual Studio IDE and deploy ASP.NET Core applications either on Windows, Linux or Mac using .NET Core. Its Server side management of dependencies. Client-side dependency management is more important because client-side has more different packages from the server side. Client side will surely have jQuery, Bootstrap, grunt, any Javascript frameworks like AngularJS, Backbone etc, images, style files. Client-side package management in open source community has two great names \"Bower\" and \"NPM\". They are part of \"Dependencies\". [![Server Side and Client Side Dependency Management (Old Image)](http://www.mithunvp.com/wp-content/uploads/2015/09/server-client-side.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/09/server-client-side.jpg)\n\nDifference 7 - Server-side packages save space in ASP.NET Core\n--------------------------------------------------------------\n\nWe have been using NuGet package manager to add a reference to assemblies, library, framework or any third party packages. They would have been downloaded from NuGet which creates \"Packages\" folder in project structure. 30 sample ASP.NET applications, all of them use NuGet packages to reference dependencies each costly approx 70 MB disk space, so we end up nearly using 2GB disk space for storing packages even though they all are same. Some SMART developers know this issue, they have some workaround of their own. ASP.NET Core came up with storing all the packages related to its development in Users folder and while creating ASP.NET Core applications, Visual Studio will reference them from Users folder. This feature is called _**Runtime Store for .NET Core 2**_ Now even if you have 100 sample ASP.NET Core applications, they all are referencing from _**dotnet**_ in Users folder which is near to few MBs only.\n\nDifference 8 - Inbuilt Dependency Injection (DI) support for ASP.NET Core\n-------------------------------------------------------------------------\n\nDependency Injection (DI) achieves loosely coupled, more testable code, it's very important because it helps for writing unit testing. In ASP.NET MVC 5/4 or classic ASPX based applications, we use to have separate DI containers used like Unity, AutoFac, StructureMap etc. We had to build up our project to use DI, its additional effort. Now in ASP.NET Core applications, dependency injection is inbuilt i.e. no setup headache for DI. Just create some services and get ready to use DI. In fact sample Core MVC application has DI inbuilt in it, let's open \"Startup.cs\" and look for \"ConfigureServices(IServiceCollection services)\" method. Its main purpose is the configuration of services like EF, Authentication, adding MVC and handwritten custom services like IEmailServer and ISmsSender. [![Inbuilt Dependency Injection in ASP.NET Core](http://www.mithunvp.com/wp-content/uploads/2015/09/diexample.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/09/diexample.jpg)\n\nDifference 9 - User Secrets of ASP.NET Core\n-------------------------------------------\n\nMany times we keep sensitive data during our development work inside project tree, often we mistakenly share these secrets with other through sharing of code, accidentally adding it TFS (source control). Once in awhile, we might have experienced this. ASP.NET Core based applications have now a concept of User Secrets; The **Secret Manager** tool provides a more general mechanism to store sensitive data for development work outside of your project tree.\n\n> The Secret Manager tool does not encrypt the stored secrets and should not be treated as a trusted store. It is for development purposes only.\n\nThere are many differences compared to ASP.NET MVC 5/4 but without writing single of code if we can find these differences then it means Microsoft has moved much ahead in terms of making it Open Source.","slug":"difference-between-asp-net-mvc6-asp-net-mvc5","published":1,"updated":"2018-07-26T18:30:24.535Z","_id":"cjjt034wm0017s4tjdvgfj2ou","comments":1,"layout":"post","photos":[],"link":"","content":"<p>The best way to learn what’s new in any technology is to compare with its earlier version. Here will be understanding the difference between ASP.NET Core (MVC) and ASP.NET MVC 5 by creating a sample application and comparing project solution structure between them. Well, we have many differences between ASP.NET Core MVC and ASP.NET MVC 5 in solution structure itself, let’s explore them without a code being written.</p>\n<blockquote>\n<p>ASP.NET Core is a lean and composable framework for building web and cloud applications. ASP.NET Core is fully open source.</p>\n</blockquote>\n<p>Being fully open source is not an easy task, Microsoft has done some amazing work on making it work across Windows, Mac, Linux OS.</p>\n<h4 id=\"A-quick-look-at-ASP-NET-Core-improvements\"><a href=\"#A-quick-look-at-ASP-NET-Core-improvements\" class=\"headerlink\" title=\"A quick look at ASP.NET Core improvements\"></a>A quick look at ASP.NET Core improvements</h4><ul>\n<li>Build and run cross-platform ASP.NET apps on Windows, Mac, and Linux</li>\n<li>Built on .NET Core, which supports true side-by-side app versioning</li>\n<li>New tooling that simplifies modern Web development</li>\n<li>Single aligned web stack for MVC and Web API</li>\n<li>Cloud-ready environment-based configuration</li>\n<li>Integrated support for creating and using NuGet packages</li>\n<li>Built-in support for dependency injection</li>\n<li>Ability to host on IIS or self-host in your own process</li>\n</ul>\n<p>Firstly create ASP.NET Core MVC application and ASP.NET MVC 5 using Visual Studio 2015/ VS 2017 Community Edition</p>\n<h2 id=\"Difference-1-Single-aligned-web-stack-for-ASP-NET-Core-MVC-and-Web-APIs\"><a href=\"#Difference-1-Single-aligned-web-stack-for-ASP-NET-Core-MVC-and-Web-APIs\" class=\"headerlink\" title=\"Difference 1 - Single aligned web stack for ASP.NET Core MVC and Web APIs\"></a>Difference 1 - Single aligned web stack for ASP.NET Core MVC and Web APIs</h2><p>ASP.NET MVC 5 will give us option of choosing MVC or Web API or both while creating a web application. It was because web stack for MVC 5 and Web API was not the same. ASP.NET Core MVC now has single aligned web stack for MVC and Web API. The image below shows checkbox is GREYED out for MVC and Web API while MVC 5 gives the option to add Web API.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/difference1.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/difference1-1024x422.jpg\" alt=\"Single aligned web stack for MVC and Web APIs\"></a></p>\n<h2 id=\"Difference-2-Project-Solution-Structure-Changes\"><a href=\"#Difference-2-Project-Solution-Structure-Changes\" class=\"headerlink\" title=\"Difference 2 - Project(Solution) Structure Changes\"></a>Difference 2 - Project(Solution) Structure Changes</h2><p>If you see ASP.NET Core MVC solution explorer on the right-hand side, there is no Web.config, Global.asax. Then how it deals with configuration settings, authentication and application start specific code execution. <strong>appsettings.json, custom configuration files</strong> are some files which do those work of missing files from ASP.NET MVC 5. There are many changes if we look at folder by folder. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/difference2.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/difference2.jpg\" alt=\"Difference in Project structure (Old image)\"></a></p>\n<h2 id=\"Difference-3-ASP-NET-Core-targets-Full-NET-and-NET-Core\"><a href=\"#Difference-3-ASP-NET-Core-targets-Full-NET-and-NET-Core\" class=\"headerlink\" title=\"Difference 3 - ASP.NET Core targets Full .NET  and .NET Core\"></a>Difference 3 - ASP.NET Core targets Full .NET  and .NET Core</h2><p>We have been working on the full .NET framework, it is an amazing experience till now and will continue to be. Then what is .NET core?</p>\n<blockquote>\n<p>.NET Core is a general purpose development platform maintained by Microsoft and the .NET community on GitHub. It is cross-platform, supporting Windows, macOS and Linux, and can be used in device, cloud, and embedded/IoT scenarios</p>\n</blockquote>\n<p>Oh, cross-platform !! Yes, now we can develop ASP.NET Core web apps against the .NET core and run in either Windows or Linux or Mac. Wait it’s not over yet, not only we can develop in Windows OS but also in Linux, Mac using <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a>  or any other code editors like Vim, Atom, Sublime</p>\n<h2 id=\"Difference-4-ASP-NET-Core-apps-don’t-need-IIS-for-hosting\"><a href=\"#Difference-4-ASP-NET-Core-apps-don’t-need-IIS-for-hosting\" class=\"headerlink\" title=\"Difference 4 - ASP.NET Core apps  don’t need IIS for hosting\"></a>Difference 4 - ASP.NET Core apps  don’t need IIS for hosting</h2><p>Don’t get surprised, the goal of ASP.NET Core is to be cross-platform using .NET Core. With this in mind, Microsoft decided to host ASP.NET Core applications not only on IIS but they can be self-hosted or use Nginx web server on Linux. Kestrel will be internal web server for request processing</p>\n<h2 id=\"Difference-5-wwwroot-folder-for-static-files\"><a href=\"#Difference-5-wwwroot-folder-for-static-files\" class=\"headerlink\" title=\"Difference 5 - wwwroot folder for static files\"></a>Difference 5 - wwwroot folder for static files</h2><p>The <em>wwwroot</em> folder represents the actual root of the web app when running on a web server. Static files like config.json, which are not in <em>wwwroot</em> will never be accessible, and there is no need to create special rules to block access to sensitive files. These static files might be plain HTML, Javascript, CSS, images, library etc.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/wwwroot.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/wwwroot.jpg\" alt=\"ASP.NET Core wwwroot - place for static files\"></a>. In addition to the security benefits, the wwwroot folder also simplifies common tasks like bundling and minification, which can now be more easily incorporated into a standard build process and automated using tools like Grunt. “wwwroot” name can be changed in project.json under “webroot”: “Demowwwroot”      </p>\n<h2 id=\"Difference-6-New-approach-to-Server-side-and-client-side-dependency-management-of-packages\"><a href=\"#Difference-6-New-approach-to-Server-side-and-client-side-dependency-management-of-packages\" class=\"headerlink\" title=\"Difference 6 - New approach to Server side and client side dependency management of packages.\"></a>Difference 6 - New approach to Server side and client side dependency management of packages.</h2><p>Any .NET developer would be familiar that <strong>References</strong> folder holds all DLLs,  NuGet packages for particular .NET Framework. Leverage the experience of working in Visual Studio IDE and deploy ASP.NET Core applications either on Windows, Linux or Mac using .NET Core. Its Server side management of dependencies. Client-side dependency management is more important because client-side has more different packages from the server side. Client side will surely have jQuery, Bootstrap, grunt, any Javascript frameworks like AngularJS, Backbone etc, images, style files. Client-side package management in open source community has two great names “Bower” and “NPM”. They are part of “Dependencies”. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/server-client-side.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/server-client-side.jpg\" alt=\"Server Side and Client Side Dependency Management (Old Image)\"></a></p>\n<h2 id=\"Difference-7-Server-side-packages-save-space-in-ASP-NET-Core\"><a href=\"#Difference-7-Server-side-packages-save-space-in-ASP-NET-Core\" class=\"headerlink\" title=\"Difference 7 - Server-side packages save space in ASP.NET Core\"></a>Difference 7 - Server-side packages save space in ASP.NET Core</h2><p>We have been using NuGet package manager to add a reference to assemblies, library, framework or any third party packages. They would have been downloaded from NuGet which creates “Packages” folder in project structure. 30 sample ASP.NET applications, all of them use NuGet packages to reference dependencies each costly approx 70 MB disk space, so we end up nearly using 2GB disk space for storing packages even though they all are same. Some SMART developers know this issue, they have some workaround of their own. ASP.NET Core came up with storing all the packages related to its development in Users folder and while creating ASP.NET Core applications, Visual Studio will reference them from Users folder. This feature is called <em><strong>Runtime Store for .NET Core 2</strong></em> Now even if you have 100 sample ASP.NET Core applications, they all are referencing from <em><strong>dotnet</strong></em> in Users folder which is near to few MBs only.</p>\n<h2 id=\"Difference-8-Inbuilt-Dependency-Injection-DI-support-for-ASP-NET-Core\"><a href=\"#Difference-8-Inbuilt-Dependency-Injection-DI-support-for-ASP-NET-Core\" class=\"headerlink\" title=\"Difference 8 - Inbuilt Dependency Injection (DI) support for ASP.NET Core\"></a>Difference 8 - Inbuilt Dependency Injection (DI) support for ASP.NET Core</h2><p>Dependency Injection (DI) achieves loosely coupled, more testable code, it’s very important because it helps for writing unit testing. In ASP.NET MVC 5/4 or classic ASPX based applications, we use to have separate DI containers used like Unity, AutoFac, StructureMap etc. We had to build up our project to use DI, its additional effort. Now in ASP.NET Core applications, dependency injection is inbuilt i.e. no setup headache for DI. Just create some services and get ready to use DI. In fact sample Core MVC application has DI inbuilt in it, let’s open “Startup.cs” and look for “ConfigureServices(IServiceCollection services)” method. Its main purpose is the configuration of services like EF, Authentication, adding MVC and handwritten custom services like IEmailServer and ISmsSender. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/diexample.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/diexample.jpg\" alt=\"Inbuilt Dependency Injection in ASP.NET Core\"></a></p>\n<h2 id=\"Difference-9-User-Secrets-of-ASP-NET-Core\"><a href=\"#Difference-9-User-Secrets-of-ASP-NET-Core\" class=\"headerlink\" title=\"Difference 9 - User Secrets of ASP.NET Core\"></a>Difference 9 - User Secrets of ASP.NET Core</h2><p>Many times we keep sensitive data during our development work inside project tree, often we mistakenly share these secrets with other through sharing of code, accidentally adding it TFS (source control). Once in awhile, we might have experienced this. ASP.NET Core based applications have now a concept of User Secrets; The <strong>Secret Manager</strong> tool provides a more general mechanism to store sensitive data for development work outside of your project tree.</p>\n<blockquote>\n<p>The Secret Manager tool does not encrypt the stored secrets and should not be treated as a trusted store. It is for development purposes only.</p>\n</blockquote>\n<p>There are many differences compared to ASP.NET MVC 5/4 but without writing single of code if we can find these differences then it means Microsoft has moved much ahead in terms of making it Open Source.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The best way to learn what’s new in any technology is to compare with its earlier version. Here will be understanding the difference between ASP.NET Core (MVC) and ASP.NET MVC 5 by creating a sample application and comparing project solution structure between them. Well, we have many differences between ASP.NET Core MVC and ASP.NET MVC 5 in solution structure itself, let’s explore them without a code being written.</p>\n<blockquote>\n<p>ASP.NET Core is a lean and composable framework for building web and cloud applications. ASP.NET Core is fully open source.</p>\n</blockquote>\n<p>Being fully open source is not an easy task, Microsoft has done some amazing work on making it work across Windows, Mac, Linux OS.</p>\n<h4 id=\"A-quick-look-at-ASP-NET-Core-improvements\"><a href=\"#A-quick-look-at-ASP-NET-Core-improvements\" class=\"headerlink\" title=\"A quick look at ASP.NET Core improvements\"></a>A quick look at ASP.NET Core improvements</h4><ul>\n<li>Build and run cross-platform ASP.NET apps on Windows, Mac, and Linux</li>\n<li>Built on .NET Core, which supports true side-by-side app versioning</li>\n<li>New tooling that simplifies modern Web development</li>\n<li>Single aligned web stack for MVC and Web API</li>\n<li>Cloud-ready environment-based configuration</li>\n<li>Integrated support for creating and using NuGet packages</li>\n<li>Built-in support for dependency injection</li>\n<li>Ability to host on IIS or self-host in your own process</li>\n</ul>\n<p>Firstly create ASP.NET Core MVC application and ASP.NET MVC 5 using Visual Studio 2015/ VS 2017 Community Edition</p>\n<h2 id=\"Difference-1-Single-aligned-web-stack-for-ASP-NET-Core-MVC-and-Web-APIs\"><a href=\"#Difference-1-Single-aligned-web-stack-for-ASP-NET-Core-MVC-and-Web-APIs\" class=\"headerlink\" title=\"Difference 1 - Single aligned web stack for ASP.NET Core MVC and Web APIs\"></a>Difference 1 - Single aligned web stack for ASP.NET Core MVC and Web APIs</h2><p>ASP.NET MVC 5 will give us option of choosing MVC or Web API or both while creating a web application. It was because web stack for MVC 5 and Web API was not the same. ASP.NET Core MVC now has single aligned web stack for MVC and Web API. The image below shows checkbox is GREYED out for MVC and Web API while MVC 5 gives the option to add Web API.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/difference1.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/difference1-1024x422.jpg\" alt=\"Single aligned web stack for MVC and Web APIs\"></a></p>\n<h2 id=\"Difference-2-Project-Solution-Structure-Changes\"><a href=\"#Difference-2-Project-Solution-Structure-Changes\" class=\"headerlink\" title=\"Difference 2 - Project(Solution) Structure Changes\"></a>Difference 2 - Project(Solution) Structure Changes</h2><p>If you see ASP.NET Core MVC solution explorer on the right-hand side, there is no Web.config, Global.asax. Then how it deals with configuration settings, authentication and application start specific code execution. <strong>appsettings.json, custom configuration files</strong> are some files which do those work of missing files from ASP.NET MVC 5. There are many changes if we look at folder by folder. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/difference2.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/difference2.jpg\" alt=\"Difference in Project structure (Old image)\"></a></p>\n<h2 id=\"Difference-3-ASP-NET-Core-targets-Full-NET-and-NET-Core\"><a href=\"#Difference-3-ASP-NET-Core-targets-Full-NET-and-NET-Core\" class=\"headerlink\" title=\"Difference 3 - ASP.NET Core targets Full .NET  and .NET Core\"></a>Difference 3 - ASP.NET Core targets Full .NET  and .NET Core</h2><p>We have been working on the full .NET framework, it is an amazing experience till now and will continue to be. Then what is .NET core?</p>\n<blockquote>\n<p>.NET Core is a general purpose development platform maintained by Microsoft and the .NET community on GitHub. It is cross-platform, supporting Windows, macOS and Linux, and can be used in device, cloud, and embedded/IoT scenarios</p>\n</blockquote>\n<p>Oh, cross-platform !! Yes, now we can develop ASP.NET Core web apps against the .NET core and run in either Windows or Linux or Mac. Wait it’s not over yet, not only we can develop in Windows OS but also in Linux, Mac using <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code</a>  or any other code editors like Vim, Atom, Sublime</p>\n<h2 id=\"Difference-4-ASP-NET-Core-apps-don’t-need-IIS-for-hosting\"><a href=\"#Difference-4-ASP-NET-Core-apps-don’t-need-IIS-for-hosting\" class=\"headerlink\" title=\"Difference 4 - ASP.NET Core apps  don’t need IIS for hosting\"></a>Difference 4 - ASP.NET Core apps  don’t need IIS for hosting</h2><p>Don’t get surprised, the goal of ASP.NET Core is to be cross-platform using .NET Core. With this in mind, Microsoft decided to host ASP.NET Core applications not only on IIS but they can be self-hosted or use Nginx web server on Linux. Kestrel will be internal web server for request processing</p>\n<h2 id=\"Difference-5-wwwroot-folder-for-static-files\"><a href=\"#Difference-5-wwwroot-folder-for-static-files\" class=\"headerlink\" title=\"Difference 5 - wwwroot folder for static files\"></a>Difference 5 - wwwroot folder for static files</h2><p>The <em>wwwroot</em> folder represents the actual root of the web app when running on a web server. Static files like config.json, which are not in <em>wwwroot</em> will never be accessible, and there is no need to create special rules to block access to sensitive files. These static files might be plain HTML, Javascript, CSS, images, library etc.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/wwwroot.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/wwwroot.jpg\" alt=\"ASP.NET Core wwwroot - place for static files\"></a>. In addition to the security benefits, the wwwroot folder also simplifies common tasks like bundling and minification, which can now be more easily incorporated into a standard build process and automated using tools like Grunt. “wwwroot” name can be changed in project.json under “webroot”: “Demowwwroot”      </p>\n<h2 id=\"Difference-6-New-approach-to-Server-side-and-client-side-dependency-management-of-packages\"><a href=\"#Difference-6-New-approach-to-Server-side-and-client-side-dependency-management-of-packages\" class=\"headerlink\" title=\"Difference 6 - New approach to Server side and client side dependency management of packages.\"></a>Difference 6 - New approach to Server side and client side dependency management of packages.</h2><p>Any .NET developer would be familiar that <strong>References</strong> folder holds all DLLs,  NuGet packages for particular .NET Framework. Leverage the experience of working in Visual Studio IDE and deploy ASP.NET Core applications either on Windows, Linux or Mac using .NET Core. Its Server side management of dependencies. Client-side dependency management is more important because client-side has more different packages from the server side. Client side will surely have jQuery, Bootstrap, grunt, any Javascript frameworks like AngularJS, Backbone etc, images, style files. Client-side package management in open source community has two great names “Bower” and “NPM”. They are part of “Dependencies”. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/server-client-side.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/server-client-side.jpg\" alt=\"Server Side and Client Side Dependency Management (Old Image)\"></a></p>\n<h2 id=\"Difference-7-Server-side-packages-save-space-in-ASP-NET-Core\"><a href=\"#Difference-7-Server-side-packages-save-space-in-ASP-NET-Core\" class=\"headerlink\" title=\"Difference 7 - Server-side packages save space in ASP.NET Core\"></a>Difference 7 - Server-side packages save space in ASP.NET Core</h2><p>We have been using NuGet package manager to add a reference to assemblies, library, framework or any third party packages. They would have been downloaded from NuGet which creates “Packages” folder in project structure. 30 sample ASP.NET applications, all of them use NuGet packages to reference dependencies each costly approx 70 MB disk space, so we end up nearly using 2GB disk space for storing packages even though they all are same. Some SMART developers know this issue, they have some workaround of their own. ASP.NET Core came up with storing all the packages related to its development in Users folder and while creating ASP.NET Core applications, Visual Studio will reference them from Users folder. This feature is called <em><strong>Runtime Store for .NET Core 2</strong></em> Now even if you have 100 sample ASP.NET Core applications, they all are referencing from <em><strong>dotnet</strong></em> in Users folder which is near to few MBs only.</p>\n<h2 id=\"Difference-8-Inbuilt-Dependency-Injection-DI-support-for-ASP-NET-Core\"><a href=\"#Difference-8-Inbuilt-Dependency-Injection-DI-support-for-ASP-NET-Core\" class=\"headerlink\" title=\"Difference 8 - Inbuilt Dependency Injection (DI) support for ASP.NET Core\"></a>Difference 8 - Inbuilt Dependency Injection (DI) support for ASP.NET Core</h2><p>Dependency Injection (DI) achieves loosely coupled, more testable code, it’s very important because it helps for writing unit testing. In ASP.NET MVC 5/4 or classic ASPX based applications, we use to have separate DI containers used like Unity, AutoFac, StructureMap etc. We had to build up our project to use DI, its additional effort. Now in ASP.NET Core applications, dependency injection is inbuilt i.e. no setup headache for DI. Just create some services and get ready to use DI. In fact sample Core MVC application has DI inbuilt in it, let’s open “Startup.cs” and look for “ConfigureServices(IServiceCollection services)” method. Its main purpose is the configuration of services like EF, Authentication, adding MVC and handwritten custom services like IEmailServer and ISmsSender. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/diexample.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/diexample.jpg\" alt=\"Inbuilt Dependency Injection in ASP.NET Core\"></a></p>\n<h2 id=\"Difference-9-User-Secrets-of-ASP-NET-Core\"><a href=\"#Difference-9-User-Secrets-of-ASP-NET-Core\" class=\"headerlink\" title=\"Difference 9 - User Secrets of ASP.NET Core\"></a>Difference 9 - User Secrets of ASP.NET Core</h2><p>Many times we keep sensitive data during our development work inside project tree, often we mistakenly share these secrets with other through sharing of code, accidentally adding it TFS (source control). Once in awhile, we might have experienced this. ASP.NET Core based applications have now a concept of User Secrets; The <strong>Secret Manager</strong> tool provides a more general mechanism to store sensitive data for development work outside of your project tree.</p>\n<blockquote>\n<p>The Secret Manager tool does not encrypt the stored secrets and should not be treated as a trusted store. It is for development purposes only.</p>\n</blockquote>\n<p>There are many differences compared to ASP.NET MVC 5/4 but without writing single of code if we can find these differences then it means Microsoft has moved much ahead in terms of making it Open Source.</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jul 27 2018 00:00:24 GMT+0530 (India Standard Time)","title":"Difference between ASP.NET Core and ASP.NET MVC 5","path":"difference-between-asp-net-mvc6-asp-net-mvc5/","eyeCatchImage":null,"excerpt":null,"date":"2015-09-26T14:22:14.000Z","pv":0,"totalPV":0,"categories":"ASP.NET Core","tags":["ASP.NET MVC 5","ASP.NET Core"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Building fully Asynchronous ASP.NET Core 2 Web API","url":"657.html","id":"657","date":"2017-08-23T08:14:55.000Z","_content":"\nCan we build fully Asynchronous ASP.NET Core 2 Web API? Yes, of course, this article lets us build one such Web API using ASP.NET Core 2. In .NET or .NET Core world, applications can work asynchronously using _**async await**_ keyword. It has simplified async way of working. We will use async await for building fully asynchronous Web API.\n\n### Whats the agenda?\n\n*   Understanding async await\n*   Demo ASP.NET Core 2 Web API\n*   Asynchronous Web API methods\n*   Using Entity Framework 2.0\n*   Web API testing\n\nUnderstanding async await\n-------------------------\n\nThe async await feature itself needs a big blog post, recommend to read through if you're new to using [async await](https://blog.stephencleary.com/2012/02/async-and-await.html)\n\n> One of prominent best practices in async programming is **Async all the way** i.e. you shouldn’t mix synchronous and asynchronous code without carefully considering the consequences. In particular, it’s usually a bad idea to block on async code by calling Task.Wait or Task.Result.\n\nIt's essential to understand [best practices of async await.](http://msdn.microsoft.com/en-us/magazine/jj991977.aspx)\n\nDemo ASP.NET Core 2 Web API\n---------------------------\n\nWe will be continuing with the [ContactsAPI build with Entity Framework 2.0](http://www.mithunvp.com/aspnet-core-web-api-entity-framework-core/). Why are we using EF 2.0? EF 2.0 provides all the asynchronous methods to perform the CRUD related operation. Methods like FindAsync(), SaveAsync(), ToListAsync() etc. provides an asynchronous way of working with EF Data Context.\n\nAsynchronous ASP.NET Core 2 Web API methods\n-------------------------------------------\n\nASP.NET Core 2 allows making asynchronous Web API by using async await keyword. The Action methods in Controller should use the **async** keyword in the method signature, the method should return **Task** containing **IActionResult**. The Web API method should call further methods using **await** keyword. Those methods should also have implemented async await pattern in them. Remember _Async All the way_ :) \n\nUsing Entity Framework 2.0 async methods\n----------------------------------------\n\nAs we have used EF 2.0, it provides most of the methods asynchronously, we will modify the **ContactsRepository** interface & class work in an async way. The refactored code will look like this\n\n{% codeblock lang:cs %}\npublic class ContactsRepository : IContactsRepository\n    {\n        ContactsContext _context;\n        public ContactsRepository(ContactsContext context)\n        {\n            _context = context;\n        }\n\n        public async Task Add(Contacts item)\n        {\n            await _context.Contacts.AddAsync(item);\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<IList<Contacts>> GetAll()\n        {\n            return await _context.Contacts.ToListAsync();\n        }\n\n        //Code removed for brevity\n    }\n{% endcodeblock %}\n\nTesting the Web API\n-------------------\n\nDownload the source from [Github repo,](https://github.com/mithunvp/ContactsAPI) run the project, test web api's using Postman or Fiddler.\n\n> Remember Async All the way !!","source":"_posts/fully-asynchronous-aspnet-core-2-web-api.md","raw":"---\ntitle: Building fully Asynchronous ASP.NET Core 2 Web API\ntags:\n  - ASP.NET Core 2\nurl: 657.html\nid: 657\ncategories:\n  - ASP.NET Core 2\n  - Async\ndate: 2017-08-23 13:44:55\n---\n\nCan we build fully Asynchronous ASP.NET Core 2 Web API? Yes, of course, this article lets us build one such Web API using ASP.NET Core 2. In .NET or .NET Core world, applications can work asynchronously using _**async await**_ keyword. It has simplified async way of working. We will use async await for building fully asynchronous Web API.\n\n### Whats the agenda?\n\n*   Understanding async await\n*   Demo ASP.NET Core 2 Web API\n*   Asynchronous Web API methods\n*   Using Entity Framework 2.0\n*   Web API testing\n\nUnderstanding async await\n-------------------------\n\nThe async await feature itself needs a big blog post, recommend to read through if you're new to using [async await](https://blog.stephencleary.com/2012/02/async-and-await.html)\n\n> One of prominent best practices in async programming is **Async all the way** i.e. you shouldn’t mix synchronous and asynchronous code without carefully considering the consequences. In particular, it’s usually a bad idea to block on async code by calling Task.Wait or Task.Result.\n\nIt's essential to understand [best practices of async await.](http://msdn.microsoft.com/en-us/magazine/jj991977.aspx)\n\nDemo ASP.NET Core 2 Web API\n---------------------------\n\nWe will be continuing with the [ContactsAPI build with Entity Framework 2.0](http://www.mithunvp.com/aspnet-core-web-api-entity-framework-core/). Why are we using EF 2.0? EF 2.0 provides all the asynchronous methods to perform the CRUD related operation. Methods like FindAsync(), SaveAsync(), ToListAsync() etc. provides an asynchronous way of working with EF Data Context.\n\nAsynchronous ASP.NET Core 2 Web API methods\n-------------------------------------------\n\nASP.NET Core 2 allows making asynchronous Web API by using async await keyword. The Action methods in Controller should use the **async** keyword in the method signature, the method should return **Task** containing **IActionResult**. The Web API method should call further methods using **await** keyword. Those methods should also have implemented async await pattern in them. Remember _Async All the way_ :) \n\nUsing Entity Framework 2.0 async methods\n----------------------------------------\n\nAs we have used EF 2.0, it provides most of the methods asynchronously, we will modify the **ContactsRepository** interface & class work in an async way. The refactored code will look like this\n\n{% codeblock lang:cs %}\npublic class ContactsRepository : IContactsRepository\n    {\n        ContactsContext _context;\n        public ContactsRepository(ContactsContext context)\n        {\n            _context = context;\n        }\n\n        public async Task Add(Contacts item)\n        {\n            await _context.Contacts.AddAsync(item);\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<IList<Contacts>> GetAll()\n        {\n            return await _context.Contacts.ToListAsync();\n        }\n\n        //Code removed for brevity\n    }\n{% endcodeblock %}\n\nTesting the Web API\n-------------------\n\nDownload the source from [Github repo,](https://github.com/mithunvp/ContactsAPI) run the project, test web api's using Postman or Fiddler.\n\n> Remember Async All the way !!","slug":"fully-asynchronous-aspnet-core-2-web-api","published":1,"updated":"2018-07-18T20:08:13.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034wm0019s4tjqcctk679","content":"<p>Can we build fully Asynchronous ASP.NET Core 2 Web API? Yes, of course, this article lets us build one such Web API using ASP.NET Core 2. In .NET or .NET Core world, applications can work asynchronously using <em><strong>async await</strong></em> keyword. It has simplified async way of working. We will use async await for building fully asynchronous Web API.</p>\n<h3 id=\"Whats-the-agenda\"><a href=\"#Whats-the-agenda\" class=\"headerlink\" title=\"Whats the agenda?\"></a>Whats the agenda?</h3><ul>\n<li>Understanding async await</li>\n<li>Demo ASP.NET Core 2 Web API</li>\n<li>Asynchronous Web API methods</li>\n<li>Using Entity Framework 2.0</li>\n<li>Web API testing</li>\n</ul>\n<h2 id=\"Understanding-async-await\"><a href=\"#Understanding-async-await\" class=\"headerlink\" title=\"Understanding async await\"></a>Understanding async await</h2><p>The async await feature itself needs a big blog post, recommend to read through if you’re new to using <a href=\"https://blog.stephencleary.com/2012/02/async-and-await.html\" target=\"_blank\" rel=\"noopener\">async await</a></p>\n<blockquote>\n<p>One of prominent best practices in async programming is <strong>Async all the way</strong> i.e. you shouldn’t mix synchronous and asynchronous code without carefully considering the consequences. In particular, it’s usually a bad idea to block on async code by calling Task.Wait or Task.Result.</p>\n</blockquote>\n<p>It’s essential to understand <a href=\"http://msdn.microsoft.com/en-us/magazine/jj991977.aspx\" target=\"_blank\" rel=\"noopener\">best practices of async await.</a></p>\n<h2 id=\"Demo-ASP-NET-Core-2-Web-API\"><a href=\"#Demo-ASP-NET-Core-2-Web-API\" class=\"headerlink\" title=\"Demo ASP.NET Core 2 Web API\"></a>Demo ASP.NET Core 2 Web API</h2><p>We will be continuing with the <a href=\"http://www.mithunvp.com/aspnet-core-web-api-entity-framework-core/\">ContactsAPI build with Entity Framework 2.0</a>. Why are we using EF 2.0? EF 2.0 provides all the asynchronous methods to perform the CRUD related operation. Methods like FindAsync(), SaveAsync(), ToListAsync() etc. provides an asynchronous way of working with EF Data Context.</p>\n<h2 id=\"Asynchronous-ASP-NET-Core-2-Web-API-methods\"><a href=\"#Asynchronous-ASP-NET-Core-2-Web-API-methods\" class=\"headerlink\" title=\"Asynchronous ASP.NET Core 2 Web API methods\"></a>Asynchronous ASP.NET Core 2 Web API methods</h2><p>ASP.NET Core 2 allows making asynchronous Web API by using async await keyword. The Action methods in Controller should use the <strong>async</strong> keyword in the method signature, the method should return <strong>Task</strong> containing <strong>IActionResult</strong>. The Web API method should call further methods using <strong>await</strong> keyword. Those methods should also have implemented async await pattern in them. Remember <em>Async All the way</em> :) </p>\n<h2 id=\"Using-Entity-Framework-2-0-async-methods\"><a href=\"#Using-Entity-Framework-2-0-async-methods\" class=\"headerlink\" title=\"Using Entity Framework 2.0 async methods\"></a>Using Entity Framework 2.0 async methods</h2><p>As we have used EF 2.0, it provides most of the methods asynchronously, we will modify the <strong>ContactsRepository</strong> interface &amp; class work in an async way. The refactored code will look like this</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ContactsRepository</span> : <span class=\"title\">IContactsRepository</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ContactsContext _context;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ContactsRepository</span>(<span class=\"params\">ContactsContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _context = context;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Add</span>(<span class=\"params\">Contacts item</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _context.Contacts.AddAsync(item);</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _context.SaveChangesAsync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IList&lt;Contacts&gt;&gt; GetAll()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Contacts.ToListAsync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Code removed for brevity</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Testing-the-Web-API\"><a href=\"#Testing-the-Web-API\" class=\"headerlink\" title=\"Testing the Web API\"></a>Testing the Web API</h2><p>Download the source from <a href=\"https://github.com/mithunvp/ContactsAPI\" target=\"_blank\" rel=\"noopener\">Github repo,</a> run the project, test web api’s using Postman or Fiddler.</p>\n<blockquote>\n<p>Remember Async All the way !!</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Can we build fully Asynchronous ASP.NET Core 2 Web API? Yes, of course, this article lets us build one such Web API using ASP.NET Core 2. In .NET or .NET Core world, applications can work asynchronously using <em><strong>async await</strong></em> keyword. It has simplified async way of working. We will use async await for building fully asynchronous Web API.</p>\n<h3 id=\"Whats-the-agenda\"><a href=\"#Whats-the-agenda\" class=\"headerlink\" title=\"Whats the agenda?\"></a>Whats the agenda?</h3><ul>\n<li>Understanding async await</li>\n<li>Demo ASP.NET Core 2 Web API</li>\n<li>Asynchronous Web API methods</li>\n<li>Using Entity Framework 2.0</li>\n<li>Web API testing</li>\n</ul>\n<h2 id=\"Understanding-async-await\"><a href=\"#Understanding-async-await\" class=\"headerlink\" title=\"Understanding async await\"></a>Understanding async await</h2><p>The async await feature itself needs a big blog post, recommend to read through if you’re new to using <a href=\"https://blog.stephencleary.com/2012/02/async-and-await.html\" target=\"_blank\" rel=\"noopener\">async await</a></p>\n<blockquote>\n<p>One of prominent best practices in async programming is <strong>Async all the way</strong> i.e. you shouldn’t mix synchronous and asynchronous code without carefully considering the consequences. In particular, it’s usually a bad idea to block on async code by calling Task.Wait or Task.Result.</p>\n</blockquote>\n<p>It’s essential to understand <a href=\"http://msdn.microsoft.com/en-us/magazine/jj991977.aspx\" target=\"_blank\" rel=\"noopener\">best practices of async await.</a></p>\n<h2 id=\"Demo-ASP-NET-Core-2-Web-API\"><a href=\"#Demo-ASP-NET-Core-2-Web-API\" class=\"headerlink\" title=\"Demo ASP.NET Core 2 Web API\"></a>Demo ASP.NET Core 2 Web API</h2><p>We will be continuing with the <a href=\"http://www.mithunvp.com/aspnet-core-web-api-entity-framework-core/\">ContactsAPI build with Entity Framework 2.0</a>. Why are we using EF 2.0? EF 2.0 provides all the asynchronous methods to perform the CRUD related operation. Methods like FindAsync(), SaveAsync(), ToListAsync() etc. provides an asynchronous way of working with EF Data Context.</p>\n<h2 id=\"Asynchronous-ASP-NET-Core-2-Web-API-methods\"><a href=\"#Asynchronous-ASP-NET-Core-2-Web-API-methods\" class=\"headerlink\" title=\"Asynchronous ASP.NET Core 2 Web API methods\"></a>Asynchronous ASP.NET Core 2 Web API methods</h2><p>ASP.NET Core 2 allows making asynchronous Web API by using async await keyword. The Action methods in Controller should use the <strong>async</strong> keyword in the method signature, the method should return <strong>Task</strong> containing <strong>IActionResult</strong>. The Web API method should call further methods using <strong>await</strong> keyword. Those methods should also have implemented async await pattern in them. Remember <em>Async All the way</em> :) </p>\n<h2 id=\"Using-Entity-Framework-2-0-async-methods\"><a href=\"#Using-Entity-Framework-2-0-async-methods\" class=\"headerlink\" title=\"Using Entity Framework 2.0 async methods\"></a>Using Entity Framework 2.0 async methods</h2><p>As we have used EF 2.0, it provides most of the methods asynchronously, we will modify the <strong>ContactsRepository</strong> interface &amp; class work in an async way. The refactored code will look like this</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ContactsRepository</span> : <span class=\"title\">IContactsRepository</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ContactsContext _context;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ContactsRepository</span>(<span class=\"params\">ContactsContext context</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            _context = context;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">Add</span>(<span class=\"params\">Contacts item</span>)</span></span><br><span class=\"line\"><span class=\"function\">        </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _context.Contacts.AddAsync(item);</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _context.SaveChangesAsync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IList&lt;Contacts&gt;&gt; GetAll()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.Contacts.ToListAsync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Code removed for brevity</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Testing-the-Web-API\"><a href=\"#Testing-the-Web-API\" class=\"headerlink\" title=\"Testing the Web API\"></a>Testing the Web API</h2><p>Download the source from <a href=\"https://github.com/mithunvp/ContactsAPI\" target=\"_blank\" rel=\"noopener\">Github repo,</a> run the project, test web api’s using Postman or Fiddler.</p>\n<blockquote>\n<p>Remember Async All the way !!</p>\n</blockquote>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Jul 19 2018 01:38:13 GMT+0530 (India Standard Time)","title":"Building fully Asynchronous ASP.NET Core 2 Web API","path":"fully-asynchronous-aspnet-core-2-web-api/","eyeCatchImage":null,"excerpt":null,"date":"2017-08-23T08:14:55.000Z","pv":0,"totalPV":0,"categories":"ASP.NET Core 2 > Async","tags":["ASP.NET Core 2"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Installation of SQL Server Express 2014 on Windows 10","url":"212.html","id":"212","date":"2015-10-05T16:57:11.000Z","_content":"\nI had planned installation of Sql Server Express 2014 on Windows 10 PRO OS. During this I encountered minor road blocks, which I overcame to install Sql Server Express 2014. This article summarises step by step process of  installation it. These steps not confined to Sql Server Express 2014, they are almost similar to other Sql Server Express like 2012, 2008 R2, 2008.\n\nWhat is Microsoft SQL Server 2014 Express?\n==========================================\nMSDN defines it as [Microsoft SQL Server 2014 Express](https://msdn.microsoft.com/en-us/sqlserver2014express.aspx) is a free, feature-rich edition of SQL Server that is ideal for learning, developing, powering desktop, web & small server applications, and for redistribution by ISVs. Sql Server 2014 Express can be installed on Windows 10/ Windows 8.1/ Windows 7. These steps are almost similar for any Sql Server Express edition installation on any Windows OS.\n\nStep 1 - Download SQL Server 2014 Express Edition\n-------------------------------------------------\n\nIn this very first step there was minor road block, from Where to download SQL Server installation? It's naturally you will open [Download Sql Server Express 2014](https://www.microsoft.com/en-in/download/details.aspx?id=42299) link.  I tried downloading it, but it wasn't working. Then I found this link [The 12 step process to download Microsoft SQL Server Express 2014](http://www.istartedsomething.com/20140616/the-12-step-process-to-download-microsoft-sql-server-express-2014/). Oh !! 12 steps to be followed for downloading, then think of installation of it. Scott Hanselman made our life easy by writing this post [Download Sql Server](http://www.hanselman.com/blog/DownloadSQLServerExpress.aspx). It has not only 2014 edition but Sql Server 2012, 2008 R2. **Everyone just download it from this link, save your time.** I choose this \"**Express with Advanced Services (SQLEXPRADV)**\" option because of my need for\n\n*   Reporting Services\n*   Full Text Search\n*   Full version of Sql Server 2014 Management Studio which gives us SQL Profiler.\n*   It gives almost full working Sql Server database system with lots of tools.\n\nDownload it from Scott's blog link for [Download SQL Server](http://www.hanselman.com/blog/DownloadSQLServerExpress.aspx), I used 64 bit download(32 bit also available). It's around 1+GB. This will take time to download, meanwhile lets see briefly what are other editions of Sql Server 2014 Express\n\n#### LocalDB (SqlLocalDB)\n\nLocalDB is a lightweight version of Express that has all its programmability features, yet runs in user mode and has a fast, zero-configuration installation and short list of pre-requisites.  It can be bundled with Application and Database Development tools like Visual Studio or embedded with an application that needs local databases.\n\n#### Express (SQLEXPR)\n\nExpress edition includes the SQL Server database engine only. Best suited to accept remote connections or administer remotely.\n\n#### Express with Tools (SQLEXPRWT)\n\nThis package contains everything needed to install and configure SQL Server as a database server including the full version of SQL Server 2014 Management Studio. Choose either LocalDB or Express depending on your needs above.\n\n#### SQL Server Management Studio Express (SQLManagementStudio)\n\n_This does not contain the database, but only the tools to manage SQL Server instances,_ including LocalDB, SQL Express, SQL Azure, full version of SQL Server 2014 Management Studio, etc. Use this if you already have the database and only need the management tools.\n\nStep 2 - Extraction of downloaded Installation Exe\n--------------------------------------------------\n\nThis is fairly simple, double-click downloaded file \"_SQLEXPRADV\\_x64\\_ENU.exe_\"; it will extract all install files to directory where exe is present, you can change that also.[![Extraction of downloaded Sql Server 2014 Installation file](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step1.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step1.png)\n\nStep 3 - Run Setup, Start Installation and Accept Terms\n-------------------------------------------------------\n\nAfter extraction of exe, run the Setup and click \"New Sql Server Stand alone installation...\" from window open. You should and must \"Accept terms\".[![Start window of installation process](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step2.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step2.png) [![Accept License Terms](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step3.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step3.png) \n\nStep 4 - Install Rules and disable installed ANTI VIRUS software\n----------------------------------------------------------------\n\nSetup or Install Rules identify potential problems that might occur for SUCCESSFUL installation of SQL Server Express 2014 edition. All rules passed but \"Windows Firewall\" gives a warning. \"Windows Firewall\" warning is related to ANTI VIRUS installation might block enabling ports, settings for SQL Server to use.\n\n> DONT FORGET TO DISABLED _ANTI VIRUS_ PROGRAM. It will save time during installation process\n\nI have a anti-virus program with full protection, not thinking much I moved ahead without disabling. Installation was not progressing and was struck at point for hours. So Please Disable IT NOW. Other might not come across this issue based on anti-virus program and its protection levels, but still do disable it. [![Install Rules with Windows Firewall warning](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step4.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step4.png).\nStep 5 - Feature Selection\n--------------------------\n\nIn this step we can select the features that needs to be installed, SQL Server gives us option Database Engine, Reporting Services(only if you had downloaded appropriate version), Client Tools for connectivity and SQL Management Tools (do select SQL Profiler) It also displays disk space requirements, make sure you have enough disk space before installation. [![Features Selection](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step5.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step5.png)\n\nStep 6 - Rule \"_Microsoft .NET Framework 3.5 SP1_\" required\n-----------------------------------------------------------\n\nI was installing SQL Server 2014 on fresh Windows 10 installation, it's obviously that .NET Framework is not found.  But SQL Server installation needs .NET 3.5 SP1 for proceeding. Its one of requirements in [Hardware and Software Requirements for Installing SQL Server 2014](https://msdn.microsoft.com/en-us/library/ms143506(v=sql.120).aspx). We face this error as shown. [![Rule \"Microsoft .NET Framework 3.5 SP1\" required](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step6.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step6.png). Two ways we can install .NET 3.5 framework - Download the .NET Framework 3.5 SP1 or Install using \"Windows Features\"as shown in images below [![Enable .NET Framework 3.5 from 'Turn Windows feature on or off'](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step7.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step7.png) [![Download files from Windows Update](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step8.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step8.png). Restart the machine to ensure everything is properly installed(Recommended) and then  run \"Features Rule\" to verify that its ready to proceed installation.[![Verified Microsoft .NET Framework 3.5 SP1 exists](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step9.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step9.png).\n\nStep 7 - Instance and Server Configuration Settings\n---------------------------------------------------\n\nWe are installing \"SqlExpress\" edition, it's better to keep NAMED instance as \"SQLEXPRESS\" itself and proceed further. [![Instance Configuration](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step10.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step10.png).\n Server Configuration are important as they deal with account names under which database engine runs. Its better not play around with these settings. Click NEXT to go ahead. [![Server Configuration](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step11.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step11.png)\n\nStep 8 - Database Engine Configuration\n--------------------------------------\n\nIts heart and soul of your Sql Server installation process, database engine is one which does all the work. It's mainly split into \"Server Configurations\", \"Data Directories\", \"User Instances\" and \"FILESTREAM\" Server Configurations deals with \"Who can get access to the  database engine?\". We have \"Windows mode\" and \"Mixed mode\" type of authentication.\n\n> Use Mixed Mode authentication mode so that we can Windows mode and **sa** 'Sql Server System administrator' account.\n\n[![Database Engine Configuration](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step12.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step12.png). Since we are installing Reporting Services along with Sql Server Express, select \"Install and Configure\" so that it starts operational.[![Reporting Service Configurations](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step13.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step13.png).\n\nStep 10 - Installation progress and Completion\n----------------------------------------------\n\n[![Installation in progress](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step14.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step14.png) Installation in progress Database engine, reporting service, management tools etc. are successfully installed. [![Sql Server Installation Completed](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step16.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step16.png) \n\nStep 11 - Connecting to Installed Sql Server Express  using Management Tools\n----------------------------------------------------------------------------\n\nAfter installation, lets open \"Sql Server Management Studio\" from Program files directory.[![Connecting to SQL Server Express using Windows Authentication](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step18-1024x603.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step18.png)[![Connecting to Sql Server Express using Mixed Mode Authentication](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step17-1024x603.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step17.png)\nIts bit time-consuming but still installation process is clear and simple.","source":"_posts/installation-sql-server-express-windows-10.md","raw":"---\ntitle: Installation of SQL Server Express 2014 on Windows 10\ntags:\n  - Sql Server\n  - Windows 10\nurl: 212.html\nid: 212\ncategories:\n  - .NET\ndate: 2015-10-05 22:27:11\n---\n\nI had planned installation of Sql Server Express 2014 on Windows 10 PRO OS. During this I encountered minor road blocks, which I overcame to install Sql Server Express 2014. This article summarises step by step process of  installation it. These steps not confined to Sql Server Express 2014, they are almost similar to other Sql Server Express like 2012, 2008 R2, 2008.\n\nWhat is Microsoft SQL Server 2014 Express?\n==========================================\nMSDN defines it as [Microsoft SQL Server 2014 Express](https://msdn.microsoft.com/en-us/sqlserver2014express.aspx) is a free, feature-rich edition of SQL Server that is ideal for learning, developing, powering desktop, web & small server applications, and for redistribution by ISVs. Sql Server 2014 Express can be installed on Windows 10/ Windows 8.1/ Windows 7. These steps are almost similar for any Sql Server Express edition installation on any Windows OS.\n\nStep 1 - Download SQL Server 2014 Express Edition\n-------------------------------------------------\n\nIn this very first step there was minor road block, from Where to download SQL Server installation? It's naturally you will open [Download Sql Server Express 2014](https://www.microsoft.com/en-in/download/details.aspx?id=42299) link.  I tried downloading it, but it wasn't working. Then I found this link [The 12 step process to download Microsoft SQL Server Express 2014](http://www.istartedsomething.com/20140616/the-12-step-process-to-download-microsoft-sql-server-express-2014/). Oh !! 12 steps to be followed for downloading, then think of installation of it. Scott Hanselman made our life easy by writing this post [Download Sql Server](http://www.hanselman.com/blog/DownloadSQLServerExpress.aspx). It has not only 2014 edition but Sql Server 2012, 2008 R2. **Everyone just download it from this link, save your time.** I choose this \"**Express with Advanced Services (SQLEXPRADV)**\" option because of my need for\n\n*   Reporting Services\n*   Full Text Search\n*   Full version of Sql Server 2014 Management Studio which gives us SQL Profiler.\n*   It gives almost full working Sql Server database system with lots of tools.\n\nDownload it from Scott's blog link for [Download SQL Server](http://www.hanselman.com/blog/DownloadSQLServerExpress.aspx), I used 64 bit download(32 bit also available). It's around 1+GB. This will take time to download, meanwhile lets see briefly what are other editions of Sql Server 2014 Express\n\n#### LocalDB (SqlLocalDB)\n\nLocalDB is a lightweight version of Express that has all its programmability features, yet runs in user mode and has a fast, zero-configuration installation and short list of pre-requisites.  It can be bundled with Application and Database Development tools like Visual Studio or embedded with an application that needs local databases.\n\n#### Express (SQLEXPR)\n\nExpress edition includes the SQL Server database engine only. Best suited to accept remote connections or administer remotely.\n\n#### Express with Tools (SQLEXPRWT)\n\nThis package contains everything needed to install and configure SQL Server as a database server including the full version of SQL Server 2014 Management Studio. Choose either LocalDB or Express depending on your needs above.\n\n#### SQL Server Management Studio Express (SQLManagementStudio)\n\n_This does not contain the database, but only the tools to manage SQL Server instances,_ including LocalDB, SQL Express, SQL Azure, full version of SQL Server 2014 Management Studio, etc. Use this if you already have the database and only need the management tools.\n\nStep 2 - Extraction of downloaded Installation Exe\n--------------------------------------------------\n\nThis is fairly simple, double-click downloaded file \"_SQLEXPRADV\\_x64\\_ENU.exe_\"; it will extract all install files to directory where exe is present, you can change that also.[![Extraction of downloaded Sql Server 2014 Installation file](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step1.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step1.png)\n\nStep 3 - Run Setup, Start Installation and Accept Terms\n-------------------------------------------------------\n\nAfter extraction of exe, run the Setup and click \"New Sql Server Stand alone installation...\" from window open. You should and must \"Accept terms\".[![Start window of installation process](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step2.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step2.png) [![Accept License Terms](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step3.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step3.png) \n\nStep 4 - Install Rules and disable installed ANTI VIRUS software\n----------------------------------------------------------------\n\nSetup or Install Rules identify potential problems that might occur for SUCCESSFUL installation of SQL Server Express 2014 edition. All rules passed but \"Windows Firewall\" gives a warning. \"Windows Firewall\" warning is related to ANTI VIRUS installation might block enabling ports, settings for SQL Server to use.\n\n> DONT FORGET TO DISABLED _ANTI VIRUS_ PROGRAM. It will save time during installation process\n\nI have a anti-virus program with full protection, not thinking much I moved ahead without disabling. Installation was not progressing and was struck at point for hours. So Please Disable IT NOW. Other might not come across this issue based on anti-virus program and its protection levels, but still do disable it. [![Install Rules with Windows Firewall warning](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step4.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step4.png).\nStep 5 - Feature Selection\n--------------------------\n\nIn this step we can select the features that needs to be installed, SQL Server gives us option Database Engine, Reporting Services(only if you had downloaded appropriate version), Client Tools for connectivity and SQL Management Tools (do select SQL Profiler) It also displays disk space requirements, make sure you have enough disk space before installation. [![Features Selection](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step5.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step5.png)\n\nStep 6 - Rule \"_Microsoft .NET Framework 3.5 SP1_\" required\n-----------------------------------------------------------\n\nI was installing SQL Server 2014 on fresh Windows 10 installation, it's obviously that .NET Framework is not found.  But SQL Server installation needs .NET 3.5 SP1 for proceeding. Its one of requirements in [Hardware and Software Requirements for Installing SQL Server 2014](https://msdn.microsoft.com/en-us/library/ms143506(v=sql.120).aspx). We face this error as shown. [![Rule \"Microsoft .NET Framework 3.5 SP1\" required](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step6.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step6.png). Two ways we can install .NET 3.5 framework - Download the .NET Framework 3.5 SP1 or Install using \"Windows Features\"as shown in images below [![Enable .NET Framework 3.5 from 'Turn Windows feature on or off'](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step7.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step7.png) [![Download files from Windows Update](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step8.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step8.png). Restart the machine to ensure everything is properly installed(Recommended) and then  run \"Features Rule\" to verify that its ready to proceed installation.[![Verified Microsoft .NET Framework 3.5 SP1 exists](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step9.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step9.png).\n\nStep 7 - Instance and Server Configuration Settings\n---------------------------------------------------\n\nWe are installing \"SqlExpress\" edition, it's better to keep NAMED instance as \"SQLEXPRESS\" itself and proceed further. [![Instance Configuration](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step10.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step10.png).\n Server Configuration are important as they deal with account names under which database engine runs. Its better not play around with these settings. Click NEXT to go ahead. [![Server Configuration](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step11.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step11.png)\n\nStep 8 - Database Engine Configuration\n--------------------------------------\n\nIts heart and soul of your Sql Server installation process, database engine is one which does all the work. It's mainly split into \"Server Configurations\", \"Data Directories\", \"User Instances\" and \"FILESTREAM\" Server Configurations deals with \"Who can get access to the  database engine?\". We have \"Windows mode\" and \"Mixed mode\" type of authentication.\n\n> Use Mixed Mode authentication mode so that we can Windows mode and **sa** 'Sql Server System administrator' account.\n\n[![Database Engine Configuration](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step12.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step12.png). Since we are installing Reporting Services along with Sql Server Express, select \"Install and Configure\" so that it starts operational.[![Reporting Service Configurations](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step13.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step13.png).\n\nStep 10 - Installation progress and Completion\n----------------------------------------------\n\n[![Installation in progress](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step14.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step14.png) Installation in progress Database engine, reporting service, management tools etc. are successfully installed. [![Sql Server Installation Completed](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step16.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step16.png) \n\nStep 11 - Connecting to Installed Sql Server Express  using Management Tools\n----------------------------------------------------------------------------\n\nAfter installation, lets open \"Sql Server Management Studio\" from Program files directory.[![Connecting to SQL Server Express using Windows Authentication](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step18-1024x603.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step18.png)[![Connecting to Sql Server Express using Mixed Mode Authentication](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step17-1024x603.png)](http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step17.png)\nIts bit time-consuming but still installation process is clear and simple.","slug":"installation-sql-server-express-windows-10","published":1,"updated":"2018-07-26T18:47:02.978Z","_id":"cjjt034wm001es4tjppmk4k3r","comments":1,"layout":"post","photos":[],"link":"","content":"<p>I had planned installation of Sql Server Express 2014 on Windows 10 PRO OS. During this I encountered minor road blocks, which I overcame to install Sql Server Express 2014. This article summarises step by step process of  installation it. These steps not confined to Sql Server Express 2014, they are almost similar to other Sql Server Express like 2012, 2008 R2, 2008.</p>\n<h1 id=\"What-is-Microsoft-SQL-Server-2014-Express\"><a href=\"#What-is-Microsoft-SQL-Server-2014-Express\" class=\"headerlink\" title=\"What is Microsoft SQL Server 2014 Express?\"></a>What is Microsoft SQL Server 2014 Express?</h1><p>MSDN defines it as <a href=\"https://msdn.microsoft.com/en-us/sqlserver2014express.aspx\" target=\"_blank\" rel=\"noopener\">Microsoft SQL Server 2014 Express</a> is a free, feature-rich edition of SQL Server that is ideal for learning, developing, powering desktop, web &amp; small server applications, and for redistribution by ISVs. Sql Server 2014 Express can be installed on Windows 10/ Windows 8.1/ Windows 7. These steps are almost similar for any Sql Server Express edition installation on any Windows OS.</p>\n<h2 id=\"Step-1-Download-SQL-Server-2014-Express-Edition\"><a href=\"#Step-1-Download-SQL-Server-2014-Express-Edition\" class=\"headerlink\" title=\"Step 1 - Download SQL Server 2014 Express Edition\"></a>Step 1 - Download SQL Server 2014 Express Edition</h2><p>In this very first step there was minor road block, from Where to download SQL Server installation? It’s naturally you will open <a href=\"https://www.microsoft.com/en-in/download/details.aspx?id=42299\" target=\"_blank\" rel=\"noopener\">Download Sql Server Express 2014</a> link.  I tried downloading it, but it wasn’t working. Then I found this link <a href=\"http://www.istartedsomething.com/20140616/the-12-step-process-to-download-microsoft-sql-server-express-2014/\" target=\"_blank\" rel=\"noopener\">The 12 step process to download Microsoft SQL Server Express 2014</a>. Oh !! 12 steps to be followed for downloading, then think of installation of it. Scott Hanselman made our life easy by writing this post <a href=\"http://www.hanselman.com/blog/DownloadSQLServerExpress.aspx\" target=\"_blank\" rel=\"noopener\">Download Sql Server</a>. It has not only 2014 edition but Sql Server 2012, 2008 R2. <strong>Everyone just download it from this link, save your time.</strong> I choose this “<strong>Express with Advanced Services (SQLEXPRADV)</strong>“ option because of my need for</p>\n<ul>\n<li>Reporting Services</li>\n<li>Full Text Search</li>\n<li>Full version of Sql Server 2014 Management Studio which gives us SQL Profiler.</li>\n<li>It gives almost full working Sql Server database system with lots of tools.</li>\n</ul>\n<p>Download it from Scott’s blog link for <a href=\"http://www.hanselman.com/blog/DownloadSQLServerExpress.aspx\" target=\"_blank\" rel=\"noopener\">Download SQL Server</a>, I used 64 bit download(32 bit also available). It’s around 1+GB. This will take time to download, meanwhile lets see briefly what are other editions of Sql Server 2014 Express</p>\n<h4 id=\"LocalDB-SqlLocalDB\"><a href=\"#LocalDB-SqlLocalDB\" class=\"headerlink\" title=\"LocalDB (SqlLocalDB)\"></a>LocalDB (SqlLocalDB)</h4><p>LocalDB is a lightweight version of Express that has all its programmability features, yet runs in user mode and has a fast, zero-configuration installation and short list of pre-requisites.  It can be bundled with Application and Database Development tools like Visual Studio or embedded with an application that needs local databases.</p>\n<h4 id=\"Express-SQLEXPR\"><a href=\"#Express-SQLEXPR\" class=\"headerlink\" title=\"Express (SQLEXPR)\"></a>Express (SQLEXPR)</h4><p>Express edition includes the SQL Server database engine only. Best suited to accept remote connections or administer remotely.</p>\n<h4 id=\"Express-with-Tools-SQLEXPRWT\"><a href=\"#Express-with-Tools-SQLEXPRWT\" class=\"headerlink\" title=\"Express with Tools (SQLEXPRWT)\"></a>Express with Tools (SQLEXPRWT)</h4><p>This package contains everything needed to install and configure SQL Server as a database server including the full version of SQL Server 2014 Management Studio. Choose either LocalDB or Express depending on your needs above.</p>\n<h4 id=\"SQL-Server-Management-Studio-Express-SQLManagementStudio\"><a href=\"#SQL-Server-Management-Studio-Express-SQLManagementStudio\" class=\"headerlink\" title=\"SQL Server Management Studio Express (SQLManagementStudio)\"></a>SQL Server Management Studio Express (SQLManagementStudio)</h4><p><em>This does not contain the database, but only the tools to manage SQL Server instances,</em> including LocalDB, SQL Express, SQL Azure, full version of SQL Server 2014 Management Studio, etc. Use this if you already have the database and only need the management tools.</p>\n<h2 id=\"Step-2-Extraction-of-downloaded-Installation-Exe\"><a href=\"#Step-2-Extraction-of-downloaded-Installation-Exe\" class=\"headerlink\" title=\"Step 2 - Extraction of downloaded Installation Exe\"></a>Step 2 - Extraction of downloaded Installation Exe</h2><p>This is fairly simple, double-click downloaded file “_SQLEXPRADV_x64_ENU.exe_”; it will extract all install files to directory where exe is present, you can change that also.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step1.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step1.png\" alt=\"Extraction of downloaded Sql Server 2014 Installation file\"></a></p>\n<h2 id=\"Step-3-Run-Setup-Start-Installation-and-Accept-Terms\"><a href=\"#Step-3-Run-Setup-Start-Installation-and-Accept-Terms\" class=\"headerlink\" title=\"Step 3 - Run Setup, Start Installation and Accept Terms\"></a>Step 3 - Run Setup, Start Installation and Accept Terms</h2><p>After extraction of exe, run the Setup and click “New Sql Server Stand alone installation…” from window open. You should and must “Accept terms”.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step2.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step2.png\" alt=\"Start window of installation process\"></a> <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step3.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step3.png\" alt=\"Accept License Terms\"></a> </p>\n<h2 id=\"Step-4-Install-Rules-and-disable-installed-ANTI-VIRUS-software\"><a href=\"#Step-4-Install-Rules-and-disable-installed-ANTI-VIRUS-software\" class=\"headerlink\" title=\"Step 4 - Install Rules and disable installed ANTI VIRUS software\"></a>Step 4 - Install Rules and disable installed ANTI VIRUS software</h2><p>Setup or Install Rules identify potential problems that might occur for SUCCESSFUL installation of SQL Server Express 2014 edition. All rules passed but “Windows Firewall” gives a warning. “Windows Firewall” warning is related to ANTI VIRUS installation might block enabling ports, settings for SQL Server to use.</p>\n<blockquote>\n<p>DONT FORGET TO DISABLED <em>ANTI VIRUS</em> PROGRAM. It will save time during installation process</p>\n</blockquote>\n<p>I have a anti-virus program with full protection, not thinking much I moved ahead without disabling. Installation was not progressing and was struck at point for hours. So Please Disable IT NOW. Other might not come across this issue based on anti-virus program and its protection levels, but still do disable it. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step4.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step4.png\" alt=\"Install Rules with Windows Firewall warning\"></a>.</p>\n<h2 id=\"Step-5-Feature-Selection\"><a href=\"#Step-5-Feature-Selection\" class=\"headerlink\" title=\"Step 5 - Feature Selection\"></a>Step 5 - Feature Selection</h2><p>In this step we can select the features that needs to be installed, SQL Server gives us option Database Engine, Reporting Services(only if you had downloaded appropriate version), Client Tools for connectivity and SQL Management Tools (do select SQL Profiler) It also displays disk space requirements, make sure you have enough disk space before installation. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step5.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step5.png\" alt=\"Features Selection\"></a></p>\n<h2 id=\"Step-6-Rule-“Microsoft-NET-Framework-3-5-SP1“-required\"><a href=\"#Step-6-Rule-“Microsoft-NET-Framework-3-5-SP1“-required\" class=\"headerlink\" title=\"Step 6 - Rule “Microsoft .NET Framework 3.5 SP1“ required\"></a>Step 6 - Rule “<em>Microsoft .NET Framework 3.5 SP1</em>“ required</h2><p>I was installing SQL Server 2014 on fresh Windows 10 installation, it’s obviously that .NET Framework is not found.  But SQL Server installation needs .NET 3.5 SP1 for proceeding. Its one of requirements in <a href=\"https://msdn.microsoft.com/en-us/library/ms143506(v=sql.120\" target=\"_blank\" rel=\"noopener\">Hardware and Software Requirements for Installing SQL Server 2014</a>.aspx). We face this error as shown. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step6.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step6.png\" alt=\"Rule &quot;Microsoft .NET Framework 3.5 SP1&quot; required\"></a>. Two ways we can install .NET 3.5 framework - Download the .NET Framework 3.5 SP1 or Install using “Windows Features”as shown in images below <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step7.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step7.png\" alt=\"Enable .NET Framework 3.5 from &#39;Turn Windows feature on or off&#39;\"></a> <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step8.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step8.png\" alt=\"Download files from Windows Update\"></a>. Restart the machine to ensure everything is properly installed(Recommended) and then  run “Features Rule” to verify that its ready to proceed installation.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step9.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step9.png\" alt=\"Verified Microsoft .NET Framework 3.5 SP1 exists\"></a>.</p>\n<h2 id=\"Step-7-Instance-and-Server-Configuration-Settings\"><a href=\"#Step-7-Instance-and-Server-Configuration-Settings\" class=\"headerlink\" title=\"Step 7 - Instance and Server Configuration Settings\"></a>Step 7 - Instance and Server Configuration Settings</h2><p>We are installing “SqlExpress” edition, it’s better to keep NAMED instance as “SQLEXPRESS” itself and proceed further. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step10.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step10.png\" alt=\"Instance Configuration\"></a>.<br> Server Configuration are important as they deal with account names under which database engine runs. Its better not play around with these settings. Click NEXT to go ahead. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step11.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step11.png\" alt=\"Server Configuration\"></a></p>\n<h2 id=\"Step-8-Database-Engine-Configuration\"><a href=\"#Step-8-Database-Engine-Configuration\" class=\"headerlink\" title=\"Step 8 - Database Engine Configuration\"></a>Step 8 - Database Engine Configuration</h2><p>Its heart and soul of your Sql Server installation process, database engine is one which does all the work. It’s mainly split into “Server Configurations”, “Data Directories”, “User Instances” and “FILESTREAM” Server Configurations deals with “Who can get access to the  database engine?”. We have “Windows mode” and “Mixed mode” type of authentication.</p>\n<blockquote>\n<p>Use Mixed Mode authentication mode so that we can Windows mode and <strong>sa</strong> ‘Sql Server System administrator’ account.</p>\n</blockquote>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step12.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step12.png\" alt=\"Database Engine Configuration\"></a>. Since we are installing Reporting Services along with Sql Server Express, select “Install and Configure” so that it starts operational.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step13.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step13.png\" alt=\"Reporting Service Configurations\"></a>.</p>\n<h2 id=\"Step-10-Installation-progress-and-Completion\"><a href=\"#Step-10-Installation-progress-and-Completion\" class=\"headerlink\" title=\"Step 10 - Installation progress and Completion\"></a>Step 10 - Installation progress and Completion</h2><p><a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step14.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step14.png\" alt=\"Installation in progress\"></a> Installation in progress Database engine, reporting service, management tools etc. are successfully installed. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step16.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step16.png\" alt=\"Sql Server Installation Completed\"></a> </p>\n<h2 id=\"Step-11-Connecting-to-Installed-Sql-Server-Express-using-Management-Tools\"><a href=\"#Step-11-Connecting-to-Installed-Sql-Server-Express-using-Management-Tools\" class=\"headerlink\" title=\"Step 11 - Connecting to Installed Sql Server Express  using Management Tools\"></a>Step 11 - Connecting to Installed Sql Server Express  using Management Tools</h2><p>After installation, lets open “Sql Server Management Studio” from Program files directory.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step18.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step18-1024x603.png\" alt=\"Connecting to SQL Server Express using Windows Authentication\"></a><a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step17.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step17-1024x603.png\" alt=\"Connecting to Sql Server Express using Mixed Mode Authentication\"></a><br>Its bit time-consuming but still installation process is clear and simple.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I had planned installation of Sql Server Express 2014 on Windows 10 PRO OS. During this I encountered minor road blocks, which I overcame to install Sql Server Express 2014. This article summarises step by step process of  installation it. These steps not confined to Sql Server Express 2014, they are almost similar to other Sql Server Express like 2012, 2008 R2, 2008.</p>\n<h1 id=\"What-is-Microsoft-SQL-Server-2014-Express\"><a href=\"#What-is-Microsoft-SQL-Server-2014-Express\" class=\"headerlink\" title=\"What is Microsoft SQL Server 2014 Express?\"></a>What is Microsoft SQL Server 2014 Express?</h1><p>MSDN defines it as <a href=\"https://msdn.microsoft.com/en-us/sqlserver2014express.aspx\" target=\"_blank\" rel=\"noopener\">Microsoft SQL Server 2014 Express</a> is a free, feature-rich edition of SQL Server that is ideal for learning, developing, powering desktop, web &amp; small server applications, and for redistribution by ISVs. Sql Server 2014 Express can be installed on Windows 10/ Windows 8.1/ Windows 7. These steps are almost similar for any Sql Server Express edition installation on any Windows OS.</p>\n<h2 id=\"Step-1-Download-SQL-Server-2014-Express-Edition\"><a href=\"#Step-1-Download-SQL-Server-2014-Express-Edition\" class=\"headerlink\" title=\"Step 1 - Download SQL Server 2014 Express Edition\"></a>Step 1 - Download SQL Server 2014 Express Edition</h2><p>In this very first step there was minor road block, from Where to download SQL Server installation? It’s naturally you will open <a href=\"https://www.microsoft.com/en-in/download/details.aspx?id=42299\" target=\"_blank\" rel=\"noopener\">Download Sql Server Express 2014</a> link.  I tried downloading it, but it wasn’t working. Then I found this link <a href=\"http://www.istartedsomething.com/20140616/the-12-step-process-to-download-microsoft-sql-server-express-2014/\" target=\"_blank\" rel=\"noopener\">The 12 step process to download Microsoft SQL Server Express 2014</a>. Oh !! 12 steps to be followed for downloading, then think of installation of it. Scott Hanselman made our life easy by writing this post <a href=\"http://www.hanselman.com/blog/DownloadSQLServerExpress.aspx\" target=\"_blank\" rel=\"noopener\">Download Sql Server</a>. It has not only 2014 edition but Sql Server 2012, 2008 R2. <strong>Everyone just download it from this link, save your time.</strong> I choose this “<strong>Express with Advanced Services (SQLEXPRADV)</strong>“ option because of my need for</p>\n<ul>\n<li>Reporting Services</li>\n<li>Full Text Search</li>\n<li>Full version of Sql Server 2014 Management Studio which gives us SQL Profiler.</li>\n<li>It gives almost full working Sql Server database system with lots of tools.</li>\n</ul>\n<p>Download it from Scott’s blog link for <a href=\"http://www.hanselman.com/blog/DownloadSQLServerExpress.aspx\" target=\"_blank\" rel=\"noopener\">Download SQL Server</a>, I used 64 bit download(32 bit also available). It’s around 1+GB. This will take time to download, meanwhile lets see briefly what are other editions of Sql Server 2014 Express</p>\n<h4 id=\"LocalDB-SqlLocalDB\"><a href=\"#LocalDB-SqlLocalDB\" class=\"headerlink\" title=\"LocalDB (SqlLocalDB)\"></a>LocalDB (SqlLocalDB)</h4><p>LocalDB is a lightweight version of Express that has all its programmability features, yet runs in user mode and has a fast, zero-configuration installation and short list of pre-requisites.  It can be bundled with Application and Database Development tools like Visual Studio or embedded with an application that needs local databases.</p>\n<h4 id=\"Express-SQLEXPR\"><a href=\"#Express-SQLEXPR\" class=\"headerlink\" title=\"Express (SQLEXPR)\"></a>Express (SQLEXPR)</h4><p>Express edition includes the SQL Server database engine only. Best suited to accept remote connections or administer remotely.</p>\n<h4 id=\"Express-with-Tools-SQLEXPRWT\"><a href=\"#Express-with-Tools-SQLEXPRWT\" class=\"headerlink\" title=\"Express with Tools (SQLEXPRWT)\"></a>Express with Tools (SQLEXPRWT)</h4><p>This package contains everything needed to install and configure SQL Server as a database server including the full version of SQL Server 2014 Management Studio. Choose either LocalDB or Express depending on your needs above.</p>\n<h4 id=\"SQL-Server-Management-Studio-Express-SQLManagementStudio\"><a href=\"#SQL-Server-Management-Studio-Express-SQLManagementStudio\" class=\"headerlink\" title=\"SQL Server Management Studio Express (SQLManagementStudio)\"></a>SQL Server Management Studio Express (SQLManagementStudio)</h4><p><em>This does not contain the database, but only the tools to manage SQL Server instances,</em> including LocalDB, SQL Express, SQL Azure, full version of SQL Server 2014 Management Studio, etc. Use this if you already have the database and only need the management tools.</p>\n<h2 id=\"Step-2-Extraction-of-downloaded-Installation-Exe\"><a href=\"#Step-2-Extraction-of-downloaded-Installation-Exe\" class=\"headerlink\" title=\"Step 2 - Extraction of downloaded Installation Exe\"></a>Step 2 - Extraction of downloaded Installation Exe</h2><p>This is fairly simple, double-click downloaded file “_SQLEXPRADV_x64_ENU.exe_”; it will extract all install files to directory where exe is present, you can change that also.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step1.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step1.png\" alt=\"Extraction of downloaded Sql Server 2014 Installation file\"></a></p>\n<h2 id=\"Step-3-Run-Setup-Start-Installation-and-Accept-Terms\"><a href=\"#Step-3-Run-Setup-Start-Installation-and-Accept-Terms\" class=\"headerlink\" title=\"Step 3 - Run Setup, Start Installation and Accept Terms\"></a>Step 3 - Run Setup, Start Installation and Accept Terms</h2><p>After extraction of exe, run the Setup and click “New Sql Server Stand alone installation…” from window open. You should and must “Accept terms”.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step2.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step2.png\" alt=\"Start window of installation process\"></a> <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step3.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step3.png\" alt=\"Accept License Terms\"></a> </p>\n<h2 id=\"Step-4-Install-Rules-and-disable-installed-ANTI-VIRUS-software\"><a href=\"#Step-4-Install-Rules-and-disable-installed-ANTI-VIRUS-software\" class=\"headerlink\" title=\"Step 4 - Install Rules and disable installed ANTI VIRUS software\"></a>Step 4 - Install Rules and disable installed ANTI VIRUS software</h2><p>Setup or Install Rules identify potential problems that might occur for SUCCESSFUL installation of SQL Server Express 2014 edition. All rules passed but “Windows Firewall” gives a warning. “Windows Firewall” warning is related to ANTI VIRUS installation might block enabling ports, settings for SQL Server to use.</p>\n<blockquote>\n<p>DONT FORGET TO DISABLED <em>ANTI VIRUS</em> PROGRAM. It will save time during installation process</p>\n</blockquote>\n<p>I have a anti-virus program with full protection, not thinking much I moved ahead without disabling. Installation was not progressing and was struck at point for hours. So Please Disable IT NOW. Other might not come across this issue based on anti-virus program and its protection levels, but still do disable it. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step4.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step4.png\" alt=\"Install Rules with Windows Firewall warning\"></a>.</p>\n<h2 id=\"Step-5-Feature-Selection\"><a href=\"#Step-5-Feature-Selection\" class=\"headerlink\" title=\"Step 5 - Feature Selection\"></a>Step 5 - Feature Selection</h2><p>In this step we can select the features that needs to be installed, SQL Server gives us option Database Engine, Reporting Services(only if you had downloaded appropriate version), Client Tools for connectivity and SQL Management Tools (do select SQL Profiler) It also displays disk space requirements, make sure you have enough disk space before installation. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step5.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step5.png\" alt=\"Features Selection\"></a></p>\n<h2 id=\"Step-6-Rule-“Microsoft-NET-Framework-3-5-SP1“-required\"><a href=\"#Step-6-Rule-“Microsoft-NET-Framework-3-5-SP1“-required\" class=\"headerlink\" title=\"Step 6 - Rule “Microsoft .NET Framework 3.5 SP1“ required\"></a>Step 6 - Rule “<em>Microsoft .NET Framework 3.5 SP1</em>“ required</h2><p>I was installing SQL Server 2014 on fresh Windows 10 installation, it’s obviously that .NET Framework is not found.  But SQL Server installation needs .NET 3.5 SP1 for proceeding. Its one of requirements in <a href=\"https://msdn.microsoft.com/en-us/library/ms143506(v=sql.120\" target=\"_blank\" rel=\"noopener\">Hardware and Software Requirements for Installing SQL Server 2014</a>.aspx). We face this error as shown. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step6.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step6.png\" alt=\"Rule &quot;Microsoft .NET Framework 3.5 SP1&quot; required\"></a>. Two ways we can install .NET 3.5 framework - Download the .NET Framework 3.5 SP1 or Install using “Windows Features”as shown in images below <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step7.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step7.png\" alt=\"Enable .NET Framework 3.5 from &#39;Turn Windows feature on or off&#39;\"></a> <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step8.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step8.png\" alt=\"Download files from Windows Update\"></a>. Restart the machine to ensure everything is properly installed(Recommended) and then  run “Features Rule” to verify that its ready to proceed installation.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step9.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step9.png\" alt=\"Verified Microsoft .NET Framework 3.5 SP1 exists\"></a>.</p>\n<h2 id=\"Step-7-Instance-and-Server-Configuration-Settings\"><a href=\"#Step-7-Instance-and-Server-Configuration-Settings\" class=\"headerlink\" title=\"Step 7 - Instance and Server Configuration Settings\"></a>Step 7 - Instance and Server Configuration Settings</h2><p>We are installing “SqlExpress” edition, it’s better to keep NAMED instance as “SQLEXPRESS” itself and proceed further. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step10.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step10.png\" alt=\"Instance Configuration\"></a>.<br> Server Configuration are important as they deal with account names under which database engine runs. Its better not play around with these settings. Click NEXT to go ahead. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step11.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step11.png\" alt=\"Server Configuration\"></a></p>\n<h2 id=\"Step-8-Database-Engine-Configuration\"><a href=\"#Step-8-Database-Engine-Configuration\" class=\"headerlink\" title=\"Step 8 - Database Engine Configuration\"></a>Step 8 - Database Engine Configuration</h2><p>Its heart and soul of your Sql Server installation process, database engine is one which does all the work. It’s mainly split into “Server Configurations”, “Data Directories”, “User Instances” and “FILESTREAM” Server Configurations deals with “Who can get access to the  database engine?”. We have “Windows mode” and “Mixed mode” type of authentication.</p>\n<blockquote>\n<p>Use Mixed Mode authentication mode so that we can Windows mode and <strong>sa</strong> ‘Sql Server System administrator’ account.</p>\n</blockquote>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step12.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step12.png\" alt=\"Database Engine Configuration\"></a>. Since we are installing Reporting Services along with Sql Server Express, select “Install and Configure” so that it starts operational.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step13.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step13.png\" alt=\"Reporting Service Configurations\"></a>.</p>\n<h2 id=\"Step-10-Installation-progress-and-Completion\"><a href=\"#Step-10-Installation-progress-and-Completion\" class=\"headerlink\" title=\"Step 10 - Installation progress and Completion\"></a>Step 10 - Installation progress and Completion</h2><p><a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step14.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step14.png\" alt=\"Installation in progress\"></a> Installation in progress Database engine, reporting service, management tools etc. are successfully installed. <a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step16.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step16.png\" alt=\"Sql Server Installation Completed\"></a> </p>\n<h2 id=\"Step-11-Connecting-to-Installed-Sql-Server-Express-using-Management-Tools\"><a href=\"#Step-11-Connecting-to-Installed-Sql-Server-Express-using-Management-Tools\" class=\"headerlink\" title=\"Step 11 - Connecting to Installed Sql Server Express  using Management Tools\"></a>Step 11 - Connecting to Installed Sql Server Express  using Management Tools</h2><p>After installation, lets open “Sql Server Management Studio” from Program files directory.<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step18.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step18-1024x603.png\" alt=\"Connecting to SQL Server Express using Windows Authentication\"></a><a href=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step17.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/09/sqlserverinstall-step17-1024x603.png\" alt=\"Connecting to Sql Server Express using Mixed Mode Authentication\"></a><br>Its bit time-consuming but still installation process is clear and simple.</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jul 27 2018 00:17:02 GMT+0530 (India Standard Time)","title":"Installation of SQL Server Express 2014 on Windows 10","path":"installation-sql-server-express-windows-10/","eyeCatchImage":null,"excerpt":null,"date":"2015-10-05T16:57:11.000Z","pv":0,"totalPV":0,"categories":".NET","tags":["Sql Server","Windows 10"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Learning TypeScript – Getting Started with Visual Studio Code","url":"344.html","id":"344","date":"2016-02-08T09:40:23.000Z","_content":"\nLearning TypeScript is tutorials series using Visual Studio Code (VS Code).\n\nWhat is Typescript?\n-------------------\n\nTypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open Source.\n\n#### What we will learn?\n\n1.  Setup environment for learning TypeScript\n2.  Using Visual Studio Code as editor for learning typescript\n3.  Configuring TypeScript options and start learning\n4.  Setting Task Runner to transpile AKA compile to JavaScript\n5.  Using lite-server for running web application in Visual Studio code (VS Code)\n\nLet’s get started with series on Learning TypeScript\n\n> Note: This series only requires Visual Studio Code, TypeScript, lite-server, NPM on Windows 7/8.1/10, Linux or Mac OS\n\nStep 1: Setup environment for learning TypeScript\n-------------------------------------------------\n\nWe need following technologies for get started\n\n*   NPM (Node Package Manager) – Its package management tool for almost all packages related to web technologies.\n\nWe will first install NPM on our machines, just go through “[I_nstalling Node.js and updating npm_](https://docs.npmjs.com/getting-started/installing-node)” \\[caption id=\"attachment_347\" align=\"aligncenter\" width=\"317\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/npm-version.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/npm-version.png) Verifying NPM Version installed\\[/caption\\]\n\n*   TypeScript – We can install TypeScript using NPM by running following command\n\n**npm install -g typescript** This will install the latest version of TypeScript globally meaning PATH environment variable is set. We can verify installation as shown below \\[caption id=\"attachment_351\" align=\"aligncenter\" width=\"327\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/typescript-version.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/typescript-version.png) Verify TypeScript Installed\\[/caption\\]\n\n> Note: If Visual Studio 2013/2015 is already installed then TypeScript will already be available but using above command to install latest version and delete any existing versions.\n\nStep 2: Using Visual Studio Code(VS Code) as editor for learning TypeScript\n---------------------------------------------------------------------------\n\nWe need a code editor for learning TypeScript with best developer tooling experience. Download [Visual Studio Code,](https://code.visualstudio.com/) install it. It’s cross platform code editor which can be used in Linux, Mac OS and Windows OS.  _This is one time setup._\n\nStep 3: Configuring TypeScript options\n--------------------------------------\n\nCreate folder \"**src**\" acting as source code folder, open _Visual Studio Code_ from Program Files installation path Click File a Open Folder a enter \"**src**\" folder full path and VS Code open this folder as source code containing folder. It’s empty as of now. \\[caption id=\"attachment_352\" align=\"aligncenter\" width=\"344\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/vscode-openFolder.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/vscode-openFolder.png) Create \"Src\" folder, open it VS Code\\[/caption\\] **TypeScript (TS)** files don’t directly run on browser, they are compiled (AKA _Transpiled_) to JavaScript so that we can refer them in HTML/ other JavaScript pages. To do this we need to add “tsconfig.json” The presence of a **_tsconfig.json_** file in a directory indicates that the directory is the root of a TypeScript project. The **_tsconfig.json_** file specifies the root files and the compiler options required to compile the project. Let’s add “_**tsconfig.json**_” file to \"**_src_**\" folder by either adding that in windows folder or create them in VS code.\n\n{\n    \"compilerOptions\": {\n        \"target\": \"es5\", \n        \"outDir\": \"scripts/\"\n    }    \n}\n\n> TypeScript Compiler Options says \"_Target es5 standards of JavaScript_” and “_move transpiled JS files to scripts/ folder_”.\n\nMight be wondering why “**outDir**” is needed!! **outDir** is Output Directory for transpiled (compiled) typescript files to stored. Keeping all JS files in one folder is easy to maintain and keeps it clean. If you want still “**outDir**” can be omitted because its compiler option. It’s time to add out first _TypeScript_ file, very simple example but worthy to understand importance of TypeScript. Just create file with .ts extension\n\nfunction ShowTime(toDayDate: Date) {    \n    document.getElementById(\"h2Msg\").innerHTML = \"Time is -- \" + toDayDate;\n}\n\nIts simple function “_**ShowTime**_” taking Date as parameter to function, then sets innerHTML of div element. ShowTime takes strong type parameter of Date. Let’s add HTML file “**index.html**”, containing just HTML button with onclick event calling ShowTime function passing Date as parameter and H2 to show message.\n\n<html>\n    <head>\n        <script src=\"scripts/first.js\">            \n        </script>\n    </head>\n    <body>\n         <button onclick=\"ShowTime(Date());\">Show Time</button>\n         </br>\n         <h2 id=\"h2Msg\" style=\"color:red;\"></h2>\n    </body>\n</html>\n\nIf you observe carefully the SCRIPT tag; I have not created any “_**scripts**_” folder nor created “_**first.js**_” file.\n\nStep 4: Setting Task Runner to transpile AKA compile TypeScript to JavaScript\n-----------------------------------------------------------------------------\n\nThe definition of **TypeScript** says that it’s TYPED superset which compiled to JavaScript because all the browsers understand JS code rather TS code. Transpiling TypeScript code is process of converting it to JavaScript code. Its synonyms to compiling. \\[caption id=\"attachment_350\" align=\"aligncenter\" width=\"732\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/transpiling.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/transpiling.png) Transpiling TS to JS files\\[/caption\\]   When we build now using **Cntrl+Shift+B in VS code**, we get this warning telling “**No task runner configured**”. Then click on “_**Configure Task Runner**_” to create tasks.json file which is collection of Tasks for various things TypeScript, Gulp, Grunt etc. \\[caption id=\"attachment_345\" align=\"aligncenter\" width=\"1364\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/configureTaskRunner.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/configureTaskRunner.png) Configure TaskRunner message\\[/caption\\] Now that tasks.json is created, we need to modify little bit to make sure that all TypeScript files are transpiled to JS files. There are lots of tasks commented keep them as is, we can use them later From the image below refer Step 2, ensure that “args” is empty so that it takes all TS files for transpiling \\[caption id=\"attachment_349\" align=\"aligncenter\" width=\"1135\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/settingsArgsArryEmpty.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/settingsArgsArryEmpty.png) Configure Tasks.Json\\[/caption\\] Point 3 shows “_scripts_” folder with “_first.js_” after **Cntrl+Shift+B (Build)**. If you see them it’s working properly.\n\nStep 5 Using lite-server for running web application in VS code\n---------------------------------------------------------------\n\nVS Code is just code editor, we can’t run web application just as we do in Visual Studio IDE. We have install some kind of web server which run web application in browser. I choose [lite-server](https://github.com/johnpapa/lite-server) because its lightweight node server, opens it in browser, refreshers when HTML or JS changes and many other things. To install it globally, open command prompt and then below command **$ npm install -g lite-server** After it successfully installs, right click on “**index.html**”, click “_**Open in Command Prompt**_”. This will navigate to source folder. Then enter “_**lite-server**_” in console, it will open web browser showing index.html\n\n> Index.html is treated as default page, so don’t name anything else.\n\n\\[caption id=\"attachment_348\" align=\"aligncenter\" width=\"631\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/open-lite-server.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/open-lite-server.png) Running lite-server\\[/caption\\]   \\[caption id=\"attachment_346\" align=\"aligncenter\" width=\"723\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/index.html-page-open.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/index.html-page-open.png) index.html showing TS - JS code on browser\\[/caption\\] Now it open index.html page in browser as below, do click “_Show Time_” to display it.","source":"_posts/learning-typescript-with-visual-studio-code.md","raw":"---\ntitle: Learning TypeScript – Getting Started with Visual Studio Code\ntags:\n  - TypeScript\nurl: 344.html\nid: 344\ncategories:\n  - TypeScript\n  - Visual Studio Code\ndate: 2016-02-08 15:10:23\n---\n\nLearning TypeScript is tutorials series using Visual Studio Code (VS Code).\n\nWhat is Typescript?\n-------------------\n\nTypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open Source.\n\n#### What we will learn?\n\n1.  Setup environment for learning TypeScript\n2.  Using Visual Studio Code as editor for learning typescript\n3.  Configuring TypeScript options and start learning\n4.  Setting Task Runner to transpile AKA compile to JavaScript\n5.  Using lite-server for running web application in Visual Studio code (VS Code)\n\nLet’s get started with series on Learning TypeScript\n\n> Note: This series only requires Visual Studio Code, TypeScript, lite-server, NPM on Windows 7/8.1/10, Linux or Mac OS\n\nStep 1: Setup environment for learning TypeScript\n-------------------------------------------------\n\nWe need following technologies for get started\n\n*   NPM (Node Package Manager) – Its package management tool for almost all packages related to web technologies.\n\nWe will first install NPM on our machines, just go through “[I_nstalling Node.js and updating npm_](https://docs.npmjs.com/getting-started/installing-node)” \\[caption id=\"attachment_347\" align=\"aligncenter\" width=\"317\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/npm-version.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/npm-version.png) Verifying NPM Version installed\\[/caption\\]\n\n*   TypeScript – We can install TypeScript using NPM by running following command\n\n**npm install -g typescript** This will install the latest version of TypeScript globally meaning PATH environment variable is set. We can verify installation as shown below \\[caption id=\"attachment_351\" align=\"aligncenter\" width=\"327\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/typescript-version.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/typescript-version.png) Verify TypeScript Installed\\[/caption\\]\n\n> Note: If Visual Studio 2013/2015 is already installed then TypeScript will already be available but using above command to install latest version and delete any existing versions.\n\nStep 2: Using Visual Studio Code(VS Code) as editor for learning TypeScript\n---------------------------------------------------------------------------\n\nWe need a code editor for learning TypeScript with best developer tooling experience. Download [Visual Studio Code,](https://code.visualstudio.com/) install it. It’s cross platform code editor which can be used in Linux, Mac OS and Windows OS.  _This is one time setup._\n\nStep 3: Configuring TypeScript options\n--------------------------------------\n\nCreate folder \"**src**\" acting as source code folder, open _Visual Studio Code_ from Program Files installation path Click File a Open Folder a enter \"**src**\" folder full path and VS Code open this folder as source code containing folder. It’s empty as of now. \\[caption id=\"attachment_352\" align=\"aligncenter\" width=\"344\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/vscode-openFolder.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/vscode-openFolder.png) Create \"Src\" folder, open it VS Code\\[/caption\\] **TypeScript (TS)** files don’t directly run on browser, they are compiled (AKA _Transpiled_) to JavaScript so that we can refer them in HTML/ other JavaScript pages. To do this we need to add “tsconfig.json” The presence of a **_tsconfig.json_** file in a directory indicates that the directory is the root of a TypeScript project. The **_tsconfig.json_** file specifies the root files and the compiler options required to compile the project. Let’s add “_**tsconfig.json**_” file to \"**_src_**\" folder by either adding that in windows folder or create them in VS code.\n\n{\n    \"compilerOptions\": {\n        \"target\": \"es5\", \n        \"outDir\": \"scripts/\"\n    }    \n}\n\n> TypeScript Compiler Options says \"_Target es5 standards of JavaScript_” and “_move transpiled JS files to scripts/ folder_”.\n\nMight be wondering why “**outDir**” is needed!! **outDir** is Output Directory for transpiled (compiled) typescript files to stored. Keeping all JS files in one folder is easy to maintain and keeps it clean. If you want still “**outDir**” can be omitted because its compiler option. It’s time to add out first _TypeScript_ file, very simple example but worthy to understand importance of TypeScript. Just create file with .ts extension\n\nfunction ShowTime(toDayDate: Date) {    \n    document.getElementById(\"h2Msg\").innerHTML = \"Time is -- \" + toDayDate;\n}\n\nIts simple function “_**ShowTime**_” taking Date as parameter to function, then sets innerHTML of div element. ShowTime takes strong type parameter of Date. Let’s add HTML file “**index.html**”, containing just HTML button with onclick event calling ShowTime function passing Date as parameter and H2 to show message.\n\n<html>\n    <head>\n        <script src=\"scripts/first.js\">            \n        </script>\n    </head>\n    <body>\n         <button onclick=\"ShowTime(Date());\">Show Time</button>\n         </br>\n         <h2 id=\"h2Msg\" style=\"color:red;\"></h2>\n    </body>\n</html>\n\nIf you observe carefully the SCRIPT tag; I have not created any “_**scripts**_” folder nor created “_**first.js**_” file.\n\nStep 4: Setting Task Runner to transpile AKA compile TypeScript to JavaScript\n-----------------------------------------------------------------------------\n\nThe definition of **TypeScript** says that it’s TYPED superset which compiled to JavaScript because all the browsers understand JS code rather TS code. Transpiling TypeScript code is process of converting it to JavaScript code. Its synonyms to compiling. \\[caption id=\"attachment_350\" align=\"aligncenter\" width=\"732\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/transpiling.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/transpiling.png) Transpiling TS to JS files\\[/caption\\]   When we build now using **Cntrl+Shift+B in VS code**, we get this warning telling “**No task runner configured**”. Then click on “_**Configure Task Runner**_” to create tasks.json file which is collection of Tasks for various things TypeScript, Gulp, Grunt etc. \\[caption id=\"attachment_345\" align=\"aligncenter\" width=\"1364\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/configureTaskRunner.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/configureTaskRunner.png) Configure TaskRunner message\\[/caption\\] Now that tasks.json is created, we need to modify little bit to make sure that all TypeScript files are transpiled to JS files. There are lots of tasks commented keep them as is, we can use them later From the image below refer Step 2, ensure that “args” is empty so that it takes all TS files for transpiling \\[caption id=\"attachment_349\" align=\"aligncenter\" width=\"1135\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/settingsArgsArryEmpty.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/settingsArgsArryEmpty.png) Configure Tasks.Json\\[/caption\\] Point 3 shows “_scripts_” folder with “_first.js_” after **Cntrl+Shift+B (Build)**. If you see them it’s working properly.\n\nStep 5 Using lite-server for running web application in VS code\n---------------------------------------------------------------\n\nVS Code is just code editor, we can’t run web application just as we do in Visual Studio IDE. We have install some kind of web server which run web application in browser. I choose [lite-server](https://github.com/johnpapa/lite-server) because its lightweight node server, opens it in browser, refreshers when HTML or JS changes and many other things. To install it globally, open command prompt and then below command **$ npm install -g lite-server** After it successfully installs, right click on “**index.html**”, click “_**Open in Command Prompt**_”. This will navigate to source folder. Then enter “_**lite-server**_” in console, it will open web browser showing index.html\n\n> Index.html is treated as default page, so don’t name anything else.\n\n\\[caption id=\"attachment_348\" align=\"aligncenter\" width=\"631\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/open-lite-server.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/open-lite-server.png) Running lite-server\\[/caption\\]   \\[caption id=\"attachment_346\" align=\"aligncenter\" width=\"723\"\\][![Learning TypeScript](http://www.mithunvp.com/wp-content/uploads/2016/02/index.html-page-open.png)](http://www.mithunvp.com/wp-content/uploads/2016/02/index.html-page-open.png) index.html showing TS - JS code on browser\\[/caption\\] Now it open index.html page in browser as below, do click “_Show Time_” to display it.","slug":"learning-typescript-with-visual-studio-code","published":1,"updated":"2018-07-10T19:49:06.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034wm001gs4tjf9ccl21k","content":"<p>Learning TypeScript is tutorials series using Visual Studio Code (VS Code).</p>\n<h2 id=\"What-is-Typescript\"><a href=\"#What-is-Typescript\" class=\"headerlink\" title=\"What is Typescript?\"></a>What is Typescript?</h2><p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open Source.</p>\n<h4 id=\"What-we-will-learn\"><a href=\"#What-we-will-learn\" class=\"headerlink\" title=\"What we will learn?\"></a>What we will learn?</h4><ol>\n<li>Setup environment for learning TypeScript</li>\n<li>Using Visual Studio Code as editor for learning typescript</li>\n<li>Configuring TypeScript options and start learning</li>\n<li>Setting Task Runner to transpile AKA compile to JavaScript</li>\n<li>Using lite-server for running web application in Visual Studio code (VS Code)</li>\n</ol>\n<p>Let’s get started with series on Learning TypeScript</p>\n<blockquote>\n<p>Note: This series only requires Visual Studio Code, TypeScript, lite-server, NPM on Windows 7/8.1/10, Linux or Mac OS</p>\n</blockquote>\n<h2 id=\"Step-1-Setup-environment-for-learning-TypeScript\"><a href=\"#Step-1-Setup-environment-for-learning-TypeScript\" class=\"headerlink\" title=\"Step 1: Setup environment for learning TypeScript\"></a>Step 1: Setup environment for learning TypeScript</h2><p>We need following technologies for get started</p>\n<ul>\n<li>NPM (Node Package Manager) – Its package management tool for almost all packages related to web technologies.</li>\n</ul>\n<p>We will first install NPM on our machines, just go through “<a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" rel=\"noopener\">I_nstalling Node.js and updating npm_</a>” [caption id=”attachment_347” align=”aligncenter” width=”317”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/npm-version.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/npm-version.png\" alt=\"Learning TypeScript\"></a> Verifying NPM Version installed[/caption]</p>\n<ul>\n<li>TypeScript – We can install TypeScript using NPM by running following command</li>\n</ul>\n<p><strong>npm install -g typescript</strong> This will install the latest version of TypeScript globally meaning PATH environment variable is set. We can verify installation as shown below [caption id=”attachment_351” align=”aligncenter” width=”327”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/typescript-version.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/typescript-version.png\" alt=\"Learning TypeScript\"></a> Verify TypeScript Installed[/caption]</p>\n<blockquote>\n<p>Note: If Visual Studio 2013/2015 is already installed then TypeScript will already be available but using above command to install latest version and delete any existing versions.</p>\n</blockquote>\n<h2 id=\"Step-2-Using-Visual-Studio-Code-VS-Code-as-editor-for-learning-TypeScript\"><a href=\"#Step-2-Using-Visual-Studio-Code-VS-Code-as-editor-for-learning-TypeScript\" class=\"headerlink\" title=\"Step 2: Using Visual Studio Code(VS Code) as editor for learning TypeScript\"></a>Step 2: Using Visual Studio Code(VS Code) as editor for learning TypeScript</h2><p>We need a code editor for learning TypeScript with best developer tooling experience. Download <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code,</a> install it. It’s cross platform code editor which can be used in Linux, Mac OS and Windows OS.  <em>This is one time setup.</em></p>\n<h2 id=\"Step-3-Configuring-TypeScript-options\"><a href=\"#Step-3-Configuring-TypeScript-options\" class=\"headerlink\" title=\"Step 3: Configuring TypeScript options\"></a>Step 3: Configuring TypeScript options</h2><p>Create folder “<strong>src</strong>“ acting as source code folder, open <em>Visual Studio Code</em> from Program Files installation path Click File a Open Folder a enter “<strong>src</strong>“ folder full path and VS Code open this folder as source code containing folder. It’s empty as of now. [caption id=”attachment_352” align=”aligncenter” width=”344”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/vscode-openFolder.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/vscode-openFolder.png\" alt=\"Learning TypeScript\"></a> Create “Src” folder, open it VS Code[/caption] <strong>TypeScript (TS)</strong> files don’t directly run on browser, they are compiled (AKA <em>Transpiled</em>) to JavaScript so that we can refer them in HTML/ other JavaScript pages. To do this we need to add “tsconfig.json” The presence of a <strong><em>tsconfig.json</em></strong> file in a directory indicates that the directory is the root of a TypeScript project. The <strong><em>tsconfig.json</em></strong> file specifies the root files and the compiler options required to compile the project. Let’s add “<em><strong>tsconfig.json</strong></em>” file to “<strong><em>src</em></strong>“ folder by either adding that in windows folder or create them in VS code.</p>\n<p>{<br>    “compilerOptions”: {<br>        “target”: “es5”,<br>        “outDir”: “scripts/“<br>    }<br>}</p>\n<blockquote>\n<p>TypeScript Compiler Options says “<em>Target es5 standards of JavaScript</em>” and “<em>move transpiled JS files to scripts/ folder</em>”.</p>\n</blockquote>\n<p>Might be wondering why “<strong>outDir</strong>” is needed!! <strong>outDir</strong> is Output Directory for transpiled (compiled) typescript files to stored. Keeping all JS files in one folder is easy to maintain and keeps it clean. If you want still “<strong>outDir</strong>” can be omitted because its compiler option. It’s time to add out first <em>TypeScript</em> file, very simple example but worthy to understand importance of TypeScript. Just create file with .ts extension</p>\n<p>function ShowTime(toDayDate: Date) {<br>    document.getElementById(“h2Msg”).innerHTML = “Time is – “ + toDayDate;<br>}</p>\n<p>Its simple function “<em><strong>ShowTime</strong></em>” taking Date as parameter to function, then sets innerHTML of div element. ShowTime takes strong type parameter of Date. Let’s add HTML file “<strong>index.html</strong>”, containing just HTML button with onclick event calling ShowTime function passing Date as parameter and H2 to show message.</p>\n<html><br>    <head><br>        <script src=\"scripts/first.js\"><br>        </script><br>    </head><br>    <body><br>         <button onclick=\"ShowTime(Date());\">Show Time</button><br>         <br><br>         <h2 id=\"h2Msg\" style=\"color:red;\"></h2><br>    </body><br></html>\n\n<p>If you observe carefully the SCRIPT tag; I have not created any “<em><strong>scripts</strong></em>” folder nor created “<em><strong>first.js</strong></em>” file.</p>\n<h2 id=\"Step-4-Setting-Task-Runner-to-transpile-AKA-compile-TypeScript-to-JavaScript\"><a href=\"#Step-4-Setting-Task-Runner-to-transpile-AKA-compile-TypeScript-to-JavaScript\" class=\"headerlink\" title=\"Step 4: Setting Task Runner to transpile AKA compile TypeScript to JavaScript\"></a>Step 4: Setting Task Runner to transpile AKA compile TypeScript to JavaScript</h2><p>The definition of <strong>TypeScript</strong> says that it’s TYPED superset which compiled to JavaScript because all the browsers understand JS code rather TS code. Transpiling TypeScript code is process of converting it to JavaScript code. Its synonyms to compiling. [caption id=”attachment_350” align=”aligncenter” width=”732”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/transpiling.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/transpiling.png\" alt=\"Learning TypeScript\"></a> Transpiling TS to JS files[/caption]   When we build now using <strong>Cntrl+Shift+B in VS code</strong>, we get this warning telling “<strong>No task runner configured</strong>”. Then click on “<em><strong>Configure Task Runner</strong></em>” to create tasks.json file which is collection of Tasks for various things TypeScript, Gulp, Grunt etc. [caption id=”attachment_345” align=”aligncenter” width=”1364”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/configureTaskRunner.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/configureTaskRunner.png\" alt=\"Learning TypeScript\"></a> Configure TaskRunner message[/caption] Now that tasks.json is created, we need to modify little bit to make sure that all TypeScript files are transpiled to JS files. There are lots of tasks commented keep them as is, we can use them later From the image below refer Step 2, ensure that “args” is empty so that it takes all TS files for transpiling [caption id=”attachment_349” align=”aligncenter” width=”1135”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/settingsArgsArryEmpty.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/settingsArgsArryEmpty.png\" alt=\"Learning TypeScript\"></a> Configure Tasks.Json[/caption] Point 3 shows “<em>scripts</em>” folder with “<em>first.js</em>” after <strong>Cntrl+Shift+B (Build)</strong>. If you see them it’s working properly.</p>\n<h2 id=\"Step-5-Using-lite-server-for-running-web-application-in-VS-code\"><a href=\"#Step-5-Using-lite-server-for-running-web-application-in-VS-code\" class=\"headerlink\" title=\"Step 5 Using lite-server for running web application in VS code\"></a>Step 5 Using lite-server for running web application in VS code</h2><p>VS Code is just code editor, we can’t run web application just as we do in Visual Studio IDE. We have install some kind of web server which run web application in browser. I choose <a href=\"https://github.com/johnpapa/lite-server\" target=\"_blank\" rel=\"noopener\">lite-server</a> because its lightweight node server, opens it in browser, refreshers when HTML or JS changes and many other things. To install it globally, open command prompt and then below command <strong>$ npm install -g lite-server</strong> After it successfully installs, right click on “<strong>index.html</strong>”, click “<em><strong>Open in Command Prompt</strong></em>”. This will navigate to source folder. Then enter “<em><strong>lite-server</strong></em>” in console, it will open web browser showing index.html</p>\n<blockquote>\n<p>Index.html is treated as default page, so don’t name anything else.</p>\n</blockquote>\n<p>[caption id=”attachment_348” align=”aligncenter” width=”631”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/open-lite-server.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/open-lite-server.png\" alt=\"Learning TypeScript\"></a> Running lite-server[/caption]   [caption id=”attachment_346” align=”aligncenter” width=”723”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/index.html-page-open.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/index.html-page-open.png\" alt=\"Learning TypeScript\"></a> index.html showing TS - JS code on browser[/caption] Now it open index.html page in browser as below, do click “<em>Show Time</em>” to display it.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Learning TypeScript is tutorials series using Visual Studio Code (VS Code).</p>\n<h2 id=\"What-is-Typescript\"><a href=\"#What-is-Typescript\" class=\"headerlink\" title=\"What is Typescript?\"></a>What is Typescript?</h2><p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open Source.</p>\n<h4 id=\"What-we-will-learn\"><a href=\"#What-we-will-learn\" class=\"headerlink\" title=\"What we will learn?\"></a>What we will learn?</h4><ol>\n<li>Setup environment for learning TypeScript</li>\n<li>Using Visual Studio Code as editor for learning typescript</li>\n<li>Configuring TypeScript options and start learning</li>\n<li>Setting Task Runner to transpile AKA compile to JavaScript</li>\n<li>Using lite-server for running web application in Visual Studio code (VS Code)</li>\n</ol>\n<p>Let’s get started with series on Learning TypeScript</p>\n<blockquote>\n<p>Note: This series only requires Visual Studio Code, TypeScript, lite-server, NPM on Windows 7/8.1/10, Linux or Mac OS</p>\n</blockquote>\n<h2 id=\"Step-1-Setup-environment-for-learning-TypeScript\"><a href=\"#Step-1-Setup-environment-for-learning-TypeScript\" class=\"headerlink\" title=\"Step 1: Setup environment for learning TypeScript\"></a>Step 1: Setup environment for learning TypeScript</h2><p>We need following technologies for get started</p>\n<ul>\n<li>NPM (Node Package Manager) – Its package management tool for almost all packages related to web technologies.</li>\n</ul>\n<p>We will first install NPM on our machines, just go through “<a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" rel=\"noopener\">I_nstalling Node.js and updating npm_</a>” [caption id=”attachment_347” align=”aligncenter” width=”317”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/npm-version.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/npm-version.png\" alt=\"Learning TypeScript\"></a> Verifying NPM Version installed[/caption]</p>\n<ul>\n<li>TypeScript – We can install TypeScript using NPM by running following command</li>\n</ul>\n<p><strong>npm install -g typescript</strong> This will install the latest version of TypeScript globally meaning PATH environment variable is set. We can verify installation as shown below [caption id=”attachment_351” align=”aligncenter” width=”327”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/typescript-version.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/typescript-version.png\" alt=\"Learning TypeScript\"></a> Verify TypeScript Installed[/caption]</p>\n<blockquote>\n<p>Note: If Visual Studio 2013/2015 is already installed then TypeScript will already be available but using above command to install latest version and delete any existing versions.</p>\n</blockquote>\n<h2 id=\"Step-2-Using-Visual-Studio-Code-VS-Code-as-editor-for-learning-TypeScript\"><a href=\"#Step-2-Using-Visual-Studio-Code-VS-Code-as-editor-for-learning-TypeScript\" class=\"headerlink\" title=\"Step 2: Using Visual Studio Code(VS Code) as editor for learning TypeScript\"></a>Step 2: Using Visual Studio Code(VS Code) as editor for learning TypeScript</h2><p>We need a code editor for learning TypeScript with best developer tooling experience. Download <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">Visual Studio Code,</a> install it. It’s cross platform code editor which can be used in Linux, Mac OS and Windows OS.  <em>This is one time setup.</em></p>\n<h2 id=\"Step-3-Configuring-TypeScript-options\"><a href=\"#Step-3-Configuring-TypeScript-options\" class=\"headerlink\" title=\"Step 3: Configuring TypeScript options\"></a>Step 3: Configuring TypeScript options</h2><p>Create folder “<strong>src</strong>“ acting as source code folder, open <em>Visual Studio Code</em> from Program Files installation path Click File a Open Folder a enter “<strong>src</strong>“ folder full path and VS Code open this folder as source code containing folder. It’s empty as of now. [caption id=”attachment_352” align=”aligncenter” width=”344”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/vscode-openFolder.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/vscode-openFolder.png\" alt=\"Learning TypeScript\"></a> Create “Src” folder, open it VS Code[/caption] <strong>TypeScript (TS)</strong> files don’t directly run on browser, they are compiled (AKA <em>Transpiled</em>) to JavaScript so that we can refer them in HTML/ other JavaScript pages. To do this we need to add “tsconfig.json” The presence of a <strong><em>tsconfig.json</em></strong> file in a directory indicates that the directory is the root of a TypeScript project. The <strong><em>tsconfig.json</em></strong> file specifies the root files and the compiler options required to compile the project. Let’s add “<em><strong>tsconfig.json</strong></em>” file to “<strong><em>src</em></strong>“ folder by either adding that in windows folder or create them in VS code.</p>\n<p>{<br>    “compilerOptions”: {<br>        “target”: “es5”,<br>        “outDir”: “scripts/“<br>    }<br>}</p>\n<blockquote>\n<p>TypeScript Compiler Options says “<em>Target es5 standards of JavaScript</em>” and “<em>move transpiled JS files to scripts/ folder</em>”.</p>\n</blockquote>\n<p>Might be wondering why “<strong>outDir</strong>” is needed!! <strong>outDir</strong> is Output Directory for transpiled (compiled) typescript files to stored. Keeping all JS files in one folder is easy to maintain and keeps it clean. If you want still “<strong>outDir</strong>” can be omitted because its compiler option. It’s time to add out first <em>TypeScript</em> file, very simple example but worthy to understand importance of TypeScript. Just create file with .ts extension</p>\n<p>function ShowTime(toDayDate: Date) {<br>    document.getElementById(“h2Msg”).innerHTML = “Time is – “ + toDayDate;<br>}</p>\n<p>Its simple function “<em><strong>ShowTime</strong></em>” taking Date as parameter to function, then sets innerHTML of div element. ShowTime takes strong type parameter of Date. Let’s add HTML file “<strong>index.html</strong>”, containing just HTML button with onclick event calling ShowTime function passing Date as parameter and H2 to show message.</p>\n<html><br>    <head><br>        <script src=\"scripts/first.js\"><br>        </script><br>    </head><br>    <body><br>         <button onclick=\"ShowTime(Date());\">Show Time</button><br>         <br><br>         <h2 id=\"h2Msg\" style=\"color:red;\"></h2><br>    </body><br></html>\n\n<p>If you observe carefully the SCRIPT tag; I have not created any “<em><strong>scripts</strong></em>” folder nor created “<em><strong>first.js</strong></em>” file.</p>\n<h2 id=\"Step-4-Setting-Task-Runner-to-transpile-AKA-compile-TypeScript-to-JavaScript\"><a href=\"#Step-4-Setting-Task-Runner-to-transpile-AKA-compile-TypeScript-to-JavaScript\" class=\"headerlink\" title=\"Step 4: Setting Task Runner to transpile AKA compile TypeScript to JavaScript\"></a>Step 4: Setting Task Runner to transpile AKA compile TypeScript to JavaScript</h2><p>The definition of <strong>TypeScript</strong> says that it’s TYPED superset which compiled to JavaScript because all the browsers understand JS code rather TS code. Transpiling TypeScript code is process of converting it to JavaScript code. Its synonyms to compiling. [caption id=”attachment_350” align=”aligncenter” width=”732”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/transpiling.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/transpiling.png\" alt=\"Learning TypeScript\"></a> Transpiling TS to JS files[/caption]   When we build now using <strong>Cntrl+Shift+B in VS code</strong>, we get this warning telling “<strong>No task runner configured</strong>”. Then click on “<em><strong>Configure Task Runner</strong></em>” to create tasks.json file which is collection of Tasks for various things TypeScript, Gulp, Grunt etc. [caption id=”attachment_345” align=”aligncenter” width=”1364”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/configureTaskRunner.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/configureTaskRunner.png\" alt=\"Learning TypeScript\"></a> Configure TaskRunner message[/caption] Now that tasks.json is created, we need to modify little bit to make sure that all TypeScript files are transpiled to JS files. There are lots of tasks commented keep them as is, we can use them later From the image below refer Step 2, ensure that “args” is empty so that it takes all TS files for transpiling [caption id=”attachment_349” align=”aligncenter” width=”1135”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/settingsArgsArryEmpty.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/settingsArgsArryEmpty.png\" alt=\"Learning TypeScript\"></a> Configure Tasks.Json[/caption] Point 3 shows “<em>scripts</em>” folder with “<em>first.js</em>” after <strong>Cntrl+Shift+B (Build)</strong>. If you see them it’s working properly.</p>\n<h2 id=\"Step-5-Using-lite-server-for-running-web-application-in-VS-code\"><a href=\"#Step-5-Using-lite-server-for-running-web-application-in-VS-code\" class=\"headerlink\" title=\"Step 5 Using lite-server for running web application in VS code\"></a>Step 5 Using lite-server for running web application in VS code</h2><p>VS Code is just code editor, we can’t run web application just as we do in Visual Studio IDE. We have install some kind of web server which run web application in browser. I choose <a href=\"https://github.com/johnpapa/lite-server\" target=\"_blank\" rel=\"noopener\">lite-server</a> because its lightweight node server, opens it in browser, refreshers when HTML or JS changes and many other things. To install it globally, open command prompt and then below command <strong>$ npm install -g lite-server</strong> After it successfully installs, right click on “<strong>index.html</strong>”, click “<em><strong>Open in Command Prompt</strong></em>”. This will navigate to source folder. Then enter “<em><strong>lite-server</strong></em>” in console, it will open web browser showing index.html</p>\n<blockquote>\n<p>Index.html is treated as default page, so don’t name anything else.</p>\n</blockquote>\n<p>[caption id=”attachment_348” align=”aligncenter” width=”631”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/open-lite-server.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/open-lite-server.png\" alt=\"Learning TypeScript\"></a> Running lite-server[/caption]   [caption id=”attachment_346” align=”aligncenter” width=”723”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/02/index.html-page-open.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/02/index.html-page-open.png\" alt=\"Learning TypeScript\"></a> index.html showing TS - JS code on browser[/caption] Now it open index.html page in browser as below, do click “<em>Show Time</em>” to display it.</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Learning TypeScript – Getting Started with Visual Studio Code","path":"learning-typescript-with-visual-studio-code/","eyeCatchImage":null,"excerpt":null,"date":"2016-02-08T09:40:23.000Z","pv":0,"totalPV":0,"categories":"TypeScript > Visual Studio Code","tags":["TypeScript"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"THREE examples of Deferred vs. Immediate execution in LINQ using C#","url":"144.html","id":"144","date":"2013-11-22T20:05:17.000Z","_content":"\nIn DOT NET world we have **Language-Integrated Query (LINQ)** – it extends powerful query capabilities to the language syntax of C# and Visual Basic. LINQ provider assemblies enable the use of LINQ with .NET Framework collections, SQL Server databases, ADO.NET Datasets, and XML documents. They are part of .NET framework 3.5 and above. Now let’s see three ways to understand what exactly is this deferred and immediate execution all about in LINQ using C#.\n\nDateTime to verify deferred execution of LINQ query\n---------------------------------------------------\n\n*   Create  console application with name “_LinqSample_”\n*   Create Product class with _ID, Name, InStock_ members in it.\n*   Create collection of products, LINQ Query and iterate through it to display time.\n\n[![Creating PRODUCT class and it's sample collection](http://www.mithunvp.com/wp-content/uploads/2013/11/product-class-collection-300x65.png \"Creating PRODUCT class and it's sample collection\")](http://www.mithunvp.com/wp-content/uploads/2013/11/product-class-collection.png)\n\n*   Now we will be creating two simple LINQ queries which will act as deferred and immediate query\n\n[![Queries to use for deferred and Immediate execution](http://www.mithunvp.com/wp-content/uploads/2013/11/deferred-Immediate-300x171.png)](http://www.mithunvp.com/wp-content/uploads/2013/11/deferred-Immediate.png) We have created list of products, written query for deferred and immediate execution, now let’s loop through them in 3 different foreach loops to check difference in time they are executed. The yellow lines indicate that once the immediate query gets executed, any subsequent looping will fetch same copy. While deferred execution gets executed for every loop showing different time stamp.[![Console output showing time stamp for Deferred & Immediate query execution](http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot-300x177.png)](http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot.png)\n\nCollection Items update to show deferred execution & Immediate execution\n------------------------------------------------------------------------\n\nAdding the items to collection in execution and looping them again is also easiest way to check when LINQ query executed. We have to write a query which gets only In Stock products, loop through that query, add one more item to collection and loop through again. Below code snippet image clearly shows this. [![Deferred execution in action](http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-deferred-query-300x181.png \"codesnippet-deferred-query\")](http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-deferred-query.png) Code snippet showing additional product gets added to collection after query formed for **Deferred execution**. This code snippet below shows that we are doing same thing except converting result to TOLIST along with query. [![Immediate execution in action](http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-immediate-query-300x169.png)](http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-immediate-query.png) Code snippet showing additional product gets added to collection after query formed in **Immediate execution**. Now let’s compare both results after running the console application. Milk product added later is shown in deferred execution only. This is shown as yellow lines in screen shot.[![](http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot-collection-300x154.png)](http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot-collection.png).\n **Deferred execution shows that even if collection changes, looping always result in fresh data**.\n\n### Is ToList() only way to force immediate execution?\n\nNo, it’s one of many methods that forces immediate execution. Here is the extract from MSDN on Immediate query execution\n\n> In contrast to the **deferred execution** of queries that produce a sequence of values, queries that return a singleton value are executed immediately. Some examples of singleton queries are _Average_, _Count_, _First_, and _Max_. These execute immediately because the query must produce a sequence to calculate the singleton result. You can also force immediate execution. This is useful when you want to cache the results of a query. To force immediate execution of a query that does not produce a singleton value, you can call the _ToList_ method, the _ToDictionary_ method, or the _ToArray_ method on a query or query variable.\n\nDebugging LINQ query to show deferred & Immediate execution\n-----------------------------------------------------------\n\nLet’s use the above queries to debug console application. This is animated GIF to show debugging process.[![Debugging LINQ](http://www.mithunvp.com/wp-content/uploads/2013/11/debug-linq-csharp-300x195.gif)](http://www.mithunvp.com/wp-content/uploads/2013/11/debug-linq-csharp.gif) Animated gif file to show debugging steps of LINQ query. Let me summaries what is happening while debugging At first break point\n\n*   Deferred query is formed; it’s not executed as we can see that it only shows _WhereSelectListIterator_.\n*   With help of F11 key, am “Step Into” debugging; at first for each loop, the execution pointer going to where condition in query “_where d.InStock == true_”.\n*   It does same looping, checking where condition for all items in product list and keeps them displaying on the console.\n\nAt second break point\n\n*   Immediate query is formed with ToLIST(), it immediate shows count as 5 before looping into for each loop.\n*   Even when it’s iterating through for each loop, execution pointer never goes to where condition in query. It just prints out selected product on console.\n\nIn C#, the deferred execution is supported by directly using the **yield keyword** within the related iterator block. Below Table lists the iterators in C# that use the yield keyword to ensure the deferred execution. ","source":"_posts/three-examples-deferred-immediate-executions-linq-csharp.md","raw":"---\ntitle: 'THREE examples of Deferred vs. Immediate execution in LINQ using C#'\ntags:\n  - 'C#'\nurl: 144.html\nid: 144\ncategories:\n  - .NET\ndate: 2013-11-23 01:35:17\n---\n\nIn DOT NET world we have **Language-Integrated Query (LINQ)** – it extends powerful query capabilities to the language syntax of C# and Visual Basic. LINQ provider assemblies enable the use of LINQ with .NET Framework collections, SQL Server databases, ADO.NET Datasets, and XML documents. They are part of .NET framework 3.5 and above. Now let’s see three ways to understand what exactly is this deferred and immediate execution all about in LINQ using C#.\n\nDateTime to verify deferred execution of LINQ query\n---------------------------------------------------\n\n*   Create  console application with name “_LinqSample_”\n*   Create Product class with _ID, Name, InStock_ members in it.\n*   Create collection of products, LINQ Query and iterate through it to display time.\n\n[![Creating PRODUCT class and it's sample collection](http://www.mithunvp.com/wp-content/uploads/2013/11/product-class-collection-300x65.png \"Creating PRODUCT class and it's sample collection\")](http://www.mithunvp.com/wp-content/uploads/2013/11/product-class-collection.png)\n\n*   Now we will be creating two simple LINQ queries which will act as deferred and immediate query\n\n[![Queries to use for deferred and Immediate execution](http://www.mithunvp.com/wp-content/uploads/2013/11/deferred-Immediate-300x171.png)](http://www.mithunvp.com/wp-content/uploads/2013/11/deferred-Immediate.png) We have created list of products, written query for deferred and immediate execution, now let’s loop through them in 3 different foreach loops to check difference in time they are executed. The yellow lines indicate that once the immediate query gets executed, any subsequent looping will fetch same copy. While deferred execution gets executed for every loop showing different time stamp.[![Console output showing time stamp for Deferred & Immediate query execution](http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot-300x177.png)](http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot.png)\n\nCollection Items update to show deferred execution & Immediate execution\n------------------------------------------------------------------------\n\nAdding the items to collection in execution and looping them again is also easiest way to check when LINQ query executed. We have to write a query which gets only In Stock products, loop through that query, add one more item to collection and loop through again. Below code snippet image clearly shows this. [![Deferred execution in action](http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-deferred-query-300x181.png \"codesnippet-deferred-query\")](http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-deferred-query.png) Code snippet showing additional product gets added to collection after query formed for **Deferred execution**. This code snippet below shows that we are doing same thing except converting result to TOLIST along with query. [![Immediate execution in action](http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-immediate-query-300x169.png)](http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-immediate-query.png) Code snippet showing additional product gets added to collection after query formed in **Immediate execution**. Now let’s compare both results after running the console application. Milk product added later is shown in deferred execution only. This is shown as yellow lines in screen shot.[![](http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot-collection-300x154.png)](http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot-collection.png).\n **Deferred execution shows that even if collection changes, looping always result in fresh data**.\n\n### Is ToList() only way to force immediate execution?\n\nNo, it’s one of many methods that forces immediate execution. Here is the extract from MSDN on Immediate query execution\n\n> In contrast to the **deferred execution** of queries that produce a sequence of values, queries that return a singleton value are executed immediately. Some examples of singleton queries are _Average_, _Count_, _First_, and _Max_. These execute immediately because the query must produce a sequence to calculate the singleton result. You can also force immediate execution. This is useful when you want to cache the results of a query. To force immediate execution of a query that does not produce a singleton value, you can call the _ToList_ method, the _ToDictionary_ method, or the _ToArray_ method on a query or query variable.\n\nDebugging LINQ query to show deferred & Immediate execution\n-----------------------------------------------------------\n\nLet’s use the above queries to debug console application. This is animated GIF to show debugging process.[![Debugging LINQ](http://www.mithunvp.com/wp-content/uploads/2013/11/debug-linq-csharp-300x195.gif)](http://www.mithunvp.com/wp-content/uploads/2013/11/debug-linq-csharp.gif) Animated gif file to show debugging steps of LINQ query. Let me summaries what is happening while debugging At first break point\n\n*   Deferred query is formed; it’s not executed as we can see that it only shows _WhereSelectListIterator_.\n*   With help of F11 key, am “Step Into” debugging; at first for each loop, the execution pointer going to where condition in query “_where d.InStock == true_”.\n*   It does same looping, checking where condition for all items in product list and keeps them displaying on the console.\n\nAt second break point\n\n*   Immediate query is formed with ToLIST(), it immediate shows count as 5 before looping into for each loop.\n*   Even when it’s iterating through for each loop, execution pointer never goes to where condition in query. It just prints out selected product on console.\n\nIn C#, the deferred execution is supported by directly using the **yield keyword** within the related iterator block. Below Table lists the iterators in C# that use the yield keyword to ensure the deferred execution. ","slug":"three-examples-deferred-immediate-executions-linq-csharp","published":1,"updated":"2018-07-26T18:13:43.423Z","_id":"cjjt034x2001ks4tjt12f9mds","comments":1,"layout":"post","photos":[],"link":"","content":"<p>In DOT NET world we have <strong>Language-Integrated Query (LINQ)</strong> – it extends powerful query capabilities to the language syntax of C# and Visual Basic. LINQ provider assemblies enable the use of LINQ with .NET Framework collections, SQL Server databases, ADO.NET Datasets, and XML documents. They are part of .NET framework 3.5 and above. Now let’s see three ways to understand what exactly is this deferred and immediate execution all about in LINQ using C#.</p>\n<h2 id=\"DateTime-to-verify-deferred-execution-of-LINQ-query\"><a href=\"#DateTime-to-verify-deferred-execution-of-LINQ-query\" class=\"headerlink\" title=\"DateTime to verify deferred execution of LINQ query\"></a>DateTime to verify deferred execution of LINQ query</h2><ul>\n<li>Create  console application with name “<em>LinqSample</em>”</li>\n<li>Create Product class with <em>ID, Name, InStock</em> members in it.</li>\n<li>Create collection of products, LINQ Query and iterate through it to display time.</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/product-class-collection.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/product-class-collection-300x65.png\" alt=\"Creating PRODUCT class and it&#39;s sample collection\" title=\"Creating PRODUCT class and it&#39;s sample collection\"></a></p>\n<ul>\n<li>Now we will be creating two simple LINQ queries which will act as deferred and immediate query</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/deferred-Immediate.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/deferred-Immediate-300x171.png\" alt=\"Queries to use for deferred and Immediate execution\"></a> We have created list of products, written query for deferred and immediate execution, now let’s loop through them in 3 different foreach loops to check difference in time they are executed. The yellow lines indicate that once the immediate query gets executed, any subsequent looping will fetch same copy. While deferred execution gets executed for every loop showing different time stamp.<a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot-300x177.png\" alt=\"Console output showing time stamp for Deferred &amp; Immediate query execution\"></a></p>\n<h2 id=\"Collection-Items-update-to-show-deferred-execution-amp-Immediate-execution\"><a href=\"#Collection-Items-update-to-show-deferred-execution-amp-Immediate-execution\" class=\"headerlink\" title=\"Collection Items update to show deferred execution &amp; Immediate execution\"></a>Collection Items update to show deferred execution &amp; Immediate execution</h2><p>Adding the items to collection in execution and looping them again is also easiest way to check when LINQ query executed. We have to write a query which gets only In Stock products, loop through that query, add one more item to collection and loop through again. Below code snippet image clearly shows this. <a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-deferred-query.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-deferred-query-300x181.png\" alt=\"Deferred execution in action\" title=\"codesnippet-deferred-query\"></a> Code snippet showing additional product gets added to collection after query formed for <strong>Deferred execution</strong>. This code snippet below shows that we are doing same thing except converting result to TOLIST along with query. <a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-immediate-query.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-immediate-query-300x169.png\" alt=\"Immediate execution in action\"></a> Code snippet showing additional product gets added to collection after query formed in <strong>Immediate execution</strong>. Now let’s compare both results after running the console application. Milk product added later is shown in deferred execution only. This is shown as yellow lines in screen shot.<a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot-collection.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot-collection-300x154.png\" alt=\"\"></a>.<br> <strong>Deferred execution shows that even if collection changes, looping always result in fresh data</strong>.</p>\n<h3 id=\"Is-ToList-only-way-to-force-immediate-execution\"><a href=\"#Is-ToList-only-way-to-force-immediate-execution\" class=\"headerlink\" title=\"Is ToList() only way to force immediate execution?\"></a>Is ToList() only way to force immediate execution?</h3><p>No, it’s one of many methods that forces immediate execution. Here is the extract from MSDN on Immediate query execution</p>\n<blockquote>\n<p>In contrast to the <strong>deferred execution</strong> of queries that produce a sequence of values, queries that return a singleton value are executed immediately. Some examples of singleton queries are <em>Average</em>, <em>Count</em>, <em>First</em>, and <em>Max</em>. These execute immediately because the query must produce a sequence to calculate the singleton result. You can also force immediate execution. This is useful when you want to cache the results of a query. To force immediate execution of a query that does not produce a singleton value, you can call the <em>ToList</em> method, the <em>ToDictionary</em> method, or the <em>ToArray</em> method on a query or query variable.</p>\n</blockquote>\n<h2 id=\"Debugging-LINQ-query-to-show-deferred-amp-Immediate-execution\"><a href=\"#Debugging-LINQ-query-to-show-deferred-amp-Immediate-execution\" class=\"headerlink\" title=\"Debugging LINQ query to show deferred &amp; Immediate execution\"></a>Debugging LINQ query to show deferred &amp; Immediate execution</h2><p>Let’s use the above queries to debug console application. This is animated GIF to show debugging process.<a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/debug-linq-csharp.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/debug-linq-csharp-300x195.gif\" alt=\"Debugging LINQ\"></a> Animated gif file to show debugging steps of LINQ query. Let me summaries what is happening while debugging At first break point</p>\n<ul>\n<li>Deferred query is formed; it’s not executed as we can see that it only shows <em>WhereSelectListIterator</em>.</li>\n<li>With help of F11 key, am “Step Into” debugging; at first for each loop, the execution pointer going to where condition in query “<em>where d.InStock == true</em>”.</li>\n<li>It does same looping, checking where condition for all items in product list and keeps them displaying on the console.</li>\n</ul>\n<p>At second break point</p>\n<ul>\n<li>Immediate query is formed with ToLIST(), it immediate shows count as 5 before looping into for each loop.</li>\n<li>Even when it’s iterating through for each loop, execution pointer never goes to where condition in query. It just prints out selected product on console.</li>\n</ul>\n<p>In C#, the deferred execution is supported by directly using the <strong>yield keyword</strong> within the related iterator block. Below Table lists the iterators in C# that use the yield keyword to ensure the deferred execution. </p>\n","site":{"data":{}},"excerpt":"","more":"<p>In DOT NET world we have <strong>Language-Integrated Query (LINQ)</strong> – it extends powerful query capabilities to the language syntax of C# and Visual Basic. LINQ provider assemblies enable the use of LINQ with .NET Framework collections, SQL Server databases, ADO.NET Datasets, and XML documents. They are part of .NET framework 3.5 and above. Now let’s see three ways to understand what exactly is this deferred and immediate execution all about in LINQ using C#.</p>\n<h2 id=\"DateTime-to-verify-deferred-execution-of-LINQ-query\"><a href=\"#DateTime-to-verify-deferred-execution-of-LINQ-query\" class=\"headerlink\" title=\"DateTime to verify deferred execution of LINQ query\"></a>DateTime to verify deferred execution of LINQ query</h2><ul>\n<li>Create  console application with name “<em>LinqSample</em>”</li>\n<li>Create Product class with <em>ID, Name, InStock</em> members in it.</li>\n<li>Create collection of products, LINQ Query and iterate through it to display time.</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/product-class-collection.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/product-class-collection-300x65.png\" alt=\"Creating PRODUCT class and it&#39;s sample collection\" title=\"Creating PRODUCT class and it&#39;s sample collection\"></a></p>\n<ul>\n<li>Now we will be creating two simple LINQ queries which will act as deferred and immediate query</li>\n</ul>\n<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/deferred-Immediate.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/deferred-Immediate-300x171.png\" alt=\"Queries to use for deferred and Immediate execution\"></a> We have created list of products, written query for deferred and immediate execution, now let’s loop through them in 3 different foreach loops to check difference in time they are executed. The yellow lines indicate that once the immediate query gets executed, any subsequent looping will fetch same copy. While deferred execution gets executed for every loop showing different time stamp.<a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot-300x177.png\" alt=\"Console output showing time stamp for Deferred &amp; Immediate query execution\"></a></p>\n<h2 id=\"Collection-Items-update-to-show-deferred-execution-amp-Immediate-execution\"><a href=\"#Collection-Items-update-to-show-deferred-execution-amp-Immediate-execution\" class=\"headerlink\" title=\"Collection Items update to show deferred execution &amp; Immediate execution\"></a>Collection Items update to show deferred execution &amp; Immediate execution</h2><p>Adding the items to collection in execution and looping them again is also easiest way to check when LINQ query executed. We have to write a query which gets only In Stock products, loop through that query, add one more item to collection and loop through again. Below code snippet image clearly shows this. <a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-deferred-query.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-deferred-query-300x181.png\" alt=\"Deferred execution in action\" title=\"codesnippet-deferred-query\"></a> Code snippet showing additional product gets added to collection after query formed for <strong>Deferred execution</strong>. This code snippet below shows that we are doing same thing except converting result to TOLIST along with query. <a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-immediate-query.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/codesnippet-immediate-query-300x169.png\" alt=\"Immediate execution in action\"></a> Code snippet showing additional product gets added to collection after query formed in <strong>Immediate execution</strong>. Now let’s compare both results after running the console application. Milk product added later is shown in deferred execution only. This is shown as yellow lines in screen shot.<a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot-collection.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/compare-screenshot-collection-300x154.png\" alt=\"\"></a>.<br> <strong>Deferred execution shows that even if collection changes, looping always result in fresh data</strong>.</p>\n<h3 id=\"Is-ToList-only-way-to-force-immediate-execution\"><a href=\"#Is-ToList-only-way-to-force-immediate-execution\" class=\"headerlink\" title=\"Is ToList() only way to force immediate execution?\"></a>Is ToList() only way to force immediate execution?</h3><p>No, it’s one of many methods that forces immediate execution. Here is the extract from MSDN on Immediate query execution</p>\n<blockquote>\n<p>In contrast to the <strong>deferred execution</strong> of queries that produce a sequence of values, queries that return a singleton value are executed immediately. Some examples of singleton queries are <em>Average</em>, <em>Count</em>, <em>First</em>, and <em>Max</em>. These execute immediately because the query must produce a sequence to calculate the singleton result. You can also force immediate execution. This is useful when you want to cache the results of a query. To force immediate execution of a query that does not produce a singleton value, you can call the <em>ToList</em> method, the <em>ToDictionary</em> method, or the <em>ToArray</em> method on a query or query variable.</p>\n</blockquote>\n<h2 id=\"Debugging-LINQ-query-to-show-deferred-amp-Immediate-execution\"><a href=\"#Debugging-LINQ-query-to-show-deferred-amp-Immediate-execution\" class=\"headerlink\" title=\"Debugging LINQ query to show deferred &amp; Immediate execution\"></a>Debugging LINQ query to show deferred &amp; Immediate execution</h2><p>Let’s use the above queries to debug console application. This is animated GIF to show debugging process.<a href=\"http://www.mithunvp.com/wp-content/uploads/2013/11/debug-linq-csharp.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2013/11/debug-linq-csharp-300x195.gif\" alt=\"Debugging LINQ\"></a> Animated gif file to show debugging steps of LINQ query. Let me summaries what is happening while debugging At first break point</p>\n<ul>\n<li>Deferred query is formed; it’s not executed as we can see that it only shows <em>WhereSelectListIterator</em>.</li>\n<li>With help of F11 key, am “Step Into” debugging; at first for each loop, the execution pointer going to where condition in query “<em>where d.InStock == true</em>”.</li>\n<li>It does same looping, checking where condition for all items in product list and keeps them displaying on the console.</li>\n</ul>\n<p>At second break point</p>\n<ul>\n<li>Immediate query is formed with ToLIST(), it immediate shows count as 5 before looping into for each loop.</li>\n<li>Even when it’s iterating through for each loop, execution pointer never goes to where condition in query. It just prints out selected product on console.</li>\n</ul>\n<p>In C#, the deferred execution is supported by directly using the <strong>yield keyword</strong> within the related iterator block. Below Table lists the iterators in C# that use the yield keyword to ensure the deferred execution. </p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Jul 26 2018 23:43:43 GMT+0530 (India Standard Time)","title":"THREE examples of Deferred vs. Immediate execution in LINQ using C#","path":"three-examples-deferred-immediate-executions-linq-csharp/","eyeCatchImage":null,"excerpt":null,"date":"2013-11-22T20:05:17.000Z","pv":0,"totalPV":0,"categories":".NET","tags":["C#"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Getting Started with TypeScript in ASP.NET Core using Visual Studio","url":"275.html","id":"275","date":"2015-11-29T09:04:20.000Z","_content":"\nThis tutorial helps get started with TypeScript in ASP.NET Core using Visual Studio 2017 v15.3.  We will focus on creating famous \"Hello World\" example.\n\nStep 1: Creating an empty ASP.NET Core project\n----------------------------------------------\n\nOpen Visual Studio 2017, Select New Web Project naming it \"ASPNETCoreTypeScript\"  and select \"Empty\" project template\n\n> TypeScript can be used with any Web technologies like ASP.NET MVC, any SPA framework or just plain HTML web site.\n\nStep 2: Configure ASP.NET Core to serve Static Files\n----------------------------------------------------\n\nASP.NET Core is designed as a pluggable framework to add only necessary files, instead of including too many initial stuff. Lets create HTML file named \"_index.html_\" under **wwwroot** folder. Right click on the **wwwroot** folder, Add New Item and create an index.html file.  This HTML page will act as a default page.\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>ASP.NET Core TypeScript</title>\n</head>\n<body>\n    <h3>Learning TypeScript using ASP.NET Core</h3>\n</body>\n</html>\n\nFor ASP.NET Core to serve static files, we need to add **StaticFiles** middleware in _Configure_ method of **Startup** class.\n\npublic void Configure(IApplicationBuilder app)\n        {            \n            app.UseDefaultFiles();\n            app.UseStaticFiles();\n        }\n\nRun the application now, ASP.NET Core renders static HTML page \\[caption id=\"attachment_287\" align=\"aligncenter\" width=\"570\"\\][![TypeScript in asp.net core](http://www.mithunvp.com/wp-content/uploads/2015/11/fourth.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/11/fourth.jpg) ASP.NET Core renders HTML page (Old image)\\[/caption\\]\n\nStep 3: What is TypeScript?\n---------------------------\n\nTypeScript is a typed superset of JavaScript that compiles to plain JavaScript.\n\n> Any TypeScript code that runs in browser is plain JavaScript so its \"Any browser. Any host. Any OS.\"\n\n  \\[caption id=\"attachment_288\" align=\"aligncenter\" width=\"300\"\\][![TypeScript in asp.net core](http://www.mithunvp.com/wp-content/uploads/2015/11/five-300x281.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/11/five.jpg) Components of TypeScript\\[/caption\\] **The language** consists of the new syntax, keywords, and type annotations. As a programmer, the language will be the component you will become most familiar with. Understanding how to supply type information is an important foundation for the other components because the compiler and language service are most effective when they understand the complex structures you use within your program. **The Compiler** performs the type erasure and code transformations that convert your TypeScript code into JavaScript. It will emit warnings and errors if it detects problems and can perform additional tasks such as combining the output into a single file, generating source maps, and more. **The Language Service** provides type information that can be used by development tools to supply intellisense, type hinting, re-factoring options, and other creative features based on the type information that has been gathered from the written program.\n\nStep 4: Adding TypeScript in ASP.NET Core\n-----------------------------------------\n\nFirstly created \"**Scripts**\" folder by right click project \"AspNetCoreTypescript\". Here in this folder, we will add TypeScript Configuration file to use various settings of typescript. Right Click on \"Scripts\" folder, Add new file by selecting from template **TypeScript JSON Configuration File** as shown below \\[caption id=\"attachment_292\" align=\"aligncenter\" width=\"964\"\\][![TypeScript in asp.net core](http://www.mithunvp.com/wp-content/uploads/2015/11/six.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/11/six.jpg) Select TypeScript Configuration File\\[/caption\\] The reason to add this file in \"Scripts\" folder is that \"Scripts folder will now act as VIRTUAL TYPESCRIPT project\" and whenever we write any Typescript code in  \"Scripts\" it will be automatically TRANSPILE'D to JavaScript. Add TypeScript file called \"app.ts\" from Add New File options on \"Scripts\" folder.\n\nStep 5: Output Directory for Compiled TypeScript files to wwwroot\n-----------------------------------------------------------------\n\nIn beginning, I mentioned that \"TypeScript compiles to plain JavaScript that runs in a browser\". The obvious question is where will compiled plain JavaScript will be placed? As we are using ASP.NET Core, we have \"**wwwroot**\" which will serve assets directly to clients, including HTML files, CSS files, image files, and JavaScript files. The _**wwwroot**_ folder is the root of your web site. Now lets open \"**tsconfig.json**\", we need to add configuration entry as \"**outDir**\" i.e. Output Directory so that compiled TypeScript files are copied there.\n\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": false,\n    \"noEmitOnError\": true,\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"es5\", \n    \"outDir\": \"../wwwroot/scripts\" \n  }\n}\n\nJust compile once to see that **app.ts** is compiled to **app.js** under **wwwroot** folder along with its mapping. \\[caption id=\"attachment_293\" align=\"aligncenter\" width=\"477\"\\][![TypeScript in asp.net core](http://www.mithunvp.com/wp-content/uploads/2015/11/seven.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/11/seven.jpg) Compiled TypeScript to JavaScript (Old image)\\[/caption\\]\n\nStep 6: Writing TypeScript code in app.ts\n-----------------------------------------\n\nIt's time to write code in **app.ts** file. Below code is a mix of TypeScript Code and usual plain JavaScript code. This shows that \"**Any JavaScript code is valid TypeScript Code**\"\n\n//Person is now string\nfunction Welcome(person: string) {\n    return \"Hello, \" + person;\n}\n\nfunction ClickMeButton() {\n    var user = \"Mithun Pattankar\";\n    document.getElementById(\"divMsg\").innerHTML = Welcome(user);\n}\n\nOpen index.html and copy this code. It has reference to **app.js** in HEAD section, it signifies that **wwwroot** acts as root folder of our ASP.NET Core\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>ASP.NET 5 TypeScript</title>\n    <!\\-\\- app.js is loaded from wwwroot folder -->\n    <script src=\"scripts/app.js\"></script>\n</head>\n<body>\n    <h3>Learning TypeScript using ASP.NET 5</h3>\n    <input type=\"button\" style=\"width:70px;\" value=\"Click Me\" onclick=\"ClickMeButton()\"/>\n    <div id=\"divMsg\"></div>\n</body>\n</html>\n\nRun the application, Click the \"Click Me\" button to see a welcome message. \\[caption id=\"attachment_294\" align=\"aligncenter\" width=\"621\"\\][![TypeScript in asp.net core](http://www.mithunvp.com/wp-content/uploads/2015/11/eight.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/11/eight.jpg) Running TypeScript code in ASP.NET Core\\[/caption\\]\n\nStep 7: What is so special here? Build errors in TypeScript code\n----------------------------------------------------------------\n\nTypeScript is special because it can do Type checking when doing a build. Function \"**Welcome**\" takes a string as a parameter. What if I make it as a number and check? \\[caption id=\"attachment_295\" align=\"aligncenter\" width=\"1024\"\\][![TypeScript in asp.net core](http://www.mithunvp.com/wp-content/uploads/2015/11/nine-1024x468.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/11/nine.jpg) Build errors in TypeScript Code\\[/caption\\] Let's see what is happening here.\n\n1.  Function \"Welcome\" takes parameter \"Person\" as number making it strongly typed.\n2.  Passing variable  \"user\" containing a string. It's obvious that NUMBER isn't STRING\n3.  Build errors clearly stating that its assignment error.\n\nThis is one of features TypeScript provides, making it special.","source":"_posts/typescript-in-asp-net-5-using-visual-studio-2015.md","raw":"---\ntitle: Getting Started with TypeScript in ASP.NET Core using Visual Studio\ntags:\n  - ASP.NET Core 2\n  - TypeScript\nurl: 275.html\nid: 275\ncategories:\n  - ASP.NET Core 2\n  - TypeScript\ndate: 2015-11-29 14:34:20\n---\n\nThis tutorial helps get started with TypeScript in ASP.NET Core using Visual Studio 2017 v15.3.  We will focus on creating famous \"Hello World\" example.\n\nStep 1: Creating an empty ASP.NET Core project\n----------------------------------------------\n\nOpen Visual Studio 2017, Select New Web Project naming it \"ASPNETCoreTypeScript\"  and select \"Empty\" project template\n\n> TypeScript can be used with any Web technologies like ASP.NET MVC, any SPA framework or just plain HTML web site.\n\nStep 2: Configure ASP.NET Core to serve Static Files\n----------------------------------------------------\n\nASP.NET Core is designed as a pluggable framework to add only necessary files, instead of including too many initial stuff. Lets create HTML file named \"_index.html_\" under **wwwroot** folder. Right click on the **wwwroot** folder, Add New Item and create an index.html file.  This HTML page will act as a default page.\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>ASP.NET Core TypeScript</title>\n</head>\n<body>\n    <h3>Learning TypeScript using ASP.NET Core</h3>\n</body>\n</html>\n\nFor ASP.NET Core to serve static files, we need to add **StaticFiles** middleware in _Configure_ method of **Startup** class.\n\npublic void Configure(IApplicationBuilder app)\n        {            \n            app.UseDefaultFiles();\n            app.UseStaticFiles();\n        }\n\nRun the application now, ASP.NET Core renders static HTML page \\[caption id=\"attachment_287\" align=\"aligncenter\" width=\"570\"\\][![TypeScript in asp.net core](http://www.mithunvp.com/wp-content/uploads/2015/11/fourth.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/11/fourth.jpg) ASP.NET Core renders HTML page (Old image)\\[/caption\\]\n\nStep 3: What is TypeScript?\n---------------------------\n\nTypeScript is a typed superset of JavaScript that compiles to plain JavaScript.\n\n> Any TypeScript code that runs in browser is plain JavaScript so its \"Any browser. Any host. Any OS.\"\n\n  \\[caption id=\"attachment_288\" align=\"aligncenter\" width=\"300\"\\][![TypeScript in asp.net core](http://www.mithunvp.com/wp-content/uploads/2015/11/five-300x281.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/11/five.jpg) Components of TypeScript\\[/caption\\] **The language** consists of the new syntax, keywords, and type annotations. As a programmer, the language will be the component you will become most familiar with. Understanding how to supply type information is an important foundation for the other components because the compiler and language service are most effective when they understand the complex structures you use within your program. **The Compiler** performs the type erasure and code transformations that convert your TypeScript code into JavaScript. It will emit warnings and errors if it detects problems and can perform additional tasks such as combining the output into a single file, generating source maps, and more. **The Language Service** provides type information that can be used by development tools to supply intellisense, type hinting, re-factoring options, and other creative features based on the type information that has been gathered from the written program.\n\nStep 4: Adding TypeScript in ASP.NET Core\n-----------------------------------------\n\nFirstly created \"**Scripts**\" folder by right click project \"AspNetCoreTypescript\". Here in this folder, we will add TypeScript Configuration file to use various settings of typescript. Right Click on \"Scripts\" folder, Add new file by selecting from template **TypeScript JSON Configuration File** as shown below \\[caption id=\"attachment_292\" align=\"aligncenter\" width=\"964\"\\][![TypeScript in asp.net core](http://www.mithunvp.com/wp-content/uploads/2015/11/six.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/11/six.jpg) Select TypeScript Configuration File\\[/caption\\] The reason to add this file in \"Scripts\" folder is that \"Scripts folder will now act as VIRTUAL TYPESCRIPT project\" and whenever we write any Typescript code in  \"Scripts\" it will be automatically TRANSPILE'D to JavaScript. Add TypeScript file called \"app.ts\" from Add New File options on \"Scripts\" folder.\n\nStep 5: Output Directory for Compiled TypeScript files to wwwroot\n-----------------------------------------------------------------\n\nIn beginning, I mentioned that \"TypeScript compiles to plain JavaScript that runs in a browser\". The obvious question is where will compiled plain JavaScript will be placed? As we are using ASP.NET Core, we have \"**wwwroot**\" which will serve assets directly to clients, including HTML files, CSS files, image files, and JavaScript files. The _**wwwroot**_ folder is the root of your web site. Now lets open \"**tsconfig.json**\", we need to add configuration entry as \"**outDir**\" i.e. Output Directory so that compiled TypeScript files are copied there.\n\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": false,\n    \"noEmitOnError\": true,\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"es5\", \n    \"outDir\": \"../wwwroot/scripts\" \n  }\n}\n\nJust compile once to see that **app.ts** is compiled to **app.js** under **wwwroot** folder along with its mapping. \\[caption id=\"attachment_293\" align=\"aligncenter\" width=\"477\"\\][![TypeScript in asp.net core](http://www.mithunvp.com/wp-content/uploads/2015/11/seven.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/11/seven.jpg) Compiled TypeScript to JavaScript (Old image)\\[/caption\\]\n\nStep 6: Writing TypeScript code in app.ts\n-----------------------------------------\n\nIt's time to write code in **app.ts** file. Below code is a mix of TypeScript Code and usual plain JavaScript code. This shows that \"**Any JavaScript code is valid TypeScript Code**\"\n\n//Person is now string\nfunction Welcome(person: string) {\n    return \"Hello, \" + person;\n}\n\nfunction ClickMeButton() {\n    var user = \"Mithun Pattankar\";\n    document.getElementById(\"divMsg\").innerHTML = Welcome(user);\n}\n\nOpen index.html and copy this code. It has reference to **app.js** in HEAD section, it signifies that **wwwroot** acts as root folder of our ASP.NET Core\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>ASP.NET 5 TypeScript</title>\n    <!\\-\\- app.js is loaded from wwwroot folder -->\n    <script src=\"scripts/app.js\"></script>\n</head>\n<body>\n    <h3>Learning TypeScript using ASP.NET 5</h3>\n    <input type=\"button\" style=\"width:70px;\" value=\"Click Me\" onclick=\"ClickMeButton()\"/>\n    <div id=\"divMsg\"></div>\n</body>\n</html>\n\nRun the application, Click the \"Click Me\" button to see a welcome message. \\[caption id=\"attachment_294\" align=\"aligncenter\" width=\"621\"\\][![TypeScript in asp.net core](http://www.mithunvp.com/wp-content/uploads/2015/11/eight.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/11/eight.jpg) Running TypeScript code in ASP.NET Core\\[/caption\\]\n\nStep 7: What is so special here? Build errors in TypeScript code\n----------------------------------------------------------------\n\nTypeScript is special because it can do Type checking when doing a build. Function \"**Welcome**\" takes a string as a parameter. What if I make it as a number and check? \\[caption id=\"attachment_295\" align=\"aligncenter\" width=\"1024\"\\][![TypeScript in asp.net core](http://www.mithunvp.com/wp-content/uploads/2015/11/nine-1024x468.jpg)](http://www.mithunvp.com/wp-content/uploads/2015/11/nine.jpg) Build errors in TypeScript Code\\[/caption\\] Let's see what is happening here.\n\n1.  Function \"Welcome\" takes parameter \"Person\" as number making it strongly typed.\n2.  Passing variable  \"user\" containing a string. It's obvious that NUMBER isn't STRING\n3.  Build errors clearly stating that its assignment error.\n\nThis is one of features TypeScript provides, making it special.","slug":"typescript-in-asp-net-5-using-visual-studio-2015","published":1,"updated":"2018-07-10T19:49:06.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034x5001ms4tjvusuji96","content":"<p>This tutorial helps get started with TypeScript in ASP.NET Core using Visual Studio 2017 v15.3.  We will focus on creating famous “Hello World” example.</p>\n<h2 id=\"Step-1-Creating-an-empty-ASP-NET-Core-project\"><a href=\"#Step-1-Creating-an-empty-ASP-NET-Core-project\" class=\"headerlink\" title=\"Step 1: Creating an empty ASP.NET Core project\"></a>Step 1: Creating an empty ASP.NET Core project</h2><p>Open Visual Studio 2017, Select New Web Project naming it “ASPNETCoreTypeScript”  and select “Empty” project template</p>\n<blockquote>\n<p>TypeScript can be used with any Web technologies like ASP.NET MVC, any SPA framework or just plain HTML web site.</p>\n</blockquote>\n<h2 id=\"Step-2-Configure-ASP-NET-Core-to-serve-Static-Files\"><a href=\"#Step-2-Configure-ASP-NET-Core-to-serve-Static-Files\" class=\"headerlink\" title=\"Step 2: Configure ASP.NET Core to serve Static Files\"></a>Step 2: Configure ASP.NET Core to serve Static Files</h2><p>ASP.NET Core is designed as a pluggable framework to add only necessary files, instead of including too many initial stuff. Lets create HTML file named “<em>index.html</em>“ under <strong>wwwroot</strong> folder. Right click on the <strong>wwwroot</strong> folder, Add New Item and create an index.html file.  This HTML page will act as a default page.</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<html><br><head><br>    <meta charset=\"utf-8\"><br>    <title>ASP.NET Core TypeScript</title><br></head><br><body><br>    <h3>Learning TypeScript using ASP.NET Core</h3><br></body><br></html>\n\n<p>For ASP.NET Core to serve static files, we need to add <strong>StaticFiles</strong> middleware in <em>Configure</em> method of <strong>Startup</strong> class.</p>\n<p>public void Configure(IApplicationBuilder app)<br>        {<br>            app.UseDefaultFiles();<br>            app.UseStaticFiles();<br>        }</p>\n<p>Run the application now, ASP.NET Core renders static HTML page [caption id=”attachment_287” align=”aligncenter” width=”570”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/11/fourth.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/11/fourth.jpg\" alt=\"TypeScript in asp.net core\"></a> ASP.NET Core renders HTML page (Old image)[/caption]</p>\n<h2 id=\"Step-3-What-is-TypeScript\"><a href=\"#Step-3-What-is-TypeScript\" class=\"headerlink\" title=\"Step 3: What is TypeScript?\"></a>Step 3: What is TypeScript?</h2><p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.</p>\n<blockquote>\n<p>Any TypeScript code that runs in browser is plain JavaScript so its “Any browser. Any host. Any OS.”</p>\n</blockquote>\n<p>  [caption id=”attachment_288” align=”aligncenter” width=”300”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/11/five.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/11/five-300x281.jpg\" alt=\"TypeScript in asp.net core\"></a> Components of TypeScript[/caption] <strong>The language</strong> consists of the new syntax, keywords, and type annotations. As a programmer, the language will be the component you will become most familiar with. Understanding how to supply type information is an important foundation for the other components because the compiler and language service are most effective when they understand the complex structures you use within your program. <strong>The Compiler</strong> performs the type erasure and code transformations that convert your TypeScript code into JavaScript. It will emit warnings and errors if it detects problems and can perform additional tasks such as combining the output into a single file, generating source maps, and more. <strong>The Language Service</strong> provides type information that can be used by development tools to supply intellisense, type hinting, re-factoring options, and other creative features based on the type information that has been gathered from the written program.</p>\n<h2 id=\"Step-4-Adding-TypeScript-in-ASP-NET-Core\"><a href=\"#Step-4-Adding-TypeScript-in-ASP-NET-Core\" class=\"headerlink\" title=\"Step 4: Adding TypeScript in ASP.NET Core\"></a>Step 4: Adding TypeScript in ASP.NET Core</h2><p>Firstly created “<strong>Scripts</strong>“ folder by right click project “AspNetCoreTypescript”. Here in this folder, we will add TypeScript Configuration file to use various settings of typescript. Right Click on “Scripts” folder, Add new file by selecting from template <strong>TypeScript JSON Configuration File</strong> as shown below [caption id=”attachment_292” align=”aligncenter” width=”964”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/11/six.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/11/six.jpg\" alt=\"TypeScript in asp.net core\"></a> Select TypeScript Configuration File[/caption] The reason to add this file in “Scripts” folder is that “Scripts folder will now act as VIRTUAL TYPESCRIPT project” and whenever we write any Typescript code in  “Scripts” it will be automatically TRANSPILE’D to JavaScript. Add TypeScript file called “app.ts” from Add New File options on “Scripts” folder.</p>\n<h2 id=\"Step-5-Output-Directory-for-Compiled-TypeScript-files-to-wwwroot\"><a href=\"#Step-5-Output-Directory-for-Compiled-TypeScript-files-to-wwwroot\" class=\"headerlink\" title=\"Step 5: Output Directory for Compiled TypeScript files to wwwroot\"></a>Step 5: Output Directory for Compiled TypeScript files to wwwroot</h2><p>In beginning, I mentioned that “TypeScript compiles to plain JavaScript that runs in a browser”. The obvious question is where will compiled plain JavaScript will be placed? As we are using ASP.NET Core, we have “<strong>wwwroot</strong>“ which will serve assets directly to clients, including HTML files, CSS files, image files, and JavaScript files. The <em><strong>wwwroot</strong></em> folder is the root of your web site. Now lets open “<strong>tsconfig.json</strong>“, we need to add configuration entry as “<strong>outDir</strong>“ i.e. Output Directory so that compiled TypeScript files are copied there.</p>\n<p>{<br>  “compilerOptions”: {<br>    “noImplicitAny”: false,<br>    “noEmitOnError”: true,<br>    “removeComments”: false,<br>    “sourceMap”: true,<br>    “target”: “es5”,<br>    “outDir”: “../wwwroot/scripts”<br>  }<br>}</p>\n<p>Just compile once to see that <strong>app.ts</strong> is compiled to <strong>app.js</strong> under <strong>wwwroot</strong> folder along with its mapping. [caption id=”attachment_293” align=”aligncenter” width=”477”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/11/seven.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/11/seven.jpg\" alt=\"TypeScript in asp.net core\"></a> Compiled TypeScript to JavaScript (Old image)[/caption]</p>\n<h2 id=\"Step-6-Writing-TypeScript-code-in-app-ts\"><a href=\"#Step-6-Writing-TypeScript-code-in-app-ts\" class=\"headerlink\" title=\"Step 6: Writing TypeScript code in app.ts\"></a>Step 6: Writing TypeScript code in app.ts</h2><p>It’s time to write code in <strong>app.ts</strong> file. Below code is a mix of TypeScript Code and usual plain JavaScript code. This shows that “<strong>Any JavaScript code is valid TypeScript Code</strong>“</p>\n<p>//Person is now string<br>function Welcome(person: string) {<br>    return “Hello, “ + person;<br>}</p>\n<p>function ClickMeButton() {<br>    var user = “Mithun Pattankar”;<br>    document.getElementById(“divMsg”).innerHTML = Welcome(user);<br>}</p>\n<p>Open index.html and copy this code. It has reference to <strong>app.js</strong> in HEAD section, it signifies that <strong>wwwroot</strong> acts as root folder of our ASP.NET Core</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<html><br><head><br>    <meta charset=\"utf-8\"><br>    <title>ASP.NET 5 TypeScript</title><br>    &lt;!-- app.js is loaded from wwwroot folder –&gt;<br>    <script src=\"scripts/app.js\"></script><br></head><br><body><br>    <h3>Learning TypeScript using ASP.NET 5</h3><br>    <input type=\"button\" style=\"width:70px;\" value=\"Click Me\" onclick=\"ClickMeButton()\"><br>    <div id=\"divMsg\"></div><br></body><br></html>\n\n<p>Run the application, Click the “Click Me” button to see a welcome message. [caption id=”attachment_294” align=”aligncenter” width=”621”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/11/eight.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/11/eight.jpg\" alt=\"TypeScript in asp.net core\"></a> Running TypeScript code in ASP.NET Core[/caption]</p>\n<h2 id=\"Step-7-What-is-so-special-here-Build-errors-in-TypeScript-code\"><a href=\"#Step-7-What-is-so-special-here-Build-errors-in-TypeScript-code\" class=\"headerlink\" title=\"Step 7: What is so special here? Build errors in TypeScript code\"></a>Step 7: What is so special here? Build errors in TypeScript code</h2><p>TypeScript is special because it can do Type checking when doing a build. Function “<strong>Welcome</strong>“ takes a string as a parameter. What if I make it as a number and check? [caption id=”attachment_295” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/11/nine.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/11/nine-1024x468.jpg\" alt=\"TypeScript in asp.net core\"></a> Build errors in TypeScript Code[/caption] Let’s see what is happening here.</p>\n<ol>\n<li>Function “Welcome” takes parameter “Person” as number making it strongly typed.</li>\n<li>Passing variable  “user” containing a string. It’s obvious that NUMBER isn’t STRING</li>\n<li>Build errors clearly stating that its assignment error.</li>\n</ol>\n<p>This is one of features TypeScript provides, making it special.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This tutorial helps get started with TypeScript in ASP.NET Core using Visual Studio 2017 v15.3.  We will focus on creating famous “Hello World” example.</p>\n<h2 id=\"Step-1-Creating-an-empty-ASP-NET-Core-project\"><a href=\"#Step-1-Creating-an-empty-ASP-NET-Core-project\" class=\"headerlink\" title=\"Step 1: Creating an empty ASP.NET Core project\"></a>Step 1: Creating an empty ASP.NET Core project</h2><p>Open Visual Studio 2017, Select New Web Project naming it “ASPNETCoreTypeScript”  and select “Empty” project template</p>\n<blockquote>\n<p>TypeScript can be used with any Web technologies like ASP.NET MVC, any SPA framework or just plain HTML web site.</p>\n</blockquote>\n<h2 id=\"Step-2-Configure-ASP-NET-Core-to-serve-Static-Files\"><a href=\"#Step-2-Configure-ASP-NET-Core-to-serve-Static-Files\" class=\"headerlink\" title=\"Step 2: Configure ASP.NET Core to serve Static Files\"></a>Step 2: Configure ASP.NET Core to serve Static Files</h2><p>ASP.NET Core is designed as a pluggable framework to add only necessary files, instead of including too many initial stuff. Lets create HTML file named “<em>index.html</em>“ under <strong>wwwroot</strong> folder. Right click on the <strong>wwwroot</strong> folder, Add New Item and create an index.html file.  This HTML page will act as a default page.</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<html><br><head><br>    <meta charset=\"utf-8\"><br>    <title>ASP.NET Core TypeScript</title><br></head><br><body><br>    <h3>Learning TypeScript using ASP.NET Core</h3><br></body><br></html>\n\n<p>For ASP.NET Core to serve static files, we need to add <strong>StaticFiles</strong> middleware in <em>Configure</em> method of <strong>Startup</strong> class.</p>\n<p>public void Configure(IApplicationBuilder app)<br>        {<br>            app.UseDefaultFiles();<br>            app.UseStaticFiles();<br>        }</p>\n<p>Run the application now, ASP.NET Core renders static HTML page [caption id=”attachment_287” align=”aligncenter” width=”570”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/11/fourth.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/11/fourth.jpg\" alt=\"TypeScript in asp.net core\"></a> ASP.NET Core renders HTML page (Old image)[/caption]</p>\n<h2 id=\"Step-3-What-is-TypeScript\"><a href=\"#Step-3-What-is-TypeScript\" class=\"headerlink\" title=\"Step 3: What is TypeScript?\"></a>Step 3: What is TypeScript?</h2><p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.</p>\n<blockquote>\n<p>Any TypeScript code that runs in browser is plain JavaScript so its “Any browser. Any host. Any OS.”</p>\n</blockquote>\n<p>  [caption id=”attachment_288” align=”aligncenter” width=”300”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/11/five.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/11/five-300x281.jpg\" alt=\"TypeScript in asp.net core\"></a> Components of TypeScript[/caption] <strong>The language</strong> consists of the new syntax, keywords, and type annotations. As a programmer, the language will be the component you will become most familiar with. Understanding how to supply type information is an important foundation for the other components because the compiler and language service are most effective when they understand the complex structures you use within your program. <strong>The Compiler</strong> performs the type erasure and code transformations that convert your TypeScript code into JavaScript. It will emit warnings and errors if it detects problems and can perform additional tasks such as combining the output into a single file, generating source maps, and more. <strong>The Language Service</strong> provides type information that can be used by development tools to supply intellisense, type hinting, re-factoring options, and other creative features based on the type information that has been gathered from the written program.</p>\n<h2 id=\"Step-4-Adding-TypeScript-in-ASP-NET-Core\"><a href=\"#Step-4-Adding-TypeScript-in-ASP-NET-Core\" class=\"headerlink\" title=\"Step 4: Adding TypeScript in ASP.NET Core\"></a>Step 4: Adding TypeScript in ASP.NET Core</h2><p>Firstly created “<strong>Scripts</strong>“ folder by right click project “AspNetCoreTypescript”. Here in this folder, we will add TypeScript Configuration file to use various settings of typescript. Right Click on “Scripts” folder, Add new file by selecting from template <strong>TypeScript JSON Configuration File</strong> as shown below [caption id=”attachment_292” align=”aligncenter” width=”964”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/11/six.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/11/six.jpg\" alt=\"TypeScript in asp.net core\"></a> Select TypeScript Configuration File[/caption] The reason to add this file in “Scripts” folder is that “Scripts folder will now act as VIRTUAL TYPESCRIPT project” and whenever we write any Typescript code in  “Scripts” it will be automatically TRANSPILE’D to JavaScript. Add TypeScript file called “app.ts” from Add New File options on “Scripts” folder.</p>\n<h2 id=\"Step-5-Output-Directory-for-Compiled-TypeScript-files-to-wwwroot\"><a href=\"#Step-5-Output-Directory-for-Compiled-TypeScript-files-to-wwwroot\" class=\"headerlink\" title=\"Step 5: Output Directory for Compiled TypeScript files to wwwroot\"></a>Step 5: Output Directory for Compiled TypeScript files to wwwroot</h2><p>In beginning, I mentioned that “TypeScript compiles to plain JavaScript that runs in a browser”. The obvious question is where will compiled plain JavaScript will be placed? As we are using ASP.NET Core, we have “<strong>wwwroot</strong>“ which will serve assets directly to clients, including HTML files, CSS files, image files, and JavaScript files. The <em><strong>wwwroot</strong></em> folder is the root of your web site. Now lets open “<strong>tsconfig.json</strong>“, we need to add configuration entry as “<strong>outDir</strong>“ i.e. Output Directory so that compiled TypeScript files are copied there.</p>\n<p>{<br>  “compilerOptions”: {<br>    “noImplicitAny”: false,<br>    “noEmitOnError”: true,<br>    “removeComments”: false,<br>    “sourceMap”: true,<br>    “target”: “es5”,<br>    “outDir”: “../wwwroot/scripts”<br>  }<br>}</p>\n<p>Just compile once to see that <strong>app.ts</strong> is compiled to <strong>app.js</strong> under <strong>wwwroot</strong> folder along with its mapping. [caption id=”attachment_293” align=”aligncenter” width=”477”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/11/seven.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/11/seven.jpg\" alt=\"TypeScript in asp.net core\"></a> Compiled TypeScript to JavaScript (Old image)[/caption]</p>\n<h2 id=\"Step-6-Writing-TypeScript-code-in-app-ts\"><a href=\"#Step-6-Writing-TypeScript-code-in-app-ts\" class=\"headerlink\" title=\"Step 6: Writing TypeScript code in app.ts\"></a>Step 6: Writing TypeScript code in app.ts</h2><p>It’s time to write code in <strong>app.ts</strong> file. Below code is a mix of TypeScript Code and usual plain JavaScript code. This shows that “<strong>Any JavaScript code is valid TypeScript Code</strong>“</p>\n<p>//Person is now string<br>function Welcome(person: string) {<br>    return “Hello, “ + person;<br>}</p>\n<p>function ClickMeButton() {<br>    var user = “Mithun Pattankar”;<br>    document.getElementById(“divMsg”).innerHTML = Welcome(user);<br>}</p>\n<p>Open index.html and copy this code. It has reference to <strong>app.js</strong> in HEAD section, it signifies that <strong>wwwroot</strong> acts as root folder of our ASP.NET Core</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<html><br><head><br>    <meta charset=\"utf-8\"><br>    <title>ASP.NET 5 TypeScript</title><br>    &lt;!-- app.js is loaded from wwwroot folder –&gt;<br>    <script src=\"scripts/app.js\"></script><br></head><br><body><br>    <h3>Learning TypeScript using ASP.NET 5</h3><br>    <input type=\"button\" style=\"width:70px;\" value=\"Click Me\" onclick=\"ClickMeButton()\"><br>    <div id=\"divMsg\"></div><br></body><br></html>\n\n<p>Run the application, Click the “Click Me” button to see a welcome message. [caption id=”attachment_294” align=”aligncenter” width=”621”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/11/eight.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/11/eight.jpg\" alt=\"TypeScript in asp.net core\"></a> Running TypeScript code in ASP.NET Core[/caption]</p>\n<h2 id=\"Step-7-What-is-so-special-here-Build-errors-in-TypeScript-code\"><a href=\"#Step-7-What-is-so-special-here-Build-errors-in-TypeScript-code\" class=\"headerlink\" title=\"Step 7: What is so special here? Build errors in TypeScript code\"></a>Step 7: What is so special here? Build errors in TypeScript code</h2><p>TypeScript is special because it can do Type checking when doing a build. Function “<strong>Welcome</strong>“ takes a string as a parameter. What if I make it as a number and check? [caption id=”attachment_295” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2015/11/nine.jpg\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2015/11/nine-1024x468.jpg\" alt=\"TypeScript in asp.net core\"></a> Build errors in TypeScript Code[/caption] Let’s see what is happening here.</p>\n<ol>\n<li>Function “Welcome” takes parameter “Person” as number making it strongly typed.</li>\n<li>Passing variable  “user” containing a string. It’s obvious that NUMBER isn’t STRING</li>\n<li>Build errors clearly stating that its assignment error.</li>\n</ol>\n<p>This is one of features TypeScript provides, making it special.</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Getting Started with TypeScript in ASP.NET Core using Visual Studio","path":"typescript-in-asp-net-5-using-visual-studio-2015/","eyeCatchImage":null,"excerpt":null,"date":"2015-11-29T09:04:20.000Z","pv":0,"totalPV":0,"categories":"ASP.NET Core 2 > TypeScript","tags":["ASP.NET Core 2","TypeScript"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"TypeScript Tutorials - Setup VS Code to Write, Run & Debug Typescript","url":"452.html","id":"452","date":"2016-05-23T11:20:57.000Z","_content":"\nTypescript tutorials are series of articles to learn Typescript using Visual Studio Code. What we will learn?\n\n1.  Setup Typescript environment in Visual Studio Code.\n2.  Write a simple \"Hello TypeScript\" example.\n3.  Run demo code, view output in the console.\n4.  Debug TypeScript code.\n\n> TypeScript is a _**typed superset**_ of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open Source.\n\nWhy learn TypeScript?\n\n1.  The very definition says that it's 'typed superset' meaning its JavaScript with strongly typed nature.\n2.  Your JavaScript development experience comes handy, no major learning curve. You will, in fact, feel better with it.\n3.  OOPS knowledge will help write better small or large JavaScript apps.\n4.  Angular 2 highly recommends TypeScript to be used for its development.\n5.  Global teams will benefit from TypeScript because of typed nature; meaning you know if write wrong instantly.\n\nStep 1 - Install TypeScript using NPM and Visual Studio Code\n------------------------------------------------------------\n\nTypeScript can be installed in two ways i.e. either throught NPM ([_Node Package Manager_](https://docs.npmjs.com/getting-started/installing-node)) or through Visual Studio Plugins. Our focus is to use Visual Studio Code (light weight editor from Microsoft), so we will install [TypeScript](https://www.typescriptlang.org/) using NPM. We will install NPM, Visual Studio and after that run command \"_**npm install -g typescript**_\" to install it. Also install Visual Studio Code. \\[caption id=\"attachment_453\" align=\"aligncenter\" width=\"202\"\\][![typescript tutorials](http://www.mithunvp.com/wp-content/uploads/2016/05/typescript-1.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/typescript-1.png) NPM, TypeScript installed successfully\\[/caption\\]\n\nStep 2 - Building \"Contact Manager\" application using Typescript tutorials\n--------------------------------------------------------------------------\n\nWe will build a sample \"Contact Manager\" application by following Typescript tutorials series. So lets create \"_contactmanger_\" folder and open that in VS code.\n\nStep 3 - Setting Task Runner to Transpile aka Compile TypeScript to JavaScript\n------------------------------------------------------------------------------\n\nWhen we build now using _**Cntrl+Shift+B in VS code**_, we get this warning telling “_**No task runner configured**_”. Then click on “_Configure Task Runner_” to create _tasks.json_ file which is collection of Tasks for various tasks for TypeScript, Gulp, Grunt etc. Press _**Cntrl+Shift+B in VS code**_ and ollow below image for better understanding to create tasks.json. Select the Task Runner \"_TypeScript with Watch Mode_\", this will ensure that whenever any TS file gets modified & saved its compiled to JS file immediately. \\[caption id=\"attachment_456\" align=\"aligncenter\" width=\"1100\"\\][![typescript tutorials](http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_144107-big.gif)](http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_144107-big.gif) Configure tasks.json (Task Runner in VS Code)\\[/caption\\] Create \"_**tsconfig.json**_\" file (TypeScript Configuration File) and  copy the below code, the _**compilerOptions**_ are explained as\n\n1.  \"**--target**\" tells TSC (TypeScript Compiler) to transpile all TS files to ES5 standard JS files,\n2.  \"**--outDir**\" is output directory of the transpiled JS files i.e. \"jsScripts\"\n3.  \"**--sourceMap**\" Help us in debugging typescript.\n\n{\n    \"compilerOptions\": {\n        \"target\": \"es5\", \n        \"outDir\": \"jsScripts/\",\n        \"sourceMap\": true\n    }    \n}\n\nStep 4 - Start writing the first TypeScript app.ts file & build it\n------------------------------------------------------------------\n\nLet's start learning by creating \"_**app.ts**_\" file. You can name the file as per your wish.\n\n> _**.TS**_ files indicates its Typescript file.\n\nclass HelloTypeScript {\n    constructor(public message: string) {       \n    }\n}\nvar hello = new HelloTypeScript(\"Hi Mithunvp.com !!\")\nconsole.log(hello.message);\n\nAfter this, build the project \"Cntrl+Shift+B\"; you will notice that \" _**jsScripts**_\" folder gets created with _app.js_ & maps files. Now we are ready with run the project.\n\nStep 5 - Run the project to see output in console.\n--------------------------------------------------\n\nWe successfully setup, build the TypeScript project for our TypeScript tutorials series. Its time to run. Follow the below steps Press \"_**Cntrl+Shift+D**_\" to open \"**Debug**\" panel; we will see \"gear\" like icon click to open _**launch.json**_. This file lets run the application. Copy the below code and paste it.\n\n> We need to select \"Node\" as environment to run application. TypeScript knowledge is not tied to Node itself.\n\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": \\[\n        {\n            \"name\": \"Launch\",\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceRoot}/app.ts\",\n            \"stopOnEntry\": false,\n            \"args\": \\[\\],\n            \"cwd\": \"${workspaceRoot}\",\n            \"preLaunchTask\": null,            \n            \"runtimeExecutable\": null,\n            \"runtimeArgs\": \\[\n                \"--nolazy\"\n            \\],\n            \"env\": {\n                \"NODE_ENV\": \"development\"\n            },\n            \"externalConsole\": false,\n            \"sourceMaps\": true,\n            \"outDir\": \"${workspaceRoot}/jsScripts\"\n        },\n        {\n            \"name\": \"Attach\",\n            \"type\": \"node\",\n            \"request\": \"attach\",\n            \"port\": 5858,\n            \"address\": \"localhost\",\n            \"restart\": false,\n            \"sourceMaps\": false,\n            \"outDir\": null,\n            \"localRoot\": \"${workspaceRoot}\",\n            \"remoteRoot\": null\n        }\n    \\]\n}\n\nNow press \"F5\" to see output in \"Debug Console\" as seen below \\[caption id=\"attachment_457\" align=\"aligncenter\" width=\"488\"\\][![typescript tutorials](http://www.mithunvp.com/wp-content/uploads/2016/05/2016-05-23_160010.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/2016-05-23_160010.png) Output seen in debug console\\[/caption\\]\n\nStep 6 - Debugging Typescript in VS Code\n----------------------------------------\n\nWith intention to debug TypeScript code, also we had added \"SourceMaps\" & added their reference in launch.json file. Now place breakpoint, run the application & see we are able to debug TS files. Observe what is happening?\n\n1.  I am setting break point, running the application.\n2.  As soon as it hits breakpoint, we see \"local variables\", \"call stack\".\n3.  When i cross the breakpoint by stepping through, we see message output in \"debug console\" and from apps.ts it moves to app.js.\n\n\\[caption id=\"attachment_458\" align=\"aligncenter\" width=\"800\"\\][![typescript tutorials](http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_160851.gif)](http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_160851.gif) Debugging TypeScript files\\[/caption\\] What's next? We will learn TypeScript Basic Types and their usage in writing strongly typed application.","source":"_posts/typescript-tutorials-setting-visual-studio-code.md","raw":"---\ntitle: 'TypeScript Tutorials - Setup VS Code to Write, Run & Debug Typescript'\ntags:\n  - TypeScript\nurl: 452.html\nid: 452\ncategories:\n  - TypeScript\ndate: 2016-05-23 16:50:57\n---\n\nTypescript tutorials are series of articles to learn Typescript using Visual Studio Code. What we will learn?\n\n1.  Setup Typescript environment in Visual Studio Code.\n2.  Write a simple \"Hello TypeScript\" example.\n3.  Run demo code, view output in the console.\n4.  Debug TypeScript code.\n\n> TypeScript is a _**typed superset**_ of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open Source.\n\nWhy learn TypeScript?\n\n1.  The very definition says that it's 'typed superset' meaning its JavaScript with strongly typed nature.\n2.  Your JavaScript development experience comes handy, no major learning curve. You will, in fact, feel better with it.\n3.  OOPS knowledge will help write better small or large JavaScript apps.\n4.  Angular 2 highly recommends TypeScript to be used for its development.\n5.  Global teams will benefit from TypeScript because of typed nature; meaning you know if write wrong instantly.\n\nStep 1 - Install TypeScript using NPM and Visual Studio Code\n------------------------------------------------------------\n\nTypeScript can be installed in two ways i.e. either throught NPM ([_Node Package Manager_](https://docs.npmjs.com/getting-started/installing-node)) or through Visual Studio Plugins. Our focus is to use Visual Studio Code (light weight editor from Microsoft), so we will install [TypeScript](https://www.typescriptlang.org/) using NPM. We will install NPM, Visual Studio and after that run command \"_**npm install -g typescript**_\" to install it. Also install Visual Studio Code. \\[caption id=\"attachment_453\" align=\"aligncenter\" width=\"202\"\\][![typescript tutorials](http://www.mithunvp.com/wp-content/uploads/2016/05/typescript-1.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/typescript-1.png) NPM, TypeScript installed successfully\\[/caption\\]\n\nStep 2 - Building \"Contact Manager\" application using Typescript tutorials\n--------------------------------------------------------------------------\n\nWe will build a sample \"Contact Manager\" application by following Typescript tutorials series. So lets create \"_contactmanger_\" folder and open that in VS code.\n\nStep 3 - Setting Task Runner to Transpile aka Compile TypeScript to JavaScript\n------------------------------------------------------------------------------\n\nWhen we build now using _**Cntrl+Shift+B in VS code**_, we get this warning telling “_**No task runner configured**_”. Then click on “_Configure Task Runner_” to create _tasks.json_ file which is collection of Tasks for various tasks for TypeScript, Gulp, Grunt etc. Press _**Cntrl+Shift+B in VS code**_ and ollow below image for better understanding to create tasks.json. Select the Task Runner \"_TypeScript with Watch Mode_\", this will ensure that whenever any TS file gets modified & saved its compiled to JS file immediately. \\[caption id=\"attachment_456\" align=\"aligncenter\" width=\"1100\"\\][![typescript tutorials](http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_144107-big.gif)](http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_144107-big.gif) Configure tasks.json (Task Runner in VS Code)\\[/caption\\] Create \"_**tsconfig.json**_\" file (TypeScript Configuration File) and  copy the below code, the _**compilerOptions**_ are explained as\n\n1.  \"**--target**\" tells TSC (TypeScript Compiler) to transpile all TS files to ES5 standard JS files,\n2.  \"**--outDir**\" is output directory of the transpiled JS files i.e. \"jsScripts\"\n3.  \"**--sourceMap**\" Help us in debugging typescript.\n\n{\n    \"compilerOptions\": {\n        \"target\": \"es5\", \n        \"outDir\": \"jsScripts/\",\n        \"sourceMap\": true\n    }    \n}\n\nStep 4 - Start writing the first TypeScript app.ts file & build it\n------------------------------------------------------------------\n\nLet's start learning by creating \"_**app.ts**_\" file. You can name the file as per your wish.\n\n> _**.TS**_ files indicates its Typescript file.\n\nclass HelloTypeScript {\n    constructor(public message: string) {       \n    }\n}\nvar hello = new HelloTypeScript(\"Hi Mithunvp.com !!\")\nconsole.log(hello.message);\n\nAfter this, build the project \"Cntrl+Shift+B\"; you will notice that \" _**jsScripts**_\" folder gets created with _app.js_ & maps files. Now we are ready with run the project.\n\nStep 5 - Run the project to see output in console.\n--------------------------------------------------\n\nWe successfully setup, build the TypeScript project for our TypeScript tutorials series. Its time to run. Follow the below steps Press \"_**Cntrl+Shift+D**_\" to open \"**Debug**\" panel; we will see \"gear\" like icon click to open _**launch.json**_. This file lets run the application. Copy the below code and paste it.\n\n> We need to select \"Node\" as environment to run application. TypeScript knowledge is not tied to Node itself.\n\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": \\[\n        {\n            \"name\": \"Launch\",\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceRoot}/app.ts\",\n            \"stopOnEntry\": false,\n            \"args\": \\[\\],\n            \"cwd\": \"${workspaceRoot}\",\n            \"preLaunchTask\": null,            \n            \"runtimeExecutable\": null,\n            \"runtimeArgs\": \\[\n                \"--nolazy\"\n            \\],\n            \"env\": {\n                \"NODE_ENV\": \"development\"\n            },\n            \"externalConsole\": false,\n            \"sourceMaps\": true,\n            \"outDir\": \"${workspaceRoot}/jsScripts\"\n        },\n        {\n            \"name\": \"Attach\",\n            \"type\": \"node\",\n            \"request\": \"attach\",\n            \"port\": 5858,\n            \"address\": \"localhost\",\n            \"restart\": false,\n            \"sourceMaps\": false,\n            \"outDir\": null,\n            \"localRoot\": \"${workspaceRoot}\",\n            \"remoteRoot\": null\n        }\n    \\]\n}\n\nNow press \"F5\" to see output in \"Debug Console\" as seen below \\[caption id=\"attachment_457\" align=\"aligncenter\" width=\"488\"\\][![typescript tutorials](http://www.mithunvp.com/wp-content/uploads/2016/05/2016-05-23_160010.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/2016-05-23_160010.png) Output seen in debug console\\[/caption\\]\n\nStep 6 - Debugging Typescript in VS Code\n----------------------------------------\n\nWith intention to debug TypeScript code, also we had added \"SourceMaps\" & added their reference in launch.json file. Now place breakpoint, run the application & see we are able to debug TS files. Observe what is happening?\n\n1.  I am setting break point, running the application.\n2.  As soon as it hits breakpoint, we see \"local variables\", \"call stack\".\n3.  When i cross the breakpoint by stepping through, we see message output in \"debug console\" and from apps.ts it moves to app.js.\n\n\\[caption id=\"attachment_458\" align=\"aligncenter\" width=\"800\"\\][![typescript tutorials](http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_160851.gif)](http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_160851.gif) Debugging TypeScript files\\[/caption\\] What's next? We will learn TypeScript Basic Types and their usage in writing strongly typed application.","slug":"typescript-tutorials-setting-visual-studio-code","published":1,"updated":"2018-07-10T19:49:06.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034x5001qs4tjuwfsj23r","content":"<p>Typescript tutorials are series of articles to learn Typescript using Visual Studio Code. What we will learn?</p>\n<ol>\n<li>Setup Typescript environment in Visual Studio Code.</li>\n<li>Write a simple “Hello TypeScript” example.</li>\n<li>Run demo code, view output in the console.</li>\n<li>Debug TypeScript code.</li>\n</ol>\n<blockquote>\n<p>TypeScript is a <em><strong>typed superset</strong></em> of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open Source.</p>\n</blockquote>\n<p>Why learn TypeScript?</p>\n<ol>\n<li>The very definition says that it’s ‘typed superset’ meaning its JavaScript with strongly typed nature.</li>\n<li>Your JavaScript development experience comes handy, no major learning curve. You will, in fact, feel better with it.</li>\n<li>OOPS knowledge will help write better small or large JavaScript apps.</li>\n<li>Angular 2 highly recommends TypeScript to be used for its development.</li>\n<li>Global teams will benefit from TypeScript because of typed nature; meaning you know if write wrong instantly.</li>\n</ol>\n<h2 id=\"Step-1-Install-TypeScript-using-NPM-and-Visual-Studio-Code\"><a href=\"#Step-1-Install-TypeScript-using-NPM-and-Visual-Studio-Code\" class=\"headerlink\" title=\"Step 1 - Install TypeScript using NPM and Visual Studio Code\"></a>Step 1 - Install TypeScript using NPM and Visual Studio Code</h2><p>TypeScript can be installed in two ways i.e. either throught NPM (<a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" rel=\"noopener\"><em>Node Package Manager</em></a>) or through Visual Studio Plugins. Our focus is to use Visual Studio Code (light weight editor from Microsoft), so we will install <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\">TypeScript</a> using NPM. We will install NPM, Visual Studio and after that run command “<em><strong>npm install -g typescript</strong></em>“ to install it. Also install Visual Studio Code. [caption id=”attachment_453” align=”aligncenter” width=”202”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/typescript-1.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/typescript-1.png\" alt=\"typescript tutorials\"></a> NPM, TypeScript installed successfully[/caption]</p>\n<h2 id=\"Step-2-Building-“Contact-Manager”-application-using-Typescript-tutorials\"><a href=\"#Step-2-Building-“Contact-Manager”-application-using-Typescript-tutorials\" class=\"headerlink\" title=\"Step 2 - Building “Contact Manager” application using Typescript tutorials\"></a>Step 2 - Building “Contact Manager” application using Typescript tutorials</h2><p>We will build a sample “Contact Manager” application by following Typescript tutorials series. So lets create “<em>contactmanger</em>“ folder and open that in VS code.</p>\n<h2 id=\"Step-3-Setting-Task-Runner-to-Transpile-aka-Compile-TypeScript-to-JavaScript\"><a href=\"#Step-3-Setting-Task-Runner-to-Transpile-aka-Compile-TypeScript-to-JavaScript\" class=\"headerlink\" title=\"Step 3 - Setting Task Runner to Transpile aka Compile TypeScript to JavaScript\"></a>Step 3 - Setting Task Runner to Transpile aka Compile TypeScript to JavaScript</h2><p>When we build now using <em><strong>Cntrl+Shift+B in VS code</strong></em>, we get this warning telling “<em><strong>No task runner configured</strong></em>”. Then click on “<em>Configure Task Runner</em>” to create <em>tasks.json</em> file which is collection of Tasks for various tasks for TypeScript, Gulp, Grunt etc. Press <em><strong>Cntrl+Shift+B in VS code</strong></em> and ollow below image for better understanding to create tasks.json. Select the Task Runner “<em>TypeScript with Watch Mode</em>“, this will ensure that whenever any TS file gets modified &amp; saved its compiled to JS file immediately. [caption id=”attachment_456” align=”aligncenter” width=”1100”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_144107-big.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_144107-big.gif\" alt=\"typescript tutorials\"></a> Configure tasks.json (Task Runner in VS Code)[/caption] Create “<em><strong>tsconfig.json</strong></em>“ file (TypeScript Configuration File) and  copy the below code, the <em><strong>compilerOptions</strong></em> are explained as</p>\n<ol>\n<li>“<strong>–target</strong>“ tells TSC (TypeScript Compiler) to transpile all TS files to ES5 standard JS files,</li>\n<li>“<strong>–outDir</strong>“ is output directory of the transpiled JS files i.e. “jsScripts”</li>\n<li>“<strong>–sourceMap</strong>“ Help us in debugging typescript.</li>\n</ol>\n<p>{<br>    “compilerOptions”: {<br>        “target”: “es5”,<br>        “outDir”: “jsScripts/“,<br>        “sourceMap”: true<br>    }<br>}</p>\n<h2 id=\"Step-4-Start-writing-the-first-TypeScript-app-ts-file-amp-build-it\"><a href=\"#Step-4-Start-writing-the-first-TypeScript-app-ts-file-amp-build-it\" class=\"headerlink\" title=\"Step 4 - Start writing the first TypeScript app.ts file &amp; build it\"></a>Step 4 - Start writing the first TypeScript app.ts file &amp; build it</h2><p>Let’s start learning by creating “<em><strong>app.ts</strong></em>“ file. You can name the file as per your wish.</p>\n<blockquote>\n<p><em><strong>.TS</strong></em> files indicates its Typescript file.</p>\n</blockquote>\n<p>class HelloTypeScript {<br>    constructor(public message: string) {<br>    }<br>}<br>var hello = new HelloTypeScript(“Hi Mithunvp.com !!”)<br>console.log(hello.message);</p>\n<p>After this, build the project “Cntrl+Shift+B”; you will notice that “ <em><strong>jsScripts</strong></em>“ folder gets created with <em>app.js</em> &amp; maps files. Now we are ready with run the project.</p>\n<h2 id=\"Step-5-Run-the-project-to-see-output-in-console\"><a href=\"#Step-5-Run-the-project-to-see-output-in-console\" class=\"headerlink\" title=\"Step 5 - Run the project to see output in console.\"></a>Step 5 - Run the project to see output in console.</h2><p>We successfully setup, build the TypeScript project for our TypeScript tutorials series. Its time to run. Follow the below steps Press “<em><strong>Cntrl+Shift+D</strong></em>“ to open “<strong>Debug</strong>“ panel; we will see “gear” like icon click to open <em><strong>launch.json</strong></em>. This file lets run the application. Copy the below code and paste it.</p>\n<blockquote>\n<p>We need to select “Node” as environment to run application. TypeScript knowledge is not tied to Node itself.</p>\n</blockquote>\n<p>{<br>    “version”: “0.2.0”,<br>    “configurations”: [<br>        {<br>            “name”: “Launch”,<br>            “type”: “node”,<br>            “request”: “launch”,<br>            “program”: “${workspaceRoot}/app.ts”,<br>            “stopOnEntry”: false,<br>            “args”: [],<br>            “cwd”: “${workspaceRoot}”,<br>            “preLaunchTask”: null,<br>            “runtimeExecutable”: null,<br>            “runtimeArgs”: [<br>                “–nolazy”<br>            ],<br>            “env”: {<br>                “NODE_ENV”: “development”<br>            },<br>            “externalConsole”: false,<br>            “sourceMaps”: true,<br>            “outDir”: “${workspaceRoot}/jsScripts”<br>        },<br>        {<br>            “name”: “Attach”,<br>            “type”: “node”,<br>            “request”: “attach”,<br>            “port”: 5858,<br>            “address”: “localhost”,<br>            “restart”: false,<br>            “sourceMaps”: false,<br>            “outDir”: null,<br>            “localRoot”: “${workspaceRoot}”,<br>            “remoteRoot”: null<br>        }<br>    ]<br>}</p>\n<p>Now press “F5” to see output in “Debug Console” as seen below [caption id=”attachment_457” align=”aligncenter” width=”488”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/2016-05-23_160010.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/2016-05-23_160010.png\" alt=\"typescript tutorials\"></a> Output seen in debug console[/caption]</p>\n<h2 id=\"Step-6-Debugging-Typescript-in-VS-Code\"><a href=\"#Step-6-Debugging-Typescript-in-VS-Code\" class=\"headerlink\" title=\"Step 6 - Debugging Typescript in VS Code\"></a>Step 6 - Debugging Typescript in VS Code</h2><p>With intention to debug TypeScript code, also we had added “SourceMaps” &amp; added their reference in launch.json file. Now place breakpoint, run the application &amp; see we are able to debug TS files. Observe what is happening?</p>\n<ol>\n<li>I am setting break point, running the application.</li>\n<li>As soon as it hits breakpoint, we see “local variables”, “call stack”.</li>\n<li>When i cross the breakpoint by stepping through, we see message output in “debug console” and from apps.ts it moves to app.js.</li>\n</ol>\n<p>[caption id=”attachment_458” align=”aligncenter” width=”800”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_160851.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_160851.gif\" alt=\"typescript tutorials\"></a> Debugging TypeScript files[/caption] What’s next? We will learn TypeScript Basic Types and their usage in writing strongly typed application.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Typescript tutorials are series of articles to learn Typescript using Visual Studio Code. What we will learn?</p>\n<ol>\n<li>Setup Typescript environment in Visual Studio Code.</li>\n<li>Write a simple “Hello TypeScript” example.</li>\n<li>Run demo code, view output in the console.</li>\n<li>Debug TypeScript code.</li>\n</ol>\n<blockquote>\n<p>TypeScript is a <em><strong>typed superset</strong></em> of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open Source.</p>\n</blockquote>\n<p>Why learn TypeScript?</p>\n<ol>\n<li>The very definition says that it’s ‘typed superset’ meaning its JavaScript with strongly typed nature.</li>\n<li>Your JavaScript development experience comes handy, no major learning curve. You will, in fact, feel better with it.</li>\n<li>OOPS knowledge will help write better small or large JavaScript apps.</li>\n<li>Angular 2 highly recommends TypeScript to be used for its development.</li>\n<li>Global teams will benefit from TypeScript because of typed nature; meaning you know if write wrong instantly.</li>\n</ol>\n<h2 id=\"Step-1-Install-TypeScript-using-NPM-and-Visual-Studio-Code\"><a href=\"#Step-1-Install-TypeScript-using-NPM-and-Visual-Studio-Code\" class=\"headerlink\" title=\"Step 1 - Install TypeScript using NPM and Visual Studio Code\"></a>Step 1 - Install TypeScript using NPM and Visual Studio Code</h2><p>TypeScript can be installed in two ways i.e. either throught NPM (<a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" rel=\"noopener\"><em>Node Package Manager</em></a>) or through Visual Studio Plugins. Our focus is to use Visual Studio Code (light weight editor from Microsoft), so we will install <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener\">TypeScript</a> using NPM. We will install NPM, Visual Studio and after that run command “<em><strong>npm install -g typescript</strong></em>“ to install it. Also install Visual Studio Code. [caption id=”attachment_453” align=”aligncenter” width=”202”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/typescript-1.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/typescript-1.png\" alt=\"typescript tutorials\"></a> NPM, TypeScript installed successfully[/caption]</p>\n<h2 id=\"Step-2-Building-“Contact-Manager”-application-using-Typescript-tutorials\"><a href=\"#Step-2-Building-“Contact-Manager”-application-using-Typescript-tutorials\" class=\"headerlink\" title=\"Step 2 - Building “Contact Manager” application using Typescript tutorials\"></a>Step 2 - Building “Contact Manager” application using Typescript tutorials</h2><p>We will build a sample “Contact Manager” application by following Typescript tutorials series. So lets create “<em>contactmanger</em>“ folder and open that in VS code.</p>\n<h2 id=\"Step-3-Setting-Task-Runner-to-Transpile-aka-Compile-TypeScript-to-JavaScript\"><a href=\"#Step-3-Setting-Task-Runner-to-Transpile-aka-Compile-TypeScript-to-JavaScript\" class=\"headerlink\" title=\"Step 3 - Setting Task Runner to Transpile aka Compile TypeScript to JavaScript\"></a>Step 3 - Setting Task Runner to Transpile aka Compile TypeScript to JavaScript</h2><p>When we build now using <em><strong>Cntrl+Shift+B in VS code</strong></em>, we get this warning telling “<em><strong>No task runner configured</strong></em>”. Then click on “<em>Configure Task Runner</em>” to create <em>tasks.json</em> file which is collection of Tasks for various tasks for TypeScript, Gulp, Grunt etc. Press <em><strong>Cntrl+Shift+B in VS code</strong></em> and ollow below image for better understanding to create tasks.json. Select the Task Runner “<em>TypeScript with Watch Mode</em>“, this will ensure that whenever any TS file gets modified &amp; saved its compiled to JS file immediately. [caption id=”attachment_456” align=”aligncenter” width=”1100”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_144107-big.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_144107-big.gif\" alt=\"typescript tutorials\"></a> Configure tasks.json (Task Runner in VS Code)[/caption] Create “<em><strong>tsconfig.json</strong></em>“ file (TypeScript Configuration File) and  copy the below code, the <em><strong>compilerOptions</strong></em> are explained as</p>\n<ol>\n<li>“<strong>–target</strong>“ tells TSC (TypeScript Compiler) to transpile all TS files to ES5 standard JS files,</li>\n<li>“<strong>–outDir</strong>“ is output directory of the transpiled JS files i.e. “jsScripts”</li>\n<li>“<strong>–sourceMap</strong>“ Help us in debugging typescript.</li>\n</ol>\n<p>{<br>    “compilerOptions”: {<br>        “target”: “es5”,<br>        “outDir”: “jsScripts/“,<br>        “sourceMap”: true<br>    }<br>}</p>\n<h2 id=\"Step-4-Start-writing-the-first-TypeScript-app-ts-file-amp-build-it\"><a href=\"#Step-4-Start-writing-the-first-TypeScript-app-ts-file-amp-build-it\" class=\"headerlink\" title=\"Step 4 - Start writing the first TypeScript app.ts file &amp; build it\"></a>Step 4 - Start writing the first TypeScript app.ts file &amp; build it</h2><p>Let’s start learning by creating “<em><strong>app.ts</strong></em>“ file. You can name the file as per your wish.</p>\n<blockquote>\n<p><em><strong>.TS</strong></em> files indicates its Typescript file.</p>\n</blockquote>\n<p>class HelloTypeScript {<br>    constructor(public message: string) {<br>    }<br>}<br>var hello = new HelloTypeScript(“Hi Mithunvp.com !!”)<br>console.log(hello.message);</p>\n<p>After this, build the project “Cntrl+Shift+B”; you will notice that “ <em><strong>jsScripts</strong></em>“ folder gets created with <em>app.js</em> &amp; maps files. Now we are ready with run the project.</p>\n<h2 id=\"Step-5-Run-the-project-to-see-output-in-console\"><a href=\"#Step-5-Run-the-project-to-see-output-in-console\" class=\"headerlink\" title=\"Step 5 - Run the project to see output in console.\"></a>Step 5 - Run the project to see output in console.</h2><p>We successfully setup, build the TypeScript project for our TypeScript tutorials series. Its time to run. Follow the below steps Press “<em><strong>Cntrl+Shift+D</strong></em>“ to open “<strong>Debug</strong>“ panel; we will see “gear” like icon click to open <em><strong>launch.json</strong></em>. This file lets run the application. Copy the below code and paste it.</p>\n<blockquote>\n<p>We need to select “Node” as environment to run application. TypeScript knowledge is not tied to Node itself.</p>\n</blockquote>\n<p>{<br>    “version”: “0.2.0”,<br>    “configurations”: [<br>        {<br>            “name”: “Launch”,<br>            “type”: “node”,<br>            “request”: “launch”,<br>            “program”: “${workspaceRoot}/app.ts”,<br>            “stopOnEntry”: false,<br>            “args”: [],<br>            “cwd”: “${workspaceRoot}”,<br>            “preLaunchTask”: null,<br>            “runtimeExecutable”: null,<br>            “runtimeArgs”: [<br>                “–nolazy”<br>            ],<br>            “env”: {<br>                “NODE_ENV”: “development”<br>            },<br>            “externalConsole”: false,<br>            “sourceMaps”: true,<br>            “outDir”: “${workspaceRoot}/jsScripts”<br>        },<br>        {<br>            “name”: “Attach”,<br>            “type”: “node”,<br>            “request”: “attach”,<br>            “port”: 5858,<br>            “address”: “localhost”,<br>            “restart”: false,<br>            “sourceMaps”: false,<br>            “outDir”: null,<br>            “localRoot”: “${workspaceRoot}”,<br>            “remoteRoot”: null<br>        }<br>    ]<br>}</p>\n<p>Now press “F5” to see output in “Debug Console” as seen below [caption id=”attachment_457” align=”aligncenter” width=”488”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/2016-05-23_160010.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/2016-05-23_160010.png\" alt=\"typescript tutorials\"></a> Output seen in debug console[/caption]</p>\n<h2 id=\"Step-6-Debugging-Typescript-in-VS-Code\"><a href=\"#Step-6-Debugging-Typescript-in-VS-Code\" class=\"headerlink\" title=\"Step 6 - Debugging Typescript in VS Code\"></a>Step 6 - Debugging Typescript in VS Code</h2><p>With intention to debug TypeScript code, also we had added “SourceMaps” &amp; added their reference in launch.json file. Now place breakpoint, run the application &amp; see we are able to debug TS files. Observe what is happening?</p>\n<ol>\n<li>I am setting break point, running the application.</li>\n<li>As soon as it hits breakpoint, we see “local variables”, “call stack”.</li>\n<li>When i cross the breakpoint by stepping through, we see message output in “debug console” and from apps.ts it moves to app.js.</li>\n</ol>\n<p>[caption id=”attachment_458” align=”aligncenter” width=”800”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_160851.gif\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/Video_2016-05-23_160851.gif\" alt=\"typescript tutorials\"></a> Debugging TypeScript files[/caption] What’s next? We will learn TypeScript Basic Types and their usage in writing strongly typed application.</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"TypeScript Tutorials - Setup VS Code to Write, Run & Debug Typescript","path":"typescript-tutorials-setting-visual-studio-code/","eyeCatchImage":null,"excerpt":null,"date":"2016-05-23T11:20:57.000Z","pv":0,"totalPV":0,"categories":"TypeScript","tags":["TypeScript"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"User Secrets - Storing sensitive data in ASP.NET Core projects","url":"480.html","id":"480","date":"2016-05-31T15:35:49.000Z","_content":"\n_**What do we mean by User Secrets?**_ This was the question which strike'd my mind when I first read about it. Is it really worth coming with something like. Yes, it's really worth. Believe me at end of this article you will really feel its worth. User Secrets never meant to be end user's secrets, its all about developers secrets. Here are some scenario's  for developer to have secrets.\n\n*   Any Social Media APP key which is used while development is secret. Twitter/ Facebook/ Google API keys are actually ones secret and why do you need to place them in source code.\n*   User specific passwords for accessing databases. Yes, many enterprise does give developers individual accounts for accessing databases.\n*   Any Token value for accessing some services.\n\nOne old school kind of dealing with this issue, be alert while working with source code repo's. Place some dummy text there and have common understanding between developers to enter their respective secrets. We will definitely mess up with these common understanding. I hope we have encountered these kinds of issues. Here comes _**User Secrets of ASP.NET Core**_, a very elegant way of keeping developers secrets up-to themselves. Let's explore more on this by creating ASP.NET Core web app, the tooling adds us necessary packages.\n\n*   Open _**project.json**_, you will see on top \"_**userSecretsId**_\" containing unique identifier  for this projects for keeping user related secrets.\n*   We also see \"_**Microsoft.Extensions.SecretManager.Tools**_\"; this helps to get; set or view the secrets.\n\n{\n\"userSecretsId\": \"aspnet-CoreDemoApp-7fdc0c49-5cef-407f-b51b-768f377fbee3\",\n\n//remaining code removed for clarity \n\n\"Microsoft.Extensions.Configuration.UserSecrets\": \"1.0.0-rc2-final\",\n\"Microsoft.Extensions.SecretManager.Tools\": {\n      \"version\": \"1.0.0-preview1-final\",\n      \"imports\": \"portable-net45+win8+dnxcore50\"\n    },\n}\n\n*   Open \"Startup.cs\", the \"Startup\" method adds \"_AddUserSecrets_()\" to ConfigurationBuilder so that it keeps secrets\n\npublic Startup(IHostingEnvironment env)\n        {\n            var builder = new ConfigurationBuilder()\n                .SetBasePath(env.ContentRootPath)\n                .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true);\n\n            if (env.IsDevelopment())\n            {\n                builder.AddUserSecrets();\n            }\n\n            builder.AddEnvironmentVariables();\n            Configuration = builder.Build();\n        }\n\n> User Secrets should be used only during development by using env.IsDevelopment()\n\nHow to add User secrets?\n------------------------\n\nIn project.json we have added **SecretManager tool** extension to work with developer user secret. Using this we will be adding them in project. Open CMD from your project location. Follow the commands as shown below \\[caption id=\"attachment_485\" align=\"aligncenter\" width=\"992\"\\][![user secrets](http://www.mithunvp.com/wp-content/uploads/2016/05/addkey.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/addkey.png) Using Secret Manager Tool\\[/caption\\]\n\n1.  Shows the \"user-secrets\" commands _\"dotnet user-secrets -h\"_\n2.  Lists out the added secrets for the project \"dotnet user-secrets list\"\n3.  Setting \"TwitterAPIKey\" as secret _\"dotnet user-secrets set TwitterAPIKey ABCDERF3456\"_\n4.  Shows that we have added\n\nThis was Command Line based way of working with user secrets, lets now see how we can do with Visual Studio tooling. Right Click the project name, navigate to \"_**Manage User Secrets**_\", it opens up secret.json file containing above added \"TwitterAPIKey\". Suppose you are working with Google services, it provides account specific API key. We can add them using Visual Studio 2015 instead of command line. In the below image, I clicked on \"Show All Files\" in Solution Explorer, right side i have \"secrets.json\" file which is not to seen in our explorer. \\[caption id=\"attachment_487\" align=\"aligncenter\" width=\"1024\"\\][![user secrets](http://www.mithunvp.com/wp-content/uploads/2016/05/second-1024x467.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/second.png) Secrets.json not to be found in Solution Explorer\\[/caption\\]\n\nWhere is this secrets.json located?\n-----------------------------------\n\nRight question at this point of time, User's Secrets that get added using \"Secret Manager Tool\" are located in AppData of current logged in Windows users. ASP.NET Core apps are cross platform, for NON windows machine they are located at _\"~/.microsoft/usersecrets/<userSecretsId>/secrets.json\"_ As secrets.json is already open, just mouse over it to see its location.You would see locations as _\"C:\\\\Users\\\\mithunvp\\\\AppData\\\\Roaming\\\\Microsoft\\\\UserSecrets\\**aspnet-CoreDemoApp-7fdc0c49-5cef-407f-b51b-768f377fbee3**\\\\secrets.json\"_ If you see carefully the above highlighted blue text is nothing but the \"**userSecretsId**\" present in package.json.\n\n> User Secrets are stored as per USER per PROJECT. Every project has its own secrets.json\n\nAccessing these secrets in application\n--------------------------------------\n\nIn _Models_ folder, create C# class file _AppKeyConfig.cs_. We will load those secrets in this class. _This C# class can be created any where._\n\nnamespace CoreDemoApp.Models\n{\n    public class AppKeyConfig\n    {\n        public string TwitterAPIKey { get; set; }\n        public string GoogleAPI { get; set; }\n    }\n}\n\nWe need to add configuration section called \"AppKeys\" in appsettings.json file.\n\n\"AppKeys\": {\n    \"TwitterAPIKey\": \"\",\n    \"GoogleAPI\": \"\"\n  }\n\nRight Click project name --> Click \"Manage User Secrets\" and modify it accordingly\n\n{\n  \"AppKeys\": {\n    \"TwitterAPIKey\": \"ABCDERF3456\",\n    \"GoogleAPI\": \"XYZ12345\"\n  }\n}\n\n>  **Appsettings.json** and **secrets.json** structure should be same to use them in application.\n\nEnsure that \"**Microsoft.Extensions.Options.ConfigurationExtensions\": \"1.0.0-rc2-final**\" is added to project.json. Open Startup.cs and add highlighted line. C# class we created in Models folder will be loaded with values from secrets.json to accessed across application using DI.\n\npublic void ConfigureServices(IServiceCollection services)\n        {\n            services.Configure<AppKeyConfig>(Configuration.GetSection(\"AppKeys\"));\n            services.AddMvc();\n            \n\n            // Other code removed to have clarity.\n        }\n\n**Note**: The _appsettings.json_ \"AppKeys\" section values will be overridden by values of secrets.json \"_AppKeys_\" because we have added \"AddUserSecrets()\" after appsettings.json is built. Now open any file in MVC application to access these secret values. Since ASP.NET Core offers Dependency Injection by default, its easy to inject these secret values wherever needed. I will open HomeController.cs, inject \"AppKeysConfig\" in constructor, read those values in About action method.\n\nusing CoreDemoApp.Models;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Options;\n\nnamespace CoreDemoApp.Controllers\n{\n    public class HomeController : Controller\n    {\n        public AppKeyConfig AppConfigs { get; }\n        public HomeController(IOptions<AppKeyConfig> appkeys)\n        {\n            AppConfigs = appkeys.Value;\n        }\n        public IActionResult Index()\n        {\n            return View();\n        }\n\n        public IActionResult About()\n        {\n            ViewData\\[\"Message\"\\] = AppConfigs.TwitterAPIKey;\n\n            return View();\n        }\n\n        //Remaining code removed to have clarity\n    }\n}\n\nWhen we run application, navigate to About() screen, we see the API key displayed on screen. Since we see everything, we think that their no secret here, but secrets.json is in your machine, not on source code repo.","source":"_posts/user-secrets-asp-net-core.md","raw":"---\ntitle: User Secrets - Storing sensitive data in ASP.NET Core projects\ntags:\n  - Asp.NET Core 1.0\nurl: 480.html\nid: 480\ncategories:\n  - ASP.NET Core 1.0\ndate: 2016-05-31 21:05:49\n---\n\n_**What do we mean by User Secrets?**_ This was the question which strike'd my mind when I first read about it. Is it really worth coming with something like. Yes, it's really worth. Believe me at end of this article you will really feel its worth. User Secrets never meant to be end user's secrets, its all about developers secrets. Here are some scenario's  for developer to have secrets.\n\n*   Any Social Media APP key which is used while development is secret. Twitter/ Facebook/ Google API keys are actually ones secret and why do you need to place them in source code.\n*   User specific passwords for accessing databases. Yes, many enterprise does give developers individual accounts for accessing databases.\n*   Any Token value for accessing some services.\n\nOne old school kind of dealing with this issue, be alert while working with source code repo's. Place some dummy text there and have common understanding between developers to enter their respective secrets. We will definitely mess up with these common understanding. I hope we have encountered these kinds of issues. Here comes _**User Secrets of ASP.NET Core**_, a very elegant way of keeping developers secrets up-to themselves. Let's explore more on this by creating ASP.NET Core web app, the tooling adds us necessary packages.\n\n*   Open _**project.json**_, you will see on top \"_**userSecretsId**_\" containing unique identifier  for this projects for keeping user related secrets.\n*   We also see \"_**Microsoft.Extensions.SecretManager.Tools**_\"; this helps to get; set or view the secrets.\n\n{\n\"userSecretsId\": \"aspnet-CoreDemoApp-7fdc0c49-5cef-407f-b51b-768f377fbee3\",\n\n//remaining code removed for clarity \n\n\"Microsoft.Extensions.Configuration.UserSecrets\": \"1.0.0-rc2-final\",\n\"Microsoft.Extensions.SecretManager.Tools\": {\n      \"version\": \"1.0.0-preview1-final\",\n      \"imports\": \"portable-net45+win8+dnxcore50\"\n    },\n}\n\n*   Open \"Startup.cs\", the \"Startup\" method adds \"_AddUserSecrets_()\" to ConfigurationBuilder so that it keeps secrets\n\npublic Startup(IHostingEnvironment env)\n        {\n            var builder = new ConfigurationBuilder()\n                .SetBasePath(env.ContentRootPath)\n                .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true);\n\n            if (env.IsDevelopment())\n            {\n                builder.AddUserSecrets();\n            }\n\n            builder.AddEnvironmentVariables();\n            Configuration = builder.Build();\n        }\n\n> User Secrets should be used only during development by using env.IsDevelopment()\n\nHow to add User secrets?\n------------------------\n\nIn project.json we have added **SecretManager tool** extension to work with developer user secret. Using this we will be adding them in project. Open CMD from your project location. Follow the commands as shown below \\[caption id=\"attachment_485\" align=\"aligncenter\" width=\"992\"\\][![user secrets](http://www.mithunvp.com/wp-content/uploads/2016/05/addkey.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/addkey.png) Using Secret Manager Tool\\[/caption\\]\n\n1.  Shows the \"user-secrets\" commands _\"dotnet user-secrets -h\"_\n2.  Lists out the added secrets for the project \"dotnet user-secrets list\"\n3.  Setting \"TwitterAPIKey\" as secret _\"dotnet user-secrets set TwitterAPIKey ABCDERF3456\"_\n4.  Shows that we have added\n\nThis was Command Line based way of working with user secrets, lets now see how we can do with Visual Studio tooling. Right Click the project name, navigate to \"_**Manage User Secrets**_\", it opens up secret.json file containing above added \"TwitterAPIKey\". Suppose you are working with Google services, it provides account specific API key. We can add them using Visual Studio 2015 instead of command line. In the below image, I clicked on \"Show All Files\" in Solution Explorer, right side i have \"secrets.json\" file which is not to seen in our explorer. \\[caption id=\"attachment_487\" align=\"aligncenter\" width=\"1024\"\\][![user secrets](http://www.mithunvp.com/wp-content/uploads/2016/05/second-1024x467.png)](http://www.mithunvp.com/wp-content/uploads/2016/05/second.png) Secrets.json not to be found in Solution Explorer\\[/caption\\]\n\nWhere is this secrets.json located?\n-----------------------------------\n\nRight question at this point of time, User's Secrets that get added using \"Secret Manager Tool\" are located in AppData of current logged in Windows users. ASP.NET Core apps are cross platform, for NON windows machine they are located at _\"~/.microsoft/usersecrets/<userSecretsId>/secrets.json\"_ As secrets.json is already open, just mouse over it to see its location.You would see locations as _\"C:\\\\Users\\\\mithunvp\\\\AppData\\\\Roaming\\\\Microsoft\\\\UserSecrets\\**aspnet-CoreDemoApp-7fdc0c49-5cef-407f-b51b-768f377fbee3**\\\\secrets.json\"_ If you see carefully the above highlighted blue text is nothing but the \"**userSecretsId**\" present in package.json.\n\n> User Secrets are stored as per USER per PROJECT. Every project has its own secrets.json\n\nAccessing these secrets in application\n--------------------------------------\n\nIn _Models_ folder, create C# class file _AppKeyConfig.cs_. We will load those secrets in this class. _This C# class can be created any where._\n\nnamespace CoreDemoApp.Models\n{\n    public class AppKeyConfig\n    {\n        public string TwitterAPIKey { get; set; }\n        public string GoogleAPI { get; set; }\n    }\n}\n\nWe need to add configuration section called \"AppKeys\" in appsettings.json file.\n\n\"AppKeys\": {\n    \"TwitterAPIKey\": \"\",\n    \"GoogleAPI\": \"\"\n  }\n\nRight Click project name --> Click \"Manage User Secrets\" and modify it accordingly\n\n{\n  \"AppKeys\": {\n    \"TwitterAPIKey\": \"ABCDERF3456\",\n    \"GoogleAPI\": \"XYZ12345\"\n  }\n}\n\n>  **Appsettings.json** and **secrets.json** structure should be same to use them in application.\n\nEnsure that \"**Microsoft.Extensions.Options.ConfigurationExtensions\": \"1.0.0-rc2-final**\" is added to project.json. Open Startup.cs and add highlighted line. C# class we created in Models folder will be loaded with values from secrets.json to accessed across application using DI.\n\npublic void ConfigureServices(IServiceCollection services)\n        {\n            services.Configure<AppKeyConfig>(Configuration.GetSection(\"AppKeys\"));\n            services.AddMvc();\n            \n\n            // Other code removed to have clarity.\n        }\n\n**Note**: The _appsettings.json_ \"AppKeys\" section values will be overridden by values of secrets.json \"_AppKeys_\" because we have added \"AddUserSecrets()\" after appsettings.json is built. Now open any file in MVC application to access these secret values. Since ASP.NET Core offers Dependency Injection by default, its easy to inject these secret values wherever needed. I will open HomeController.cs, inject \"AppKeysConfig\" in constructor, read those values in About action method.\n\nusing CoreDemoApp.Models;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Options;\n\nnamespace CoreDemoApp.Controllers\n{\n    public class HomeController : Controller\n    {\n        public AppKeyConfig AppConfigs { get; }\n        public HomeController(IOptions<AppKeyConfig> appkeys)\n        {\n            AppConfigs = appkeys.Value;\n        }\n        public IActionResult Index()\n        {\n            return View();\n        }\n\n        public IActionResult About()\n        {\n            ViewData\\[\"Message\"\\] = AppConfigs.TwitterAPIKey;\n\n            return View();\n        }\n\n        //Remaining code removed to have clarity\n    }\n}\n\nWhen we run application, navigate to About() screen, we see the API key displayed on screen. Since we see everything, we think that their no secret here, but secrets.json is in your machine, not on source code repo.","slug":"user-secrets-asp-net-core","published":1,"updated":"2018-07-10T19:49:06.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034x5001rs4tjzigmv38u","content":"<p><em><strong>What do we mean by User Secrets?</strong></em> This was the question which strike’d my mind when I first read about it. Is it really worth coming with something like. Yes, it’s really worth. Believe me at end of this article you will really feel its worth. User Secrets never meant to be end user’s secrets, its all about developers secrets. Here are some scenario’s  for developer to have secrets.</p>\n<ul>\n<li>Any Social Media APP key which is used while development is secret. Twitter/ Facebook/ Google API keys are actually ones secret and why do you need to place them in source code.</li>\n<li>User specific passwords for accessing databases. Yes, many enterprise does give developers individual accounts for accessing databases.</li>\n<li>Any Token value for accessing some services.</li>\n</ul>\n<p>One old school kind of dealing with this issue, be alert while working with source code repo’s. Place some dummy text there and have common understanding between developers to enter their respective secrets. We will definitely mess up with these common understanding. I hope we have encountered these kinds of issues. Here comes <em><strong>User Secrets of ASP.NET Core</strong></em>, a very elegant way of keeping developers secrets up-to themselves. Let’s explore more on this by creating ASP.NET Core web app, the tooling adds us necessary packages.</p>\n<ul>\n<li>Open <em><strong>project.json</strong></em>, you will see on top “<em><strong>userSecretsId</strong></em>“ containing unique identifier  for this projects for keeping user related secrets.</li>\n<li>We also see “<em><strong>Microsoft.Extensions.SecretManager.Tools</strong></em>“; this helps to get; set or view the secrets.</li>\n</ul>\n<p>{<br>“userSecretsId”: “aspnet-CoreDemoApp-7fdc0c49-5cef-407f-b51b-768f377fbee3”,</p>\n<p>//remaining code removed for clarity </p>\n<p>“Microsoft.Extensions.Configuration.UserSecrets”: “1.0.0-rc2-final”,<br>“Microsoft.Extensions.SecretManager.Tools”: {<br>      “version”: “1.0.0-preview1-final”,<br>      “imports”: “portable-net45+win8+dnxcore50”<br>    },<br>}</p>\n<ul>\n<li>Open “Startup.cs”, the “Startup” method adds “<em>AddUserSecrets</em>()” to ConfigurationBuilder so that it keeps secrets</li>\n</ul>\n<p>public Startup(IHostingEnvironment env)<br>        {<br>            var builder = new ConfigurationBuilder()<br>                .SetBasePath(env.ContentRootPath)<br>                .AddJsonFile(“appsettings.json”, optional: true, reloadOnChange: true)<br>                .AddJsonFile($”appsettings.{env.EnvironmentName}.json”, optional: true);</p>\n<pre><code>    if (env.IsDevelopment())\n    {\n        builder.AddUserSecrets();\n    }\n\n    builder.AddEnvironmentVariables();\n    Configuration = builder.Build();\n}\n</code></pre><blockquote>\n<p>User Secrets should be used only during development by using env.IsDevelopment()</p>\n</blockquote>\n<h2 id=\"How-to-add-User-secrets\"><a href=\"#How-to-add-User-secrets\" class=\"headerlink\" title=\"How to add User secrets?\"></a>How to add User secrets?</h2><p>In project.json we have added <strong>SecretManager tool</strong> extension to work with developer user secret. Using this we will be adding them in project. Open CMD from your project location. Follow the commands as shown below [caption id=”attachment_485” align=”aligncenter” width=”992”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/addkey.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/addkey.png\" alt=\"user secrets\"></a> Using Secret Manager Tool[/caption]</p>\n<ol>\n<li>Shows the “user-secrets” commands <em>“dotnet user-secrets -h”</em></li>\n<li>Lists out the added secrets for the project “dotnet user-secrets list”</li>\n<li>Setting “TwitterAPIKey” as secret <em>“dotnet user-secrets set TwitterAPIKey ABCDERF3456”</em></li>\n<li>Shows that we have added</li>\n</ol>\n<p>This was Command Line based way of working with user secrets, lets now see how we can do with Visual Studio tooling. Right Click the project name, navigate to “<em><strong>Manage User Secrets</strong></em>“, it opens up secret.json file containing above added “TwitterAPIKey”. Suppose you are working with Google services, it provides account specific API key. We can add them using Visual Studio 2015 instead of command line. In the below image, I clicked on “Show All Files” in Solution Explorer, right side i have “secrets.json” file which is not to seen in our explorer. [caption id=”attachment_487” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/second.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/second-1024x467.png\" alt=\"user secrets\"></a> Secrets.json not to be found in Solution Explorer[/caption]</p>\n<h2 id=\"Where-is-this-secrets-json-located\"><a href=\"#Where-is-this-secrets-json-located\" class=\"headerlink\" title=\"Where is this secrets.json located?\"></a>Where is this secrets.json located?</h2><p>Right question at this point of time, User’s Secrets that get added using “Secret Manager Tool” are located in AppData of current logged in Windows users. ASP.NET Core apps are cross platform, for NON windows machine they are located at <em>“~/.microsoft/usersecrets/<usersecretsid>/secrets.json”</usersecretsid></em> As secrets.json is already open, just mouse over it to see its location.You would see locations as <em>“C:\\Users\\mithunvp\\AppData\\Roaming\\Microsoft\\UserSecrets**aspnet-CoreDemoApp-7fdc0c49-5cef-407f-b51b-768f377fbee3**\\secrets.json”</em> If you see carefully the above highlighted blue text is nothing but the “<strong>userSecretsId</strong>“ present in package.json.</p>\n<blockquote>\n<p>User Secrets are stored as per USER per PROJECT. Every project has its own secrets.json</p>\n</blockquote>\n<h2 id=\"Accessing-these-secrets-in-application\"><a href=\"#Accessing-these-secrets-in-application\" class=\"headerlink\" title=\"Accessing these secrets in application\"></a>Accessing these secrets in application</h2><p>In <em>Models</em> folder, create C# class file <em>AppKeyConfig.cs</em>. We will load those secrets in this class. <em>This C# class can be created any where.</em></p>\n<p>namespace CoreDemoApp.Models<br>{<br>    public class AppKeyConfig<br>    {<br>        public string TwitterAPIKey { get; set; }<br>        public string GoogleAPI { get; set; }<br>    }<br>}</p>\n<p>We need to add configuration section called “AppKeys” in appsettings.json file.</p>\n<p>“AppKeys”: {<br>    “TwitterAPIKey”: “”,<br>    “GoogleAPI”: “”<br>  }</p>\n<p>Right Click project name –&gt; Click “Manage User Secrets” and modify it accordingly</p>\n<p>{<br>  “AppKeys”: {<br>    “TwitterAPIKey”: “ABCDERF3456”,<br>    “GoogleAPI”: “XYZ12345”<br>  }<br>}</p>\n<blockquote>\n<p> <strong>Appsettings.json</strong> and <strong>secrets.json</strong> structure should be same to use them in application.</p>\n</blockquote>\n<p>Ensure that “<strong>Microsoft.Extensions.Options.ConfigurationExtensions”: “1.0.0-rc2-final</strong>“ is added to project.json. Open Startup.cs and add highlighted line. C# class we created in Models folder will be loaded with values from secrets.json to accessed across application using DI.</p>\n<p>public void ConfigureServices(IServiceCollection services)<br>        {<br>            services.Configure<appkeyconfig>(Configuration.GetSection(“AppKeys”));<br>            services.AddMvc();</appkeyconfig></p>\n<pre><code>    // Other code removed to have clarity.\n}\n</code></pre><p><strong>Note</strong>: The <em>appsettings.json</em> “AppKeys” section values will be overridden by values of secrets.json “<em>AppKeys</em>“ because we have added “AddUserSecrets()” after appsettings.json is built. Now open any file in MVC application to access these secret values. Since ASP.NET Core offers Dependency Injection by default, its easy to inject these secret values wherever needed. I will open HomeController.cs, inject “AppKeysConfig” in constructor, read those values in About action method.</p>\n<p>using CoreDemoApp.Models;<br>using Microsoft.AspNetCore.Mvc;<br>using Microsoft.Extensions.Options;</p>\n<p>namespace CoreDemoApp.Controllers<br>{<br>    public class HomeController : Controller<br>    {<br>        public AppKeyConfig AppConfigs { get; }<br>        public HomeController(IOptions<appkeyconfig> appkeys)<br>        {<br>            AppConfigs = appkeys.Value;<br>        }<br>        public IActionResult Index()<br>        {<br>            return View();<br>        }</appkeyconfig></p>\n<pre><code>    public IActionResult About()\n    {\n        ViewData\\[&quot;Message&quot;\\] = AppConfigs.TwitterAPIKey;\n\n        return View();\n    }\n\n    //Remaining code removed to have clarity\n}\n</code></pre><p>}</p>\n<p>When we run application, navigate to About() screen, we see the API key displayed on screen. Since we see everything, we think that their no secret here, but secrets.json is in your machine, not on source code repo.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em><strong>What do we mean by User Secrets?</strong></em> This was the question which strike’d my mind when I first read about it. Is it really worth coming with something like. Yes, it’s really worth. Believe me at end of this article you will really feel its worth. User Secrets never meant to be end user’s secrets, its all about developers secrets. Here are some scenario’s  for developer to have secrets.</p>\n<ul>\n<li>Any Social Media APP key which is used while development is secret. Twitter/ Facebook/ Google API keys are actually ones secret and why do you need to place them in source code.</li>\n<li>User specific passwords for accessing databases. Yes, many enterprise does give developers individual accounts for accessing databases.</li>\n<li>Any Token value for accessing some services.</li>\n</ul>\n<p>One old school kind of dealing with this issue, be alert while working with source code repo’s. Place some dummy text there and have common understanding between developers to enter their respective secrets. We will definitely mess up with these common understanding. I hope we have encountered these kinds of issues. Here comes <em><strong>User Secrets of ASP.NET Core</strong></em>, a very elegant way of keeping developers secrets up-to themselves. Let’s explore more on this by creating ASP.NET Core web app, the tooling adds us necessary packages.</p>\n<ul>\n<li>Open <em><strong>project.json</strong></em>, you will see on top “<em><strong>userSecretsId</strong></em>“ containing unique identifier  for this projects for keeping user related secrets.</li>\n<li>We also see “<em><strong>Microsoft.Extensions.SecretManager.Tools</strong></em>“; this helps to get; set or view the secrets.</li>\n</ul>\n<p>{<br>“userSecretsId”: “aspnet-CoreDemoApp-7fdc0c49-5cef-407f-b51b-768f377fbee3”,</p>\n<p>//remaining code removed for clarity </p>\n<p>“Microsoft.Extensions.Configuration.UserSecrets”: “1.0.0-rc2-final”,<br>“Microsoft.Extensions.SecretManager.Tools”: {<br>      “version”: “1.0.0-preview1-final”,<br>      “imports”: “portable-net45+win8+dnxcore50”<br>    },<br>}</p>\n<ul>\n<li>Open “Startup.cs”, the “Startup” method adds “<em>AddUserSecrets</em>()” to ConfigurationBuilder so that it keeps secrets</li>\n</ul>\n<p>public Startup(IHostingEnvironment env)<br>        {<br>            var builder = new ConfigurationBuilder()<br>                .SetBasePath(env.ContentRootPath)<br>                .AddJsonFile(“appsettings.json”, optional: true, reloadOnChange: true)<br>                .AddJsonFile($”appsettings.{env.EnvironmentName}.json”, optional: true);</p>\n<pre><code>    if (env.IsDevelopment())\n    {\n        builder.AddUserSecrets();\n    }\n\n    builder.AddEnvironmentVariables();\n    Configuration = builder.Build();\n}\n</code></pre><blockquote>\n<p>User Secrets should be used only during development by using env.IsDevelopment()</p>\n</blockquote>\n<h2 id=\"How-to-add-User-secrets\"><a href=\"#How-to-add-User-secrets\" class=\"headerlink\" title=\"How to add User secrets?\"></a>How to add User secrets?</h2><p>In project.json we have added <strong>SecretManager tool</strong> extension to work with developer user secret. Using this we will be adding them in project. Open CMD from your project location. Follow the commands as shown below [caption id=”attachment_485” align=”aligncenter” width=”992”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/addkey.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/addkey.png\" alt=\"user secrets\"></a> Using Secret Manager Tool[/caption]</p>\n<ol>\n<li>Shows the “user-secrets” commands <em>“dotnet user-secrets -h”</em></li>\n<li>Lists out the added secrets for the project “dotnet user-secrets list”</li>\n<li>Setting “TwitterAPIKey” as secret <em>“dotnet user-secrets set TwitterAPIKey ABCDERF3456”</em></li>\n<li>Shows that we have added</li>\n</ol>\n<p>This was Command Line based way of working with user secrets, lets now see how we can do with Visual Studio tooling. Right Click the project name, navigate to “<em><strong>Manage User Secrets</strong></em>“, it opens up secret.json file containing above added “TwitterAPIKey”. Suppose you are working with Google services, it provides account specific API key. We can add them using Visual Studio 2015 instead of command line. In the below image, I clicked on “Show All Files” in Solution Explorer, right side i have “secrets.json” file which is not to seen in our explorer. [caption id=”attachment_487” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/05/second.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/05/second-1024x467.png\" alt=\"user secrets\"></a> Secrets.json not to be found in Solution Explorer[/caption]</p>\n<h2 id=\"Where-is-this-secrets-json-located\"><a href=\"#Where-is-this-secrets-json-located\" class=\"headerlink\" title=\"Where is this secrets.json located?\"></a>Where is this secrets.json located?</h2><p>Right question at this point of time, User’s Secrets that get added using “Secret Manager Tool” are located in AppData of current logged in Windows users. ASP.NET Core apps are cross platform, for NON windows machine they are located at <em>“~/.microsoft/usersecrets/<usersecretsid>/secrets.json”</usersecretsid></em> As secrets.json is already open, just mouse over it to see its location.You would see locations as <em>“C:\\Users\\mithunvp\\AppData\\Roaming\\Microsoft\\UserSecrets**aspnet-CoreDemoApp-7fdc0c49-5cef-407f-b51b-768f377fbee3**\\secrets.json”</em> If you see carefully the above highlighted blue text is nothing but the “<strong>userSecretsId</strong>“ present in package.json.</p>\n<blockquote>\n<p>User Secrets are stored as per USER per PROJECT. Every project has its own secrets.json</p>\n</blockquote>\n<h2 id=\"Accessing-these-secrets-in-application\"><a href=\"#Accessing-these-secrets-in-application\" class=\"headerlink\" title=\"Accessing these secrets in application\"></a>Accessing these secrets in application</h2><p>In <em>Models</em> folder, create C# class file <em>AppKeyConfig.cs</em>. We will load those secrets in this class. <em>This C# class can be created any where.</em></p>\n<p>namespace CoreDemoApp.Models<br>{<br>    public class AppKeyConfig<br>    {<br>        public string TwitterAPIKey { get; set; }<br>        public string GoogleAPI { get; set; }<br>    }<br>}</p>\n<p>We need to add configuration section called “AppKeys” in appsettings.json file.</p>\n<p>“AppKeys”: {<br>    “TwitterAPIKey”: “”,<br>    “GoogleAPI”: “”<br>  }</p>\n<p>Right Click project name –&gt; Click “Manage User Secrets” and modify it accordingly</p>\n<p>{<br>  “AppKeys”: {<br>    “TwitterAPIKey”: “ABCDERF3456”,<br>    “GoogleAPI”: “XYZ12345”<br>  }<br>}</p>\n<blockquote>\n<p> <strong>Appsettings.json</strong> and <strong>secrets.json</strong> structure should be same to use them in application.</p>\n</blockquote>\n<p>Ensure that “<strong>Microsoft.Extensions.Options.ConfigurationExtensions”: “1.0.0-rc2-final</strong>“ is added to project.json. Open Startup.cs and add highlighted line. C# class we created in Models folder will be loaded with values from secrets.json to accessed across application using DI.</p>\n<p>public void ConfigureServices(IServiceCollection services)<br>        {<br>            services.Configure<appkeyconfig>(Configuration.GetSection(“AppKeys”));<br>            services.AddMvc();</appkeyconfig></p>\n<pre><code>    // Other code removed to have clarity.\n}\n</code></pre><p><strong>Note</strong>: The <em>appsettings.json</em> “AppKeys” section values will be overridden by values of secrets.json “<em>AppKeys</em>“ because we have added “AddUserSecrets()” after appsettings.json is built. Now open any file in MVC application to access these secret values. Since ASP.NET Core offers Dependency Injection by default, its easy to inject these secret values wherever needed. I will open HomeController.cs, inject “AppKeysConfig” in constructor, read those values in About action method.</p>\n<p>using CoreDemoApp.Models;<br>using Microsoft.AspNetCore.Mvc;<br>using Microsoft.Extensions.Options;</p>\n<p>namespace CoreDemoApp.Controllers<br>{<br>    public class HomeController : Controller<br>    {<br>        public AppKeyConfig AppConfigs { get; }<br>        public HomeController(IOptions<appkeyconfig> appkeys)<br>        {<br>            AppConfigs = appkeys.Value;<br>        }<br>        public IActionResult Index()<br>        {<br>            return View();<br>        }</appkeyconfig></p>\n<pre><code>    public IActionResult About()\n    {\n        ViewData\\[&quot;Message&quot;\\] = AppConfigs.TwitterAPIKey;\n\n        return View();\n    }\n\n    //Remaining code removed to have clarity\n}\n</code></pre><p>}</p>\n<p>When we run application, navigate to About() screen, we see the API key displayed on screen. Since we see everything, we think that their no secret here, but secrets.json is in your machine, not on source code repo.</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"User Secrets - Storing sensitive data in ASP.NET Core projects","path":"user-secrets-asp-net-core/","eyeCatchImage":null,"excerpt":null,"date":"2016-05-31T15:35:49.000Z","pv":0,"totalPV":0,"categories":"ASP.NET Core 1.0","tags":["Asp.NET Core 1.0"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ASP.NET MVC 5 - Using Angular 4 with TypeScript in Visual Studio","url":"518.html","id":"518","date":"2016-07-28T13:26:39.000Z","_content":"\nASP.NET MVC 5 is widely used web development framework, it's stable, matured and most importantly its is used in production on large scale. Many folks had requested me to write how to wire up Angular 2 in MVC 5.\n\n*   **Update 23/8/17 - Github repo updated with Angular 4.3.5, TypeScript 2.4**\n*   Update 26/5/17 - Github repo updated with Angular 4.1, TypeScript 2.3\n*   Update 31/3/17 - Github repo updated with **Angular 4**, TypeScript 2.1. Angular 4 is backward compatible with Angular 2 with much-reduced bundle sizes.\n*   Update 26/9 - Github repo updated with Angular 2 Final release version. Install TypeScript 2.0 RC\n\nThese steps can be used for new or existing MVC 5 application. In this post, I will summarize the steps needed to getting started with Angular 2 in MVC 5.\n\n> ASP.NET MVC 5 is full .NET framework web development framework, it's different from ASP.NET Core 1.0\n\nWhat will we learn?\n\n1.  Adding package.json to MVC 5\n2.  Configure to transpile TypeScript files\n3.  Using gulpfile.js to move files.\n4.  Add TypeScript files for bootstrapping\n5.  Include systemjs.config.js to load Angular 2 modules\n6.  Change HTML to load and render Angular\n\nStep 1: Adding _**package.json**_ to ASP.NET MVC 5\n--------------------------------------------------\n\nAssuming that you already have existing or created new ASP.NET MVC 5. Let's add _**NPM configuration file**_ known as _package.json_. It contains Angular 4 (works for Angular 2) & related package name to installed using NPM (Node). This is similar to package.config of NuGet.\n\n> Latest NodeJS & NPM needs to be installed.\n\n{\n  \"version\": \"1.0.0\",\n  \"name\": \"aspnet\",\n  \"private\": true,\n  \"scripts\": {},\n  \"dependencies\": {\n    \"@angular/animations\": \"4.3.5\",\n    \"@angular/common\": \"4.3.5\",\n    \"@angular/compiler\": \"4.3.5\",\n    \"@angular/compiler-cli\": \"4.3.5\",\n    \"@angular/core\": \"4.3.5\",\n    \"@angular/forms\": \"4.3.5\",\n    \"@angular/http\": \"4.3.5\",\n    \"@angular/platform-browser\": \"4.3.5\",\n    \"@angular/platform-browser-dynamic\": \"4.3.5\",\n    \"@angular/platform-server\": \"4.3.5\",\n    \"@angular/router\": \"4.3.5\",\n    \"@angular/upgrade\": \"4.3.5\",\n    \"angular-in-memory-web-api\": \"0.3.2\",\n    \"bootstrap\": \"3.3.7\",\n    \"core-js\": \"2.5.0\",\n    \"ie-shim\": \"0.1.0\",\n    \"rxjs\": \"5.4.3\",\n    \"zone.js\": \"0.8.16\",\n    \"systemjs\": \"^0.20.18\"\n  },\n  \"devDependencies\": {\n    \"gulp\": \"^3.9.1\",\n    \"gulp-clean\": \"^0.3.2\",\n    \"gulp-concat\": \"^2.6.1\",\n    \"gulp-tsc\": \"~1.3.2\",\n    \"gulp-typescript\": \"^3.2.2\",\n    \"path\": \"^0.12.7\",\n    \"typescript\": \"^2.4.2\"\n  }\n}\n\n**package.**json contains Angular 2 (using version 4) along with, system.js, RxJs and also some dev dependencies. Open Command Prompt & navigate to package.json location, then run _**npm install**_ this will install packages related to Angular 2 (using version 4) under _node_modules_ folder in your folder structure. They won't be showing in project solution explorer, don't worry they need not show.\n\nStep 2: Configure to transpile TypeScript files\n-----------------------------------------------\n\nTypeScript(TS) would be new for most of the developers, maybe these will give [get started on TypeScript](http://www.mithunvp.com/learning-typescript-with-visual-studio-code/)\n\n> In short - It's superset of JavaScript, means everything you know about JS will be in use.\n\nAll TS files need to be transpiled or compiled to JS files so that we can run them on browser. To accomplish this we need to add \"TypeScript Configuration File\" called as _tsconfig.json_ Create a folder called \"**tsScripts**\" which contains all TS files and also configuration file. Create above tsconfig.json in this folder.\n\n{\n  \"compilerOptions\": {\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"module\": \"commonjs\",\n    \"noEmitOnError\": true,\n    \"noImplicitAny\": false,\n    \"outDir\": \"../Scripts/\",\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"es5\",\n    \"moduleResolution\": \"node\",\n\t\"typeRoots\": \\[\n      \"./node_modules/@types\",\n      \"./node_modules\"\n    \\],\n    \"types\": \\[\n      \"node\"\n\\]\n  },\n  \"exclude\": \\[\n    \"node_modules\" \n  \\]\n}\n\nIt's fairly simple config \"All TS files present in _**tsScripts**_ folder will be transpiled using _**commonjs**_ module to **_outDir_** (Output Directory) by keeping comments, sourceMap intact\" One of the important step is to create _**typings.json**_ file, this file will create typings to ensure that TypeScript understands all Angular 2 (using version 4) modules in respect to ES5 standard. Create JSON file with name \"_**typings.json**_\" & add below code then run command **typings install** from CMD\n\n{\n  \"globalDependencies\": {\n    \"core-js\": \"registry:dt/core-js#0.0.0+20160725163759\",\n    \"jasmine\": \"registry:dt/jasmine#2.2.0+20160621224255\",\n    \"node\": \"registry:dt/node#6.0.0+20160909174046\"\n  }\n}\n\nStep 3: Using gulpfile.js to move files\n---------------------------------------\n\nFrom Step 1 you got to know that all Angular 2, other packages are downloaded into node_modules in your solution folder. Now we need to move required files only like JS, sourcemaps (debugging on chrome) into our MVC 5 apps Scripts folder. Step 2 also requires to move TS files to JavaScript file, so we use create GULP tasks which does this transpile. Also it contains CSS files movement also (which is not relevant at this point) Create gulpfile.js in your project and copy this code\n\nvar ts = require('gulp-typescript');\nvar gulp = require('gulp');\nvar clean = require('gulp-clean');\n\nvar destPath = './libs/';\n\n// Delete the dist directory\ngulp.task('clean', function () {\n    return gulp.src(destPath)\n        .pipe(clean());\n});\n\ngulp.task(\"scriptsNStyles\", function() {\n    gulp.src(\\[\n            'core-js/client/*.js',\n            'systemjs/dist/*.js',\n            'reflect-metadata/*.js',\n            'rxjs/**',\n            'zone.js/dist/*.js',\n            '@angular/**/bundles/*.js',            \n            'bootstrap/dist/js/*.js'\n    \\], {\n        cwd: \"node_modules/**\"\n    })\n        .pipe(gulp.dest(\"./libs\"));\n});\n\nvar tsProject = ts.createProject('tsScripts/tsconfig.json', {\n    typescript: require('typescript')\n});\ngulp.task('ts', function (done) {\n    //var tsResult = tsProject.src()\n    var tsResult = gulp.src(\\[\n            \"tsScripts/*.ts\"\n    \\])\n        .pipe(tsProject(), undefined, ts.reporter.fullReporter());\n    return tsResult.js.pipe(gulp.dest('./Scripts'));\n});\n\ngulp.task('watch', \\['watch.ts'\\]);\n\ngulp.task('watch.ts', \\['ts'\\], function () {\n    return gulp.watch('tsScripts/*.ts', \\['ts'\\]);\n});\n\ngulp.task('default', \\['scriptsNStyles', 'watch'\\]);\n\nStep 4: Add TypeScript files for bootstrapping\n----------------------------------------------\n\nAs we are using Angular 2 with TypeScript, we need to add TS file to bootstrap the Angular app into MVC 5 app. So let's create boot.ts file in \"TsScripts\" folder and copy this code. We using ngModule to browser specifics, AppComponent.\n\n///<reference path=\"./../typings/globals/core-js/index.d.ts\"/>\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app';\n\n@NgModule({\n    imports: \\[BrowserModule \\],\n    declarations: \\[AppComponent\\],\n    bootstrap: \\[AppComponent\\]\n})\nexport class AppModule { }\n\nAppComponent is starter component which we have to create it now (app.ts). Add this code below\n\nimport { Component } from '@angular/core';\n@Component({\n    selector: 'my-app',\n    template: `    \n    <h2>My favorite skill is: { {myskills}}</h2>\n    <p>Skill:</p>\n    <ul>\n      <li *ngFor=\"let skl of skills\">\n        { { skl }}\n      </li>\n    </ul>\n  `\n})\nexport class AppComponent {\n    title = 'ASP.NET MVC 5 with Angular 2';\n    skills = \\['MVC 5', 'Angular 2', 'TypeScript', 'Visual Studio 2015'\\];\n    myskills = this.skills\\[1\\];\n}\n\nThis is template based app component which displays list. Now create **tsScripts/main.ts**, this entry point where Angular 2 loads the components.\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './boot';\nconst platform = platformBrowserDynamic();\nplatform.bootstrapModule(AppModule);\n\nStep 5: Include _systemjs.config.js_ to load modules\n----------------------------------------------------\n\nThis is most important part of Angular 2 (using version 4) which loads it into the browser. There are different ways to load it but am using SystemJS here. In the existing \"_**Scripts**_\" folder, create \"_**systemjs.config.js**_\" and copy below code\n\n/\\*\\*\n \\* System configuration for Angular samples\n \\* Adjust as necessary for your application needs.\n */\n(function (global) {\n    System.config({        \n        paths: {\n            // paths serve as alias\n            'npm:': '/libs/'\n        },\n        // map tells the System loader where to look for things\n        map: {\n            // our app is within the app folder\n            app: '/Scripts',\n            // angular bundles\n            '@angular/core': 'npm:@angular/core/bundles/core.umd.js',\n            '@angular/common': 'npm:@angular/common/bundles/common.umd.js',\n            '@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js',\n            '@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',\n            '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n            '@angular/http': 'npm:@angular/http/bundles/http.umd.js',\n            '@angular/router': 'npm:@angular/router/bundles/router.umd.js',\n            '@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js',\n            // other libraries\n            'rxjs': 'npm:rxjs',\n            'angular-in-memory-web-api': 'npm:angular-in-memory-web-api/bundles/in-memory-web-api.umd.js',\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            app: {\n                main: './main.js',\n                defaultExtension: 'js',\n            },\n            rxjs: {\n                defaultExtension: 'js'\n            }\n        }\n    });\n})(this);\n\nStep 6: Change csHTML to load and render Angular 4\n--------------------------------------------------\n\nTo load Angular 2 in ASP.NET MVC 5, we need to include the script references in _**_Layout**_ file and index.cshtml page.\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@ViewBag.Title - My ASP.NET Application</title>\n\n    <!\\-\\- 1\\. Load libraries -->\n    <!\\-\\- Polyfill(s) for older browsers -->\n\n    <script src=\"~/libs/core-js/client/shim.min.js\"></script>\n    <script src=\"~/libs/zone.js/dist/zone.js\"></script>\n    <script src=\"~/libs/systemjs/dist/system.src.js\"></script>\n\n    <!\\-\\- 2\\. Configure SystemJS -->\n    <script src=\"~/Scripts/systemjs.config.js\"></script>\n    <script>\n        System.import('../Scripts/main').catch(function (err)\n        {\n            console.error(err);\n        });\n    </script>\n\n    @Styles.Render(\"~/Content/css\")\n    @Scripts.Render(\"~/bundles/modernizr\")\n</head>\n<body>\n    <div class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n                <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                </button>\n                @Html.ActionLink(\"Application name\", \"Index\", \"Home\", new { area = \"\" }, new { @class = \"navbar-brand\" })\n            </div>\n            <div class=\"navbar-collapse collapse\">\n                <ul class=\"nav navbar-nav\">\n                    <li>@Html.ActionLink(\"Home\", \"Index\", \"Home\")</li>\n                    <li>@Html.ActionLink(\"About\", \"About\", \"Home\")</li>\n                    <li>@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n    <div class=\"container body-content\">\n        @RenderBody()\n        <hr />\n        <footer>\n            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>\n        </footer>\n    </div>\n\n    @Scripts.Render(\"~/bundles/jquery\")\n    @Scripts.Render(\"~/bundles/bootstrap\")\n    @RenderSection(\"scripts\", required: false)\n</body>\n</html>\n\nIn the Views/Home/index.cshtml you need to add \"**my-app**\" component we defined in app.TS file. This is the starting point of Angular 2 application to render into the browser.\n\n@{\n    ViewBag.Title = \"Home Page\";\n}\n\n<my-app>Loading...</my-app>\n\nNow that we are almost done, we need to run GULP tasks so that Angular 2 files, TS files are moved to an appropriate folder. Open _**Task Runner Explorer**_ in Visual Studio 2015 and run **default** task shown. Its better to do show ALL Files in solution Explorer to see \"_libs_\", \"_typings_\", \"_app.js, boot.js, *.map_\" files. Includes these files and run the application to load Angular 2 in ASP.NET MVC 5. \\[caption id=\"attachment_535\" align=\"aligncenter\" width=\"741\"\\][![ASP.NET MVC 5 Angular 2](http://www.mithunvp.com/wp-content/uploads/2016/07/image.png)](http://www.mithunvp.com/wp-content/uploads/2016/07/image.png) Running Angular 2 in ASP.NET MVC 5\\[/caption\\] The entire source code is on my [Github repo](https://github.com/mithunvp/ng2Mvc5Demo), clone or fork or download it and follow instructions to run it. Let me know in comments if you face any issues running applications.\n\nWith Angular CLI\n----------------\n\nCheck [out this post](http://www.mithunvp.com/angular-asp-net-mvc-5-angular-cli-visual-studio-2017/) to use Angular CLI to integrate Angular with ASP.NET MVC 5","source":"_posts/using-angular-2-asp-net-mvc-5-visual-studio.md","raw":"---\ntitle: ASP.NET MVC 5 - Using Angular 4 with TypeScript in Visual Studio\ntags:\n  - Angular2\n  - ASP.NET MVC 5\nurl: 518.html\nid: 518\ncategories:\n  - Angular 2\ndate: 2016-07-28 18:56:39\n---\n\nASP.NET MVC 5 is widely used web development framework, it's stable, matured and most importantly its is used in production on large scale. Many folks had requested me to write how to wire up Angular 2 in MVC 5.\n\n*   **Update 23/8/17 - Github repo updated with Angular 4.3.5, TypeScript 2.4**\n*   Update 26/5/17 - Github repo updated with Angular 4.1, TypeScript 2.3\n*   Update 31/3/17 - Github repo updated with **Angular 4**, TypeScript 2.1. Angular 4 is backward compatible with Angular 2 with much-reduced bundle sizes.\n*   Update 26/9 - Github repo updated with Angular 2 Final release version. Install TypeScript 2.0 RC\n\nThese steps can be used for new or existing MVC 5 application. In this post, I will summarize the steps needed to getting started with Angular 2 in MVC 5.\n\n> ASP.NET MVC 5 is full .NET framework web development framework, it's different from ASP.NET Core 1.0\n\nWhat will we learn?\n\n1.  Adding package.json to MVC 5\n2.  Configure to transpile TypeScript files\n3.  Using gulpfile.js to move files.\n4.  Add TypeScript files for bootstrapping\n5.  Include systemjs.config.js to load Angular 2 modules\n6.  Change HTML to load and render Angular\n\nStep 1: Adding _**package.json**_ to ASP.NET MVC 5\n--------------------------------------------------\n\nAssuming that you already have existing or created new ASP.NET MVC 5. Let's add _**NPM configuration file**_ known as _package.json_. It contains Angular 4 (works for Angular 2) & related package name to installed using NPM (Node). This is similar to package.config of NuGet.\n\n> Latest NodeJS & NPM needs to be installed.\n\n{\n  \"version\": \"1.0.0\",\n  \"name\": \"aspnet\",\n  \"private\": true,\n  \"scripts\": {},\n  \"dependencies\": {\n    \"@angular/animations\": \"4.3.5\",\n    \"@angular/common\": \"4.3.5\",\n    \"@angular/compiler\": \"4.3.5\",\n    \"@angular/compiler-cli\": \"4.3.5\",\n    \"@angular/core\": \"4.3.5\",\n    \"@angular/forms\": \"4.3.5\",\n    \"@angular/http\": \"4.3.5\",\n    \"@angular/platform-browser\": \"4.3.5\",\n    \"@angular/platform-browser-dynamic\": \"4.3.5\",\n    \"@angular/platform-server\": \"4.3.5\",\n    \"@angular/router\": \"4.3.5\",\n    \"@angular/upgrade\": \"4.3.5\",\n    \"angular-in-memory-web-api\": \"0.3.2\",\n    \"bootstrap\": \"3.3.7\",\n    \"core-js\": \"2.5.0\",\n    \"ie-shim\": \"0.1.0\",\n    \"rxjs\": \"5.4.3\",\n    \"zone.js\": \"0.8.16\",\n    \"systemjs\": \"^0.20.18\"\n  },\n  \"devDependencies\": {\n    \"gulp\": \"^3.9.1\",\n    \"gulp-clean\": \"^0.3.2\",\n    \"gulp-concat\": \"^2.6.1\",\n    \"gulp-tsc\": \"~1.3.2\",\n    \"gulp-typescript\": \"^3.2.2\",\n    \"path\": \"^0.12.7\",\n    \"typescript\": \"^2.4.2\"\n  }\n}\n\n**package.**json contains Angular 2 (using version 4) along with, system.js, RxJs and also some dev dependencies. Open Command Prompt & navigate to package.json location, then run _**npm install**_ this will install packages related to Angular 2 (using version 4) under _node_modules_ folder in your folder structure. They won't be showing in project solution explorer, don't worry they need not show.\n\nStep 2: Configure to transpile TypeScript files\n-----------------------------------------------\n\nTypeScript(TS) would be new for most of the developers, maybe these will give [get started on TypeScript](http://www.mithunvp.com/learning-typescript-with-visual-studio-code/)\n\n> In short - It's superset of JavaScript, means everything you know about JS will be in use.\n\nAll TS files need to be transpiled or compiled to JS files so that we can run them on browser. To accomplish this we need to add \"TypeScript Configuration File\" called as _tsconfig.json_ Create a folder called \"**tsScripts**\" which contains all TS files and also configuration file. Create above tsconfig.json in this folder.\n\n{\n  \"compilerOptions\": {\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"module\": \"commonjs\",\n    \"noEmitOnError\": true,\n    \"noImplicitAny\": false,\n    \"outDir\": \"../Scripts/\",\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"es5\",\n    \"moduleResolution\": \"node\",\n\t\"typeRoots\": \\[\n      \"./node_modules/@types\",\n      \"./node_modules\"\n    \\],\n    \"types\": \\[\n      \"node\"\n\\]\n  },\n  \"exclude\": \\[\n    \"node_modules\" \n  \\]\n}\n\nIt's fairly simple config \"All TS files present in _**tsScripts**_ folder will be transpiled using _**commonjs**_ module to **_outDir_** (Output Directory) by keeping comments, sourceMap intact\" One of the important step is to create _**typings.json**_ file, this file will create typings to ensure that TypeScript understands all Angular 2 (using version 4) modules in respect to ES5 standard. Create JSON file with name \"_**typings.json**_\" & add below code then run command **typings install** from CMD\n\n{\n  \"globalDependencies\": {\n    \"core-js\": \"registry:dt/core-js#0.0.0+20160725163759\",\n    \"jasmine\": \"registry:dt/jasmine#2.2.0+20160621224255\",\n    \"node\": \"registry:dt/node#6.0.0+20160909174046\"\n  }\n}\n\nStep 3: Using gulpfile.js to move files\n---------------------------------------\n\nFrom Step 1 you got to know that all Angular 2, other packages are downloaded into node_modules in your solution folder. Now we need to move required files only like JS, sourcemaps (debugging on chrome) into our MVC 5 apps Scripts folder. Step 2 also requires to move TS files to JavaScript file, so we use create GULP tasks which does this transpile. Also it contains CSS files movement also (which is not relevant at this point) Create gulpfile.js in your project and copy this code\n\nvar ts = require('gulp-typescript');\nvar gulp = require('gulp');\nvar clean = require('gulp-clean');\n\nvar destPath = './libs/';\n\n// Delete the dist directory\ngulp.task('clean', function () {\n    return gulp.src(destPath)\n        .pipe(clean());\n});\n\ngulp.task(\"scriptsNStyles\", function() {\n    gulp.src(\\[\n            'core-js/client/*.js',\n            'systemjs/dist/*.js',\n            'reflect-metadata/*.js',\n            'rxjs/**',\n            'zone.js/dist/*.js',\n            '@angular/**/bundles/*.js',            \n            'bootstrap/dist/js/*.js'\n    \\], {\n        cwd: \"node_modules/**\"\n    })\n        .pipe(gulp.dest(\"./libs\"));\n});\n\nvar tsProject = ts.createProject('tsScripts/tsconfig.json', {\n    typescript: require('typescript')\n});\ngulp.task('ts', function (done) {\n    //var tsResult = tsProject.src()\n    var tsResult = gulp.src(\\[\n            \"tsScripts/*.ts\"\n    \\])\n        .pipe(tsProject(), undefined, ts.reporter.fullReporter());\n    return tsResult.js.pipe(gulp.dest('./Scripts'));\n});\n\ngulp.task('watch', \\['watch.ts'\\]);\n\ngulp.task('watch.ts', \\['ts'\\], function () {\n    return gulp.watch('tsScripts/*.ts', \\['ts'\\]);\n});\n\ngulp.task('default', \\['scriptsNStyles', 'watch'\\]);\n\nStep 4: Add TypeScript files for bootstrapping\n----------------------------------------------\n\nAs we are using Angular 2 with TypeScript, we need to add TS file to bootstrap the Angular app into MVC 5 app. So let's create boot.ts file in \"TsScripts\" folder and copy this code. We using ngModule to browser specifics, AppComponent.\n\n///<reference path=\"./../typings/globals/core-js/index.d.ts\"/>\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app';\n\n@NgModule({\n    imports: \\[BrowserModule \\],\n    declarations: \\[AppComponent\\],\n    bootstrap: \\[AppComponent\\]\n})\nexport class AppModule { }\n\nAppComponent is starter component which we have to create it now (app.ts). Add this code below\n\nimport { Component } from '@angular/core';\n@Component({\n    selector: 'my-app',\n    template: `    \n    <h2>My favorite skill is: { {myskills}}</h2>\n    <p>Skill:</p>\n    <ul>\n      <li *ngFor=\"let skl of skills\">\n        { { skl }}\n      </li>\n    </ul>\n  `\n})\nexport class AppComponent {\n    title = 'ASP.NET MVC 5 with Angular 2';\n    skills = \\['MVC 5', 'Angular 2', 'TypeScript', 'Visual Studio 2015'\\];\n    myskills = this.skills\\[1\\];\n}\n\nThis is template based app component which displays list. Now create **tsScripts/main.ts**, this entry point where Angular 2 loads the components.\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './boot';\nconst platform = platformBrowserDynamic();\nplatform.bootstrapModule(AppModule);\n\nStep 5: Include _systemjs.config.js_ to load modules\n----------------------------------------------------\n\nThis is most important part of Angular 2 (using version 4) which loads it into the browser. There are different ways to load it but am using SystemJS here. In the existing \"_**Scripts**_\" folder, create \"_**systemjs.config.js**_\" and copy below code\n\n/\\*\\*\n \\* System configuration for Angular samples\n \\* Adjust as necessary for your application needs.\n */\n(function (global) {\n    System.config({        \n        paths: {\n            // paths serve as alias\n            'npm:': '/libs/'\n        },\n        // map tells the System loader where to look for things\n        map: {\n            // our app is within the app folder\n            app: '/Scripts',\n            // angular bundles\n            '@angular/core': 'npm:@angular/core/bundles/core.umd.js',\n            '@angular/common': 'npm:@angular/common/bundles/common.umd.js',\n            '@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js',\n            '@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',\n            '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n            '@angular/http': 'npm:@angular/http/bundles/http.umd.js',\n            '@angular/router': 'npm:@angular/router/bundles/router.umd.js',\n            '@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js',\n            // other libraries\n            'rxjs': 'npm:rxjs',\n            'angular-in-memory-web-api': 'npm:angular-in-memory-web-api/bundles/in-memory-web-api.umd.js',\n        },\n        // packages tells the System loader how to load when no filename and/or no extension\n        packages: {\n            app: {\n                main: './main.js',\n                defaultExtension: 'js',\n            },\n            rxjs: {\n                defaultExtension: 'js'\n            }\n        }\n    });\n})(this);\n\nStep 6: Change csHTML to load and render Angular 4\n--------------------------------------------------\n\nTo load Angular 2 in ASP.NET MVC 5, we need to include the script references in _**_Layout**_ file and index.cshtml page.\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@ViewBag.Title - My ASP.NET Application</title>\n\n    <!\\-\\- 1\\. Load libraries -->\n    <!\\-\\- Polyfill(s) for older browsers -->\n\n    <script src=\"~/libs/core-js/client/shim.min.js\"></script>\n    <script src=\"~/libs/zone.js/dist/zone.js\"></script>\n    <script src=\"~/libs/systemjs/dist/system.src.js\"></script>\n\n    <!\\-\\- 2\\. Configure SystemJS -->\n    <script src=\"~/Scripts/systemjs.config.js\"></script>\n    <script>\n        System.import('../Scripts/main').catch(function (err)\n        {\n            console.error(err);\n        });\n    </script>\n\n    @Styles.Render(\"~/Content/css\")\n    @Scripts.Render(\"~/bundles/modernizr\")\n</head>\n<body>\n    <div class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container\">\n            <div class=\"navbar-header\">\n                <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                    <span class=\"icon-bar\"></span>\n                </button>\n                @Html.ActionLink(\"Application name\", \"Index\", \"Home\", new { area = \"\" }, new { @class = \"navbar-brand\" })\n            </div>\n            <div class=\"navbar-collapse collapse\">\n                <ul class=\"nav navbar-nav\">\n                    <li>@Html.ActionLink(\"Home\", \"Index\", \"Home\")</li>\n                    <li>@Html.ActionLink(\"About\", \"About\", \"Home\")</li>\n                    <li>@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n    <div class=\"container body-content\">\n        @RenderBody()\n        <hr />\n        <footer>\n            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>\n        </footer>\n    </div>\n\n    @Scripts.Render(\"~/bundles/jquery\")\n    @Scripts.Render(\"~/bundles/bootstrap\")\n    @RenderSection(\"scripts\", required: false)\n</body>\n</html>\n\nIn the Views/Home/index.cshtml you need to add \"**my-app**\" component we defined in app.TS file. This is the starting point of Angular 2 application to render into the browser.\n\n@{\n    ViewBag.Title = \"Home Page\";\n}\n\n<my-app>Loading...</my-app>\n\nNow that we are almost done, we need to run GULP tasks so that Angular 2 files, TS files are moved to an appropriate folder. Open _**Task Runner Explorer**_ in Visual Studio 2015 and run **default** task shown. Its better to do show ALL Files in solution Explorer to see \"_libs_\", \"_typings_\", \"_app.js, boot.js, *.map_\" files. Includes these files and run the application to load Angular 2 in ASP.NET MVC 5. \\[caption id=\"attachment_535\" align=\"aligncenter\" width=\"741\"\\][![ASP.NET MVC 5 Angular 2](http://www.mithunvp.com/wp-content/uploads/2016/07/image.png)](http://www.mithunvp.com/wp-content/uploads/2016/07/image.png) Running Angular 2 in ASP.NET MVC 5\\[/caption\\] The entire source code is on my [Github repo](https://github.com/mithunvp/ng2Mvc5Demo), clone or fork or download it and follow instructions to run it. Let me know in comments if you face any issues running applications.\n\nWith Angular CLI\n----------------\n\nCheck [out this post](http://www.mithunvp.com/angular-asp-net-mvc-5-angular-cli-visual-studio-2017/) to use Angular CLI to integrate Angular with ASP.NET MVC 5","slug":"using-angular-2-asp-net-mvc-5-visual-studio","published":1,"updated":"2018-07-10T19:49:06.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034x5001us4tjgsajzd8x","content":"<p>ASP.NET MVC 5 is widely used web development framework, it’s stable, matured and most importantly its is used in production on large scale. Many folks had requested me to write how to wire up Angular 2 in MVC 5.</p>\n<ul>\n<li><strong>Update 23/8/17 - Github repo updated with Angular 4.3.5, TypeScript 2.4</strong></li>\n<li>Update 26/5/17 - Github repo updated with Angular 4.1, TypeScript 2.3</li>\n<li>Update 31/3/17 - Github repo updated with <strong>Angular 4</strong>, TypeScript 2.1. Angular 4 is backward compatible with Angular 2 with much-reduced bundle sizes.</li>\n<li>Update 26/9 - Github repo updated with Angular 2 Final release version. Install TypeScript 2.0 RC</li>\n</ul>\n<p>These steps can be used for new or existing MVC 5 application. In this post, I will summarize the steps needed to getting started with Angular 2 in MVC 5.</p>\n<blockquote>\n<p>ASP.NET MVC 5 is full .NET framework web development framework, it’s different from ASP.NET Core 1.0</p>\n</blockquote>\n<p>What will we learn?</p>\n<ol>\n<li>Adding package.json to MVC 5</li>\n<li>Configure to transpile TypeScript files</li>\n<li>Using gulpfile.js to move files.</li>\n<li>Add TypeScript files for bootstrapping</li>\n<li>Include systemjs.config.js to load Angular 2 modules</li>\n<li>Change HTML to load and render Angular</li>\n</ol>\n<h2 id=\"Step-1-Adding-package-json-to-ASP-NET-MVC-5\"><a href=\"#Step-1-Adding-package-json-to-ASP-NET-MVC-5\" class=\"headerlink\" title=\"Step 1: Adding package.json to ASP.NET MVC 5\"></a>Step 1: Adding <em><strong>package.json</strong></em> to ASP.NET MVC 5</h2><p>Assuming that you already have existing or created new ASP.NET MVC 5. Let’s add <em><strong>NPM configuration file</strong></em> known as <em>package.json</em>. It contains Angular 4 (works for Angular 2) &amp; related package name to installed using NPM (Node). This is similar to package.config of NuGet.</p>\n<blockquote>\n<p>Latest NodeJS &amp; NPM needs to be installed.</p>\n</blockquote>\n<p>{<br>  “version”: “1.0.0”,<br>  “name”: “aspnet”,<br>  “private”: true,<br>  “scripts”: {},<br>  “dependencies”: {<br>    “@angular/animations”: “4.3.5”,<br>    “@angular/common”: “4.3.5”,<br>    “@angular/compiler”: “4.3.5”,<br>    “@angular/compiler-cli”: “4.3.5”,<br>    “@angular/core”: “4.3.5”,<br>    “@angular/forms”: “4.3.5”,<br>    “@angular/http”: “4.3.5”,<br>    “@angular/platform-browser”: “4.3.5”,<br>    “@angular/platform-browser-dynamic”: “4.3.5”,<br>    “@angular/platform-server”: “4.3.5”,<br>    “@angular/router”: “4.3.5”,<br>    “@angular/upgrade”: “4.3.5”,<br>    “angular-in-memory-web-api”: “0.3.2”,<br>    “bootstrap”: “3.3.7”,<br>    “core-js”: “2.5.0”,<br>    “ie-shim”: “0.1.0”,<br>    “rxjs”: “5.4.3”,<br>    “zone.js”: “0.8.16”,<br>    “systemjs”: “^0.20.18”<br>  },<br>  “devDependencies”: {<br>    “gulp”: “^3.9.1”,<br>    “gulp-clean”: “^0.3.2”,<br>    “gulp-concat”: “^2.6.1”,<br>    “gulp-tsc”: “~1.3.2”,<br>    “gulp-typescript”: “^3.2.2”,<br>    “path”: “^0.12.7”,<br>    “typescript”: “^2.4.2”<br>  }<br>}</p>\n<p><strong>package.</strong>json contains Angular 2 (using version 4) along with, system.js, RxJs and also some dev dependencies. Open Command Prompt &amp; navigate to package.json location, then run <em><strong>npm install</strong></em> this will install packages related to Angular 2 (using version 4) under _node_modules_ folder in your folder structure. They won’t be showing in project solution explorer, don’t worry they need not show.</p>\n<h2 id=\"Step-2-Configure-to-transpile-TypeScript-files\"><a href=\"#Step-2-Configure-to-transpile-TypeScript-files\" class=\"headerlink\" title=\"Step 2: Configure to transpile TypeScript files\"></a>Step 2: Configure to transpile TypeScript files</h2><p>TypeScript(TS) would be new for most of the developers, maybe these will give <a href=\"http://www.mithunvp.com/learning-typescript-with-visual-studio-code/\">get started on TypeScript</a></p>\n<blockquote>\n<p>In short - It’s superset of JavaScript, means everything you know about JS will be in use.</p>\n</blockquote>\n<p>All TS files need to be transpiled or compiled to JS files so that we can run them on browser. To accomplish this we need to add “TypeScript Configuration File” called as <em>tsconfig.json</em> Create a folder called “<strong>tsScripts</strong>“ which contains all TS files and also configuration file. Create above tsconfig.json in this folder.</p>\n<p>{<br>  “compilerOptions”: {<br>    “emitDecoratorMetadata”: true,<br>    “experimentalDecorators”: true,<br>    “module”: “commonjs”,<br>    “noEmitOnError”: true,<br>    “noImplicitAny”: false,<br>    “outDir”: “../Scripts/“,<br>    “removeComments”: false,<br>    “sourceMap”: true,<br>    “target”: “es5”,<br>    “moduleResolution”: “node”,<br>    “typeRoots”: [<br>      “./node_modules/@types”,<br>      “./node_modules”<br>    ],<br>    “types”: [<br>      “node”<br>]<br>  },<br>  “exclude”: [<br>    “node_modules”<br>  ]<br>}</p>\n<p>It’s fairly simple config “All TS files present in <em><strong>tsScripts</strong></em> folder will be transpiled using <em><strong>commonjs</strong></em> module to <strong><em>outDir</em></strong> (Output Directory) by keeping comments, sourceMap intact” One of the important step is to create <em><strong>typings.json</strong></em> file, this file will create typings to ensure that TypeScript understands all Angular 2 (using version 4) modules in respect to ES5 standard. Create JSON file with name “<em><strong>typings.json</strong></em>“ &amp; add below code then run command <strong>typings install</strong> from CMD</p>\n<p>{<br>  “globalDependencies”: {<br>    “core-js”: “registry:dt/core-js#0.0.0+20160725163759”,<br>    “jasmine”: “registry:dt/jasmine#2.2.0+20160621224255”,<br>    “node”: “registry:dt/node#6.0.0+20160909174046”<br>  }<br>}</p>\n<h2 id=\"Step-3-Using-gulpfile-js-to-move-files\"><a href=\"#Step-3-Using-gulpfile-js-to-move-files\" class=\"headerlink\" title=\"Step 3: Using gulpfile.js to move files\"></a>Step 3: Using gulpfile.js to move files</h2><p>From Step 1 you got to know that all Angular 2, other packages are downloaded into node_modules in your solution folder. Now we need to move required files only like JS, sourcemaps (debugging on chrome) into our MVC 5 apps Scripts folder. Step 2 also requires to move TS files to JavaScript file, so we use create GULP tasks which does this transpile. Also it contains CSS files movement also (which is not relevant at this point) Create gulpfile.js in your project and copy this code</p>\n<p>var ts = require(‘gulp-typescript’);<br>var gulp = require(‘gulp’);<br>var clean = require(‘gulp-clean’);</p>\n<p>var destPath = ‘./libs/‘;</p>\n<p>// Delete the dist directory<br>gulp.task(‘clean’, function () {<br>    return gulp.src(destPath)<br>        .pipe(clean());<br>});</p>\n<p>gulp.task(“scriptsNStyles”, function() {<br>    gulp.src([<br>            ‘core-js/client/<em>.js’,<br>            ‘systemjs/dist/</em>.js’,<br>            ‘reflect-metadata/<em>.js’,<br>            ‘rxjs/**’,<br>            ‘zone.js/dist/</em>.js’,<br>            ‘@angular/<strong>/bundles/<em>.js’,<br>            ‘bootstrap/dist/js/</em>.js’<br>    ], {<br>        cwd: “node_modules/</strong>“<br>    })<br>        .pipe(gulp.dest(“./libs”));<br>});</p>\n<p>var tsProject = ts.createProject(‘tsScripts/tsconfig.json’, {<br>    typescript: require(‘typescript’)<br>});<br>gulp.task(‘ts’, function (done) {<br>    //var tsResult = tsProject.src()<br>    var tsResult = gulp.src([<br>            “tsScripts/*.ts”<br>    ])<br>        .pipe(tsProject(), undefined, ts.reporter.fullReporter());<br>    return tsResult.js.pipe(gulp.dest(‘./Scripts’));<br>});</p>\n<p>gulp.task(‘watch’, [‘watch.ts’]);</p>\n<p>gulp.task(‘watch.ts’, [‘ts’], function () {<br>    return gulp.watch(‘tsScripts/*.ts’, [‘ts’]);<br>});</p>\n<p>gulp.task(‘default’, [‘scriptsNStyles’, ‘watch’]);</p>\n<h2 id=\"Step-4-Add-TypeScript-files-for-bootstrapping\"><a href=\"#Step-4-Add-TypeScript-files-for-bootstrapping\" class=\"headerlink\" title=\"Step 4: Add TypeScript files for bootstrapping\"></a>Step 4: Add TypeScript files for bootstrapping</h2><p>As we are using Angular 2 with TypeScript, we need to add TS file to bootstrap the Angular app into MVC 5 app. So let’s create boot.ts file in “TsScripts” folder and copy this code. We using ngModule to browser specifics, AppComponent.</p>\n<p>///<reference path=\"./../typings/globals/core-js/index.d.ts\"><br>import { NgModule } from ‘@angular/core’;<br>import { BrowserModule } from ‘@angular/platform-browser’;<br>import { AppComponent } from ‘./app’;</reference></p>\n<p>@NgModule({<br>    imports: [BrowserModule ],<br>    declarations: [AppComponent],<br>    bootstrap: [AppComponent]<br>})<br>export class AppModule { }</p>\n<p>AppComponent is starter component which we have to create it now (app.ts). Add this code below</p>\n<p>import { Component } from ‘@angular/core’;<br>@Component({<br>    selector: ‘my-app’,<br>    template: <code>&lt;h2&gt;My favorite skill is: { {myskills}}&lt;/h2&gt;\n    &lt;p&gt;Skill:&lt;/p&gt;\n    &lt;ul&gt;\n      &lt;li *ngFor=&quot;let skl of skills&quot;&gt;\n        { { skl }}\n      &lt;/li&gt;\n    &lt;/ul&gt;</code><br>})<br>export class AppComponent {<br>    title = ‘ASP.NET MVC 5 with Angular 2’;<br>    skills = [‘MVC 5’, ‘Angular 2’, ‘TypeScript’, ‘Visual Studio 2015’];<br>    myskills = this.skills[1];<br>}</p>\n<p>This is template based app component which displays list. Now create <strong>tsScripts/main.ts</strong>, this entry point where Angular 2 loads the components.</p>\n<p>import { platformBrowserDynamic } from ‘@angular/platform-browser-dynamic’;<br>import { AppModule } from ‘./boot’;<br>const platform = platformBrowserDynamic();<br>platform.bootstrapModule(AppModule);</p>\n<h2 id=\"Step-5-Include-systemjs-config-js-to-load-modules\"><a href=\"#Step-5-Include-systemjs-config-js-to-load-modules\" class=\"headerlink\" title=\"Step 5: Include systemjs.config.js to load modules\"></a>Step 5: Include <em>systemjs.config.js</em> to load modules</h2><p>This is most important part of Angular 2 (using version 4) which loads it into the browser. There are different ways to load it but am using SystemJS here. In the existing “<em><strong>Scripts</strong></em>“ folder, create “<em><strong>systemjs.config.js</strong></em>“ and copy below code</p>\n<p>/**<br> * System configuration for Angular samples<br> * Adjust as necessary for your application needs.<br> */<br>(function (global) {<br>    System.config({<br>        paths: {<br>            // paths serve as alias<br>            ‘npm:’: ‘/libs/‘<br>        },<br>        // map tells the System loader where to look for things<br>        map: {<br>            // our app is within the app folder<br>            app: ‘/Scripts’,<br>            // angular bundles<br>            ‘@angular/core’: ‘npm:@angular/core/bundles/core.umd.js’,<br>            ‘@angular/common’: ‘npm:@angular/common/bundles/common.umd.js’,<br>            ‘@angular/compiler’: ‘npm:@angular/compiler/bundles/compiler.umd.js’,<br>            ‘@angular/platform-browser’: ‘npm:@angular/platform-browser/bundles/platform-browser.umd.js’,<br>            ‘@angular/platform-browser-dynamic’: ‘npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js’,<br>            ‘@angular/http’: ‘npm:@angular/http/bundles/http.umd.js’,<br>            ‘@angular/router’: ‘npm:@angular/router/bundles/router.umd.js’,<br>            ‘@angular/forms’: ‘npm:@angular/forms/bundles/forms.umd.js’,<br>            // other libraries<br>            ‘rxjs’: ‘npm:rxjs’,<br>            ‘angular-in-memory-web-api’: ‘npm:angular-in-memory-web-api/bundles/in-memory-web-api.umd.js’,<br>        },<br>        // packages tells the System loader how to load when no filename and/or no extension<br>        packages: {<br>            app: {<br>                main: ‘./main.js’,<br>                defaultExtension: ‘js’,<br>            },<br>            rxjs: {<br>                defaultExtension: ‘js’<br>            }<br>        }<br>    });<br>})(this);</p>\n<h2 id=\"Step-6-Change-csHTML-to-load-and-render-Angular-4\"><a href=\"#Step-6-Change-csHTML-to-load-and-render-Angular-4\" class=\"headerlink\" title=\"Step 6: Change csHTML to load and render Angular 4\"></a>Step 6: Change csHTML to load and render Angular 4</h2><p>To load Angular 2 in ASP.NET MVC 5, we need to include the script references in _<strong>_Layout</strong>_ file and index.cshtml page.</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<html><br><head><br>    <meta charset=\"utf-8\"><br>    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><br>    <title>@ViewBag.Title - My ASP.NET Application</title><br><br>    &lt;!-- 1. Load libraries –&gt;<br>    &lt;!-- Polyfill(s) for older browsers –&gt;<br><br>    <script src=\"~/libs/core-js/client/shim.min.js\"></script><br>    <script src=\"~/libs/zone.js/dist/zone.js\"></script><br>    <script src=\"~/libs/systemjs/dist/system.src.js\"></script><br><br>    &lt;!-- 2. Configure SystemJS –&gt;<br>    <script src=\"~/Scripts/systemjs.config.js\"></script><br>    <script><br>        System.import(‘../Scripts/main’).catch(function (err)<br>        {<br>            console.error(err);<br>        });<br>    </script><br><br>    @Styles.Render(“~/Content/css”)<br>    @Scripts.Render(“~/bundles/modernizr”)<br></head><br><body><br>    <div class=\"navbar navbar-inverse navbar-fixed-top\"><br>        <div class=\"container\"><br>            <div class=\"navbar-header\"><br>                <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\"><br>                    <span class=\"icon-bar\"></span><br>                    <span class=\"icon-bar\"></span><br>                    <span class=\"icon-bar\"></span><br>                </button><br>                @Html.ActionLink(“Application name”, “Index”, “Home”, new { area = “” }, new { @class = “navbar-brand” })<br>            </div><br>            <div class=\"navbar-collapse collapse\"><br>                <ul class=\"nav navbar-nav\"><br>                    <li>@Html.ActionLink(“Home”, “Index”, “Home”)</li><br>                    <li>@Html.ActionLink(“About”, “About”, “Home”)</li><br>                    <li>@Html.ActionLink(“Contact”, “Contact”, “Home”)</li><br>                </ul><br>            </div><br>        </div><br>    </div><br>    <div class=\"container body-content\"><br>        @RenderBody()<br>        <hr><br>        <footer><br>            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p><br>        </footer><br>    </div><br><br>    @Scripts.Render(“~/bundles/jquery”)<br>    @Scripts.Render(“~/bundles/bootstrap”)<br>    @RenderSection(“scripts”, required: false)<br></body><br></html>\n\n<p>In the Views/Home/index.cshtml you need to add “<strong>my-app</strong>“ component we defined in app.TS file. This is the starting point of Angular 2 application to render into the browser.</p>\n<p>@{<br>    ViewBag.Title = “Home Page”;<br>}</p>\n<p><my-app>Loading…</my-app></p>\n<p>Now that we are almost done, we need to run GULP tasks so that Angular 2 files, TS files are moved to an appropriate folder. Open <em><strong>Task Runner Explorer</strong></em> in Visual Studio 2015 and run <strong>default</strong> task shown. Its better to do show ALL Files in solution Explorer to see “<em>libs</em>“, “<em>typings</em>“, “<em>app.js, boot.js, *.map</em>“ files. Includes these files and run the application to load Angular 2 in ASP.NET MVC 5. [caption id=”attachment_535” align=”aligncenter” width=”741”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/07/image.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/07/image.png\" alt=\"ASP.NET MVC 5 Angular 2\"></a> Running Angular 2 in ASP.NET MVC 5[/caption] The entire source code is on my <a href=\"https://github.com/mithunvp/ng2Mvc5Demo\" target=\"_blank\" rel=\"noopener\">Github repo</a>, clone or fork or download it and follow instructions to run it. Let me know in comments if you face any issues running applications.</p>\n<h2 id=\"With-Angular-CLI\"><a href=\"#With-Angular-CLI\" class=\"headerlink\" title=\"With Angular CLI\"></a>With Angular CLI</h2><p>Check <a href=\"http://www.mithunvp.com/angular-asp-net-mvc-5-angular-cli-visual-studio-2017/\">out this post</a> to use Angular CLI to integrate Angular with ASP.NET MVC 5</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ASP.NET MVC 5 is widely used web development framework, it’s stable, matured and most importantly its is used in production on large scale. Many folks had requested me to write how to wire up Angular 2 in MVC 5.</p>\n<ul>\n<li><strong>Update 23/8/17 - Github repo updated with Angular 4.3.5, TypeScript 2.4</strong></li>\n<li>Update 26/5/17 - Github repo updated with Angular 4.1, TypeScript 2.3</li>\n<li>Update 31/3/17 - Github repo updated with <strong>Angular 4</strong>, TypeScript 2.1. Angular 4 is backward compatible with Angular 2 with much-reduced bundle sizes.</li>\n<li>Update 26/9 - Github repo updated with Angular 2 Final release version. Install TypeScript 2.0 RC</li>\n</ul>\n<p>These steps can be used for new or existing MVC 5 application. In this post, I will summarize the steps needed to getting started with Angular 2 in MVC 5.</p>\n<blockquote>\n<p>ASP.NET MVC 5 is full .NET framework web development framework, it’s different from ASP.NET Core 1.0</p>\n</blockquote>\n<p>What will we learn?</p>\n<ol>\n<li>Adding package.json to MVC 5</li>\n<li>Configure to transpile TypeScript files</li>\n<li>Using gulpfile.js to move files.</li>\n<li>Add TypeScript files for bootstrapping</li>\n<li>Include systemjs.config.js to load Angular 2 modules</li>\n<li>Change HTML to load and render Angular</li>\n</ol>\n<h2 id=\"Step-1-Adding-package-json-to-ASP-NET-MVC-5\"><a href=\"#Step-1-Adding-package-json-to-ASP-NET-MVC-5\" class=\"headerlink\" title=\"Step 1: Adding package.json to ASP.NET MVC 5\"></a>Step 1: Adding <em><strong>package.json</strong></em> to ASP.NET MVC 5</h2><p>Assuming that you already have existing or created new ASP.NET MVC 5. Let’s add <em><strong>NPM configuration file</strong></em> known as <em>package.json</em>. It contains Angular 4 (works for Angular 2) &amp; related package name to installed using NPM (Node). This is similar to package.config of NuGet.</p>\n<blockquote>\n<p>Latest NodeJS &amp; NPM needs to be installed.</p>\n</blockquote>\n<p>{<br>  “version”: “1.0.0”,<br>  “name”: “aspnet”,<br>  “private”: true,<br>  “scripts”: {},<br>  “dependencies”: {<br>    “@angular/animations”: “4.3.5”,<br>    “@angular/common”: “4.3.5”,<br>    “@angular/compiler”: “4.3.5”,<br>    “@angular/compiler-cli”: “4.3.5”,<br>    “@angular/core”: “4.3.5”,<br>    “@angular/forms”: “4.3.5”,<br>    “@angular/http”: “4.3.5”,<br>    “@angular/platform-browser”: “4.3.5”,<br>    “@angular/platform-browser-dynamic”: “4.3.5”,<br>    “@angular/platform-server”: “4.3.5”,<br>    “@angular/router”: “4.3.5”,<br>    “@angular/upgrade”: “4.3.5”,<br>    “angular-in-memory-web-api”: “0.3.2”,<br>    “bootstrap”: “3.3.7”,<br>    “core-js”: “2.5.0”,<br>    “ie-shim”: “0.1.0”,<br>    “rxjs”: “5.4.3”,<br>    “zone.js”: “0.8.16”,<br>    “systemjs”: “^0.20.18”<br>  },<br>  “devDependencies”: {<br>    “gulp”: “^3.9.1”,<br>    “gulp-clean”: “^0.3.2”,<br>    “gulp-concat”: “^2.6.1”,<br>    “gulp-tsc”: “~1.3.2”,<br>    “gulp-typescript”: “^3.2.2”,<br>    “path”: “^0.12.7”,<br>    “typescript”: “^2.4.2”<br>  }<br>}</p>\n<p><strong>package.</strong>json contains Angular 2 (using version 4) along with, system.js, RxJs and also some dev dependencies. Open Command Prompt &amp; navigate to package.json location, then run <em><strong>npm install</strong></em> this will install packages related to Angular 2 (using version 4) under _node_modules_ folder in your folder structure. They won’t be showing in project solution explorer, don’t worry they need not show.</p>\n<h2 id=\"Step-2-Configure-to-transpile-TypeScript-files\"><a href=\"#Step-2-Configure-to-transpile-TypeScript-files\" class=\"headerlink\" title=\"Step 2: Configure to transpile TypeScript files\"></a>Step 2: Configure to transpile TypeScript files</h2><p>TypeScript(TS) would be new for most of the developers, maybe these will give <a href=\"http://www.mithunvp.com/learning-typescript-with-visual-studio-code/\">get started on TypeScript</a></p>\n<blockquote>\n<p>In short - It’s superset of JavaScript, means everything you know about JS will be in use.</p>\n</blockquote>\n<p>All TS files need to be transpiled or compiled to JS files so that we can run them on browser. To accomplish this we need to add “TypeScript Configuration File” called as <em>tsconfig.json</em> Create a folder called “<strong>tsScripts</strong>“ which contains all TS files and also configuration file. Create above tsconfig.json in this folder.</p>\n<p>{<br>  “compilerOptions”: {<br>    “emitDecoratorMetadata”: true,<br>    “experimentalDecorators”: true,<br>    “module”: “commonjs”,<br>    “noEmitOnError”: true,<br>    “noImplicitAny”: false,<br>    “outDir”: “../Scripts/“,<br>    “removeComments”: false,<br>    “sourceMap”: true,<br>    “target”: “es5”,<br>    “moduleResolution”: “node”,<br>    “typeRoots”: [<br>      “./node_modules/@types”,<br>      “./node_modules”<br>    ],<br>    “types”: [<br>      “node”<br>]<br>  },<br>  “exclude”: [<br>    “node_modules”<br>  ]<br>}</p>\n<p>It’s fairly simple config “All TS files present in <em><strong>tsScripts</strong></em> folder will be transpiled using <em><strong>commonjs</strong></em> module to <strong><em>outDir</em></strong> (Output Directory) by keeping comments, sourceMap intact” One of the important step is to create <em><strong>typings.json</strong></em> file, this file will create typings to ensure that TypeScript understands all Angular 2 (using version 4) modules in respect to ES5 standard. Create JSON file with name “<em><strong>typings.json</strong></em>“ &amp; add below code then run command <strong>typings install</strong> from CMD</p>\n<p>{<br>  “globalDependencies”: {<br>    “core-js”: “registry:dt/core-js#0.0.0+20160725163759”,<br>    “jasmine”: “registry:dt/jasmine#2.2.0+20160621224255”,<br>    “node”: “registry:dt/node#6.0.0+20160909174046”<br>  }<br>}</p>\n<h2 id=\"Step-3-Using-gulpfile-js-to-move-files\"><a href=\"#Step-3-Using-gulpfile-js-to-move-files\" class=\"headerlink\" title=\"Step 3: Using gulpfile.js to move files\"></a>Step 3: Using gulpfile.js to move files</h2><p>From Step 1 you got to know that all Angular 2, other packages are downloaded into node_modules in your solution folder. Now we need to move required files only like JS, sourcemaps (debugging on chrome) into our MVC 5 apps Scripts folder. Step 2 also requires to move TS files to JavaScript file, so we use create GULP tasks which does this transpile. Also it contains CSS files movement also (which is not relevant at this point) Create gulpfile.js in your project and copy this code</p>\n<p>var ts = require(‘gulp-typescript’);<br>var gulp = require(‘gulp’);<br>var clean = require(‘gulp-clean’);</p>\n<p>var destPath = ‘./libs/‘;</p>\n<p>// Delete the dist directory<br>gulp.task(‘clean’, function () {<br>    return gulp.src(destPath)<br>        .pipe(clean());<br>});</p>\n<p>gulp.task(“scriptsNStyles”, function() {<br>    gulp.src([<br>            ‘core-js/client/<em>.js’,<br>            ‘systemjs/dist/</em>.js’,<br>            ‘reflect-metadata/<em>.js’,<br>            ‘rxjs/**’,<br>            ‘zone.js/dist/</em>.js’,<br>            ‘@angular/<strong>/bundles/<em>.js’,<br>            ‘bootstrap/dist/js/</em>.js’<br>    ], {<br>        cwd: “node_modules/</strong>“<br>    })<br>        .pipe(gulp.dest(“./libs”));<br>});</p>\n<p>var tsProject = ts.createProject(‘tsScripts/tsconfig.json’, {<br>    typescript: require(‘typescript’)<br>});<br>gulp.task(‘ts’, function (done) {<br>    //var tsResult = tsProject.src()<br>    var tsResult = gulp.src([<br>            “tsScripts/*.ts”<br>    ])<br>        .pipe(tsProject(), undefined, ts.reporter.fullReporter());<br>    return tsResult.js.pipe(gulp.dest(‘./Scripts’));<br>});</p>\n<p>gulp.task(‘watch’, [‘watch.ts’]);</p>\n<p>gulp.task(‘watch.ts’, [‘ts’], function () {<br>    return gulp.watch(‘tsScripts/*.ts’, [‘ts’]);<br>});</p>\n<p>gulp.task(‘default’, [‘scriptsNStyles’, ‘watch’]);</p>\n<h2 id=\"Step-4-Add-TypeScript-files-for-bootstrapping\"><a href=\"#Step-4-Add-TypeScript-files-for-bootstrapping\" class=\"headerlink\" title=\"Step 4: Add TypeScript files for bootstrapping\"></a>Step 4: Add TypeScript files for bootstrapping</h2><p>As we are using Angular 2 with TypeScript, we need to add TS file to bootstrap the Angular app into MVC 5 app. So let’s create boot.ts file in “TsScripts” folder and copy this code. We using ngModule to browser specifics, AppComponent.</p>\n<p>///<reference path=\"./../typings/globals/core-js/index.d.ts\"><br>import { NgModule } from ‘@angular/core’;<br>import { BrowserModule } from ‘@angular/platform-browser’;<br>import { AppComponent } from ‘./app’;</reference></p>\n<p>@NgModule({<br>    imports: [BrowserModule ],<br>    declarations: [AppComponent],<br>    bootstrap: [AppComponent]<br>})<br>export class AppModule { }</p>\n<p>AppComponent is starter component which we have to create it now (app.ts). Add this code below</p>\n<p>import { Component } from ‘@angular/core’;<br>@Component({<br>    selector: ‘my-app’,<br>    template: <code>&lt;h2&gt;My favorite skill is: { {myskills}}&lt;/h2&gt;\n    &lt;p&gt;Skill:&lt;/p&gt;\n    &lt;ul&gt;\n      &lt;li *ngFor=&quot;let skl of skills&quot;&gt;\n        { { skl }}\n      &lt;/li&gt;\n    &lt;/ul&gt;</code><br>})<br>export class AppComponent {<br>    title = ‘ASP.NET MVC 5 with Angular 2’;<br>    skills = [‘MVC 5’, ‘Angular 2’, ‘TypeScript’, ‘Visual Studio 2015’];<br>    myskills = this.skills[1];<br>}</p>\n<p>This is template based app component which displays list. Now create <strong>tsScripts/main.ts</strong>, this entry point where Angular 2 loads the components.</p>\n<p>import { platformBrowserDynamic } from ‘@angular/platform-browser-dynamic’;<br>import { AppModule } from ‘./boot’;<br>const platform = platformBrowserDynamic();<br>platform.bootstrapModule(AppModule);</p>\n<h2 id=\"Step-5-Include-systemjs-config-js-to-load-modules\"><a href=\"#Step-5-Include-systemjs-config-js-to-load-modules\" class=\"headerlink\" title=\"Step 5: Include systemjs.config.js to load modules\"></a>Step 5: Include <em>systemjs.config.js</em> to load modules</h2><p>This is most important part of Angular 2 (using version 4) which loads it into the browser. There are different ways to load it but am using SystemJS here. In the existing “<em><strong>Scripts</strong></em>“ folder, create “<em><strong>systemjs.config.js</strong></em>“ and copy below code</p>\n<p>/**<br> * System configuration for Angular samples<br> * Adjust as necessary for your application needs.<br> */<br>(function (global) {<br>    System.config({<br>        paths: {<br>            // paths serve as alias<br>            ‘npm:’: ‘/libs/‘<br>        },<br>        // map tells the System loader where to look for things<br>        map: {<br>            // our app is within the app folder<br>            app: ‘/Scripts’,<br>            // angular bundles<br>            ‘@angular/core’: ‘npm:@angular/core/bundles/core.umd.js’,<br>            ‘@angular/common’: ‘npm:@angular/common/bundles/common.umd.js’,<br>            ‘@angular/compiler’: ‘npm:@angular/compiler/bundles/compiler.umd.js’,<br>            ‘@angular/platform-browser’: ‘npm:@angular/platform-browser/bundles/platform-browser.umd.js’,<br>            ‘@angular/platform-browser-dynamic’: ‘npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js’,<br>            ‘@angular/http’: ‘npm:@angular/http/bundles/http.umd.js’,<br>            ‘@angular/router’: ‘npm:@angular/router/bundles/router.umd.js’,<br>            ‘@angular/forms’: ‘npm:@angular/forms/bundles/forms.umd.js’,<br>            // other libraries<br>            ‘rxjs’: ‘npm:rxjs’,<br>            ‘angular-in-memory-web-api’: ‘npm:angular-in-memory-web-api/bundles/in-memory-web-api.umd.js’,<br>        },<br>        // packages tells the System loader how to load when no filename and/or no extension<br>        packages: {<br>            app: {<br>                main: ‘./main.js’,<br>                defaultExtension: ‘js’,<br>            },<br>            rxjs: {<br>                defaultExtension: ‘js’<br>            }<br>        }<br>    });<br>})(this);</p>\n<h2 id=\"Step-6-Change-csHTML-to-load-and-render-Angular-4\"><a href=\"#Step-6-Change-csHTML-to-load-and-render-Angular-4\" class=\"headerlink\" title=\"Step 6: Change csHTML to load and render Angular 4\"></a>Step 6: Change csHTML to load and render Angular 4</h2><p>To load Angular 2 in ASP.NET MVC 5, we need to include the script references in _<strong>_Layout</strong>_ file and index.cshtml page.</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<html><br><head><br>    <meta charset=\"utf-8\"><br>    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><br>    <title>@ViewBag.Title - My ASP.NET Application</title><br><br>    &lt;!-- 1. Load libraries –&gt;<br>    &lt;!-- Polyfill(s) for older browsers –&gt;<br><br>    <script src=\"~/libs/core-js/client/shim.min.js\"></script><br>    <script src=\"~/libs/zone.js/dist/zone.js\"></script><br>    <script src=\"~/libs/systemjs/dist/system.src.js\"></script><br><br>    &lt;!-- 2. Configure SystemJS –&gt;<br>    <script src=\"~/Scripts/systemjs.config.js\"></script><br>    <script><br>        System.import(‘../Scripts/main’).catch(function (err)<br>        {<br>            console.error(err);<br>        });<br>    </script><br><br>    @Styles.Render(“~/Content/css”)<br>    @Scripts.Render(“~/bundles/modernizr”)<br></head><br><body><br>    <div class=\"navbar navbar-inverse navbar-fixed-top\"><br>        <div class=\"container\"><br>            <div class=\"navbar-header\"><br>                <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\"><br>                    <span class=\"icon-bar\"></span><br>                    <span class=\"icon-bar\"></span><br>                    <span class=\"icon-bar\"></span><br>                </button><br>                @Html.ActionLink(“Application name”, “Index”, “Home”, new { area = “” }, new { @class = “navbar-brand” })<br>            </div><br>            <div class=\"navbar-collapse collapse\"><br>                <ul class=\"nav navbar-nav\"><br>                    <li>@Html.ActionLink(“Home”, “Index”, “Home”)</li><br>                    <li>@Html.ActionLink(“About”, “About”, “Home”)</li><br>                    <li>@Html.ActionLink(“Contact”, “Contact”, “Home”)</li><br>                </ul><br>            </div><br>        </div><br>    </div><br>    <div class=\"container body-content\"><br>        @RenderBody()<br>        <hr><br>        <footer><br>            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p><br>        </footer><br>    </div><br><br>    @Scripts.Render(“~/bundles/jquery”)<br>    @Scripts.Render(“~/bundles/bootstrap”)<br>    @RenderSection(“scripts”, required: false)<br></body><br></html>\n\n<p>In the Views/Home/index.cshtml you need to add “<strong>my-app</strong>“ component we defined in app.TS file. This is the starting point of Angular 2 application to render into the browser.</p>\n<p>@{<br>    ViewBag.Title = “Home Page”;<br>}</p>\n<p><my-app>Loading…</my-app></p>\n<p>Now that we are almost done, we need to run GULP tasks so that Angular 2 files, TS files are moved to an appropriate folder. Open <em><strong>Task Runner Explorer</strong></em> in Visual Studio 2015 and run <strong>default</strong> task shown. Its better to do show ALL Files in solution Explorer to see “<em>libs</em>“, “<em>typings</em>“, “<em>app.js, boot.js, *.map</em>“ files. Includes these files and run the application to load Angular 2 in ASP.NET MVC 5. [caption id=”attachment_535” align=”aligncenter” width=”741”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/07/image.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/07/image.png\" alt=\"ASP.NET MVC 5 Angular 2\"></a> Running Angular 2 in ASP.NET MVC 5[/caption] The entire source code is on my <a href=\"https://github.com/mithunvp/ng2Mvc5Demo\" target=\"_blank\" rel=\"noopener\">Github repo</a>, clone or fork or download it and follow instructions to run it. Let me know in comments if you face any issues running applications.</p>\n<h2 id=\"With-Angular-CLI\"><a href=\"#With-Angular-CLI\" class=\"headerlink\" title=\"With Angular CLI\"></a>With Angular CLI</h2><p>Check <a href=\"http://www.mithunvp.com/angular-asp-net-mvc-5-angular-cli-visual-studio-2017/\">out this post</a> to use Angular CLI to integrate Angular with ASP.NET MVC 5</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"ASP.NET MVC 5 - Using Angular 4 with TypeScript in Visual Studio","path":"using-angular-2-asp-net-mvc-5-visual-studio/","eyeCatchImage":null,"excerpt":null,"date":"2016-07-28T13:26:39.000Z","pv":0,"totalPV":0,"categories":"Angular 2","tags":["Angular2","ASP.NET MVC 5"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Angular Elements - How to use in ASP.NET Core using Angular CLI?","url":"722.html","id":"722","date":"2018-07-10T12:34:42.000Z","_content":"\n[![Angular Elements](http://www.mithunvp.com/wp-content/uploads/2018/07/1-300x148.png)](http://www.mithunvp.com/wp-content/uploads/2018/07/1.png)Can Angular framework be used in a Non-SPA (Single Page Application) way? Here is my attempt to use **Angular Elements** in ASP.NET Core 2.1 and use the Angular framework in a Non-SPA way.\n\nAngular as Non-SPA?\n-------------------\n\nMany of developers just like me got excited to use the Angular framework along with ASP.NET MVC either in MVC 5 or Core. I was tasked to use Angular in existing or brand new MVC application, here are my experience of using Angular with ASP.NET MVC.\n\n#### Integration of Angular framework\n\nUsing these server-side technologies is not easy & so much work needs to be done just to check its feasibility. I am talking about pre-Angular CLI days, I had to demo a small POC of Angular & MVC5. The reaction was _it's too much to get started_. But still business wants to use it. My GitHub repo [ng2Mvc5Demo](https://github.com/mithunvp/ng2Mvc5Demo) has 120+ Stars, it indicates that everyone wants to try out Angular.\n\n#### Cannot use it as NON-SPA\n\nAngularJS was very easy, either download using NuGet or download using CDN and start developing. It can be used when needed i.e. suppose I wanted to use AngularJS in only 3 pages out of 10 pages, then it was so easy. But with Angular, it was not possible because of components being used in every _cshtml_ page and routing approach to load them. In a real-world ASP.NET MVC application (either enterprise or medium), only a few pages would need a JavaScript-based code.\n\n#### Challenge of Learning\n\nThe learning curve for Angular is quite a bit in terms of TypeScript, RxJS, Component-based architecture, a different ecosystem of tooling etc. With this learning curve, the overall getting started with Angular was turn down. In Enterprise, we don't have the luxury to train extensively. I hope many developers would feel the same.\n\n#### The Solution\n\nAngular CLI can be used for smoother integration of Angular framework with ASP.NET Core and concept of **Angular Elements** can be used to treat Angular in a non-SPA way. Pre-requites\n\n*   .NET Core 2.1 SDK\n*   Visual Studio 2017 Preview - Community Edition\n*   Latest NodeJs installed\n*   Latest Angular CLI installed\n\n**What will we learn?**\n\n*   Create ASP.NET Core 2.1 (MVC) application.\n*   Integrating Angular with ASP.NET Core MVC using Angular CLI\n*   My TODO Component\n*   Adding Angular Elements\n*   Convert Angular Components as Custom Components\n*   Access Web API using HttpClient & RxJS\n*   Debugging Angular Elements in MVC view\n*   Getting ready for deployment\n\nCreate ASP.NET Core 2.1 (MVC) application\n-----------------------------------------\n\nI have created ASP.NET Core 2.1 (MVC) using Visual Studio 2017 Community Edition as shown below \\[caption id=\"attachment_732\" align=\"aligncenter\" width=\"300\"\\][![angular elements](http://www.mithunvp.com/wp-content/uploads/2018/07/2-300x177.png)](http://www.mithunvp.com/wp-content/uploads/2018/07/2.png) Creating ASP.NET Core 2.1 MVC application\\[/caption\\]\n\nIntegrating Angular with ASP.NET Core MVC using Angular CLI\n-----------------------------------------------------------\n\nUsing the Angular CLI, we will be creating Angular 6 application inside the root directory of this MVC application. This step itself is a blog post, check out my article [Using Angular inside ASP.NET MVC 5 with Angular CLI using Visual Studio 2017](http://www.mithunvp.com/angular-asp-net-mvc-5-angular-cli-visual-studio-2017/) for detailed integration steps. Even though the article uses ASP.NET MVC 5 but still everything can be applied to ASP.NET Core. Once you're up & running the Angular application in ASP.NET Core, its time to add one simple component.\n\nMy TODO Angular Component\n-------------------------\n\nUsing the Angular CLI lets create a component by running the command _**ng g component my-todo**_. This creates Angular Component along with template HTML, styles related file. This Component lists my TODO items and lets me add one. Its very simple Angular Component and a good start for us. The component file is shown below, very straightforward _myTodos_ to hold an array of strings, initiated with predefined values. An _addMyTodo_ method to add to _myTodos_ array.\n\nimport { Component, OnInit } from \"@angular/core\";\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: \"app-my-todo\",\n  templateUrl: \"./my-todo.component.html\",\n  styleUrls: \\[\"./my-todo.component.css\"\\]\n})\nexport class MyTodoComponent implements OnInit {\n  myTodos: string\\[\\] = \\[\\];\n  newTodo: string;\n  constructor() {}\n\n  ngOnInit() {\n    this.myTodos = \\[\"Pay Bills\", \"Clean Car\", \"Pay Taxes\"\\];\n  }\n\n  addMyTodo() {\n    this.myTodos.push(this.newTodo);\n    this.newTodo = \"\";\n  }\n}\n\nRun the **ng build --watch** in command line and refer the necessary script files in _About.cshtml;_  running MVC project & navigating to About page, you would see a similar view. \\[caption id=\"attachment_735\" align=\"aligncenter\" width=\"1024\"\\][![angular elements](http://www.mithunvp.com/wp-content/uploads/2018/07/4-1024x311.png)](http://www.mithunvp.com/wp-content/uploads/2018/07/4.png) MyTodo Component running on MVC view\\[/caption\\]   Up until we have successfully integrated Angular app unto ASP.NET Core MVC application and run the application to see the above result. The source code until this point is in the **[MASTER](https://github.com/mithunvp/angularElementsDemo)** branch of my Github repo.\n\nAdding Angular Elements\n-----------------------\n\nTo this point we haven't come across Angular Elements concept, it was just Angular application being built. The very first question arises is _\"What are Angular Elements?\"_. In a nutshell, we can say **_they help define new HTML elements in a framework-agnostic way. _**Angular documentation states that\n\n> Angular elements are Angular components packaged as _custom elements_, a web standard for defining new HTML elements in a framework-agnostic way.\n\nFramework-agnostic way means that \"we build these custom elements using the Angular framework but they can be used with either React, Vue, any web-based front end or using plain Javascript just like any JS files are referred\". There is in-depth [documentation](https://angular.io/guide/elements) on Angular Elements, a must read. Now run the command **ng add @angular/elements** from the root folder of the project (folder containing angular.json). It will start adding Angular elements package to existing Angular application. \\[caption id=\"attachment_736\" align=\"aligncenter\" width=\"799\"\\][![angular elements](http://www.mithunvp.com/wp-content/uploads/2018/07/5.png)](http://www.mithunvp.com/wp-content/uploads/2018/07/5.png) AngularElements getting added\\[/caption\\]\n\nConvert Angular Components to Angular Elements\n----------------------------------------------\n\nOur aim here is to convert regular Angular Components into Angular Elements. One of the steps is to set encapsulation of component as **Native**. That is it will convert the component's style, template & template class into a single file. The modified _MyTodo_ component created above would like this\n\nimport { Component, OnInit,ViewEncapsulation } from \"@angular/core\";\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: \"app-my-todo\",\n  templateUrl: \"./my-todo.component.html\",\n  styleUrls: \\[\"./my-todo.component.css\"\\],\n  encapsulation: ViewEncapsulation.Native\n})\nexport class MyTodoComponent implements OnInit {\n  myTodos: string\\[\\] = \\[\\];\n  newTodo: string;\n  constructor() {}\n\n  //Code removed for brevity\n}\n\nRegistering the _MyTodo_ Component in _@NgModule_ is the most important step to convert into Angular Element. For this, Angular’s framework has a _**createCustomElement**_ function to create a class that can be used with browsers’ native _**customElements.define**_ functionality. As per Angular documentation\n\n> Builds a class that encapsulates the functionality of the provided component and uses the configuration information to provide more context to the class. _Takes the component factory's inputs and outputs to convert them to the proper custom element API and add hooks to input changes._\n\nIn short, it converts angular component as regular HTML element (like Input, Select, Radio etc) and understandable by various browsers (of course, polyfills needed for the older browser). _In our case or in general Angular Elements are neither part any other components or root of the Angular application. The Angular compiler needs to be informed that they must be compiled by adding to the **entryComponent** list of @NgModule._ As Angular Elements are self-bootstrapping, they act like normal HTML elements by bootstrapping automatically and adds itself to the DOM tree. For this reason, we have to add **ngDoBootstrap()** method to mention the list of angular elements to be loaded. The modified app.module.ts would look like this\n\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule, Injector } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { createCustomElement } from \"@angular/elements\";\n\nimport { AppComponent } from \"./app.component\";\nimport { MyTodoComponent } from \"./my-todo/my-todo.component\";\n\n@NgModule({\n  declarations: \\[AppComponent, MyTodoComponent\\],\n  imports: \\[BrowserModule, FormsModule\\],\n  entryComponents: \\[MyTodoComponent\\]\n})\nexport class AppModule {\n  constructor(private injector: Injector) {}\n\n  ngDoBootstrap() {\n    const myTodoElment = createCustomElement(MyTodoComponent, {\n      injector: this.injector\n    });\n    customElements.define(\"mytodo-element\", myTodoElment);\n  }\n}\n\nAngular Element accessing Web API\n---------------------------------\n\nIn the above example, we converted a regular angular component into an angular element (custom element). Let's create another component which talks to GitHub APIs & uses RxJS to map objects to particular class. Run the following Angular CLI command generate Angular Component **ng g component git-repos -v Native** This component calls the GitHub public APIs to get the list of the repository and its starred count. It has a text box to search enter the GitHub Username to fetch their public repository and its starred count. Let's check out this component's code\n\nimport { Component, OnInit, ViewEncapsulation } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { GitHubRepoStars } from \"./GitHubRepoStars\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n  selector: \"app-git-repos\",\n  templateUrl: \"./git-repos.component.html\",\n  styleUrls: \\[\"./git-repos.component.css\"\\],\n  encapsulation: ViewEncapsulation.Native\n})\nexport class GitReposComponent implements OnInit {\n  userName: string;\n  gitRepos: Observable<GitHubRepoStars>;\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {}\n\n    searchUserRepos() {\n      this.http.get(\\`https://api.github.com/users/${this.userName}/repos\\`).\n          pipe(\n          map((item: any) => item.map(p=> <GitHubRepoStars>\n              {\n                name: p.name,\n                starsCount: p.stargazers_count\n\n              })))          \n          .subscribe((data) => {\n          this.gitRepos = data;\n      });\n  }\n}\n\n_Code walkthrough_\n\n*   **HttpClient** is imported to call the GitHub APIs\n*   **ViewEncapsulation** is Native - It combines template, styles, components into a single file.\n*   The _searchUserRepos_ method gets called when the user enters GitHub username. It uses Angular _HttpClient_ to call API with username\n*   Using RxJS **map** operator to transform API response for our needs.\n*   Remember to **subscribe,** to call the API.\n\nJust like for above custom element, we have to add this **GitReposComponent** to @NgModule's _entryComponents_, _createCustomElement_ in ngDoBootstrap. The modified @NgModule would like\n\n//Code removed for brevity\n\n@NgModule({\n  declarations: \\[AppComponent, MyTodoComponent, GitReposComponent\\],\n  imports: \\[BrowserModule, FormsModule, HttpClientModule\\],\n  entryComponents: \\[MyTodoComponent, GitReposComponent\\]\n})\nexport class AppModule {\n  constructor(private injector: Injector) {}\n\n  ngDoBootstrap() {\n    const myTodoElment = createCustomElement(MyTodoComponent, {\n      injector: this.injector\n    });\n    customElements.define(\"mytodo-element\", myTodoElment);\n\n    const githubStars = createCustomElement(GitReposComponent, {\n      injector: this.injector\n    });\n    customElements.define(\"github-stars\", githubStars);\n  }\n}\n\nRunning Angular Elements in MVC view\n------------------------------------\n\nNow that we are ready with custom elements, we integrate them in two MVC pages (about.cshtml & contact.cshtml) as shown in the code snippet. _Remember JS files order is important_\n\n<h3>Demo of Angular Elements in ASP.NET Core</h3>\n\n@section Scripts {\n    <script type=\"text/javascript\" src=\"~/dist/runtime.js\"></script>\n    <script type=\"text/javascript\" src=\"~/dist/polyfills.js\"></script>\n    <script type=\"text/javascript\" src=\"~/dist/styles.js\"></script>\n    <script type=\"text/javascript\" src=\"~/dist/vendor.js\"></script>\n    <script type=\"text/javascript\" src=\"~/dist/scripts.js\"></script>\n    <script type=\"text/javascript\" src=\"~/dist/main.js\"></script>\n}\n<mytodo-element></mytodo-element>\n\nThe **mytodo-element** is a custom HTML element we created in the above steps. Repeat the same for the _**github-stars**_ custom element also. Running the ASP.NET Core application & navigating to About & Contact view will load respective custom elements. Remember from console window run the command **ng build --watch** to compile & play around with component\n\n> The **scripts.js** contains the custom elements i.e. _mytodo-element_ and _github-stars_\n\n\\[caption id=\"attachment_740\" align=\"aligncenter\" width=\"928\"\\][![](http://www.mithunvp.com/wp-content/uploads/2018/07/2018-07-10-17_12_14-Contact-angularElementsDemo.png)](http://www.mithunvp.com/wp-content/uploads/2018/07/2018-07-10-17_12_14-Contact-angularElementsDemo.png) Custom Elements running in ASP.NET Core\\[/caption\\]\n\nGetting ready for deployment\n----------------------------\n\nNow that we are ready for with Angular Elements development and tested it as in Chrome browser :). It's time to deploy with ASP.NET Core MVC project with custom Elements. Here we will not be using the traditional approach of ASP.NET Core publishing. Our approach would be\n\n*   Use NPM scripts to create PROD worth bundle of the Angular app (i.e. angular with elements JS files).\n*   Invoke .NET Core publish from NPM scripts.\n\nTo do this open _package.json_, add _**scripts**_ entry as shown below\n\n\"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"publish-for-deploy\": \"ng build --prod --output-hashing=none && dotnet publish -c Release\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n\nThe **publish-for-deploy** script entry generates production-ready angular (elements) files in _wwwroot/dist/_ folder and also creates .NET Core publish folder in Release mode. Run this command from command line from project root folder **npm run publish-for-deploy** Once done with this publishing step, goto _bin/Release/netcoreapp2.1/publish_ folder to deployment-ready build of ASP.NET Core with Angular Elements. You can deploy this on IIS or Nginx.\n\n### Source Code\n\nCheck out my GitHub Repo [_angularElementsDemo_](https://github.com/mithunvp/angularElementsDemo) with branch name **angular-elements** for source code.\n\n### Summary\n\n*   Integrated Angular with ASP.NET Core 2.1 using Angular CLI\n*   Created two Angular Custom Elements. They are basic examples with Forms, HttpClient, RxJS\n*   Tried to demonstrate usage of Angular in non-SPA ASP.NET Core MVC application.","source":"_posts/using-angular-elements-asp-net-core-angular-cli-visual-studio.md","raw":"---\ntitle: Angular Elements - How to use in ASP.NET Core using Angular CLI?\ntags:\n  - Angular\n  - asp.net core\nurl: 722.html\nid: 722\ncategories:\n  - Angular\n  - ASP.NET Core 2\ndate: 2018-07-10 18:04:42\n---\n\n[![Angular Elements](http://www.mithunvp.com/wp-content/uploads/2018/07/1-300x148.png)](http://www.mithunvp.com/wp-content/uploads/2018/07/1.png)Can Angular framework be used in a Non-SPA (Single Page Application) way? Here is my attempt to use **Angular Elements** in ASP.NET Core 2.1 and use the Angular framework in a Non-SPA way.\n\nAngular as Non-SPA?\n-------------------\n\nMany of developers just like me got excited to use the Angular framework along with ASP.NET MVC either in MVC 5 or Core. I was tasked to use Angular in existing or brand new MVC application, here are my experience of using Angular with ASP.NET MVC.\n\n#### Integration of Angular framework\n\nUsing these server-side technologies is not easy & so much work needs to be done just to check its feasibility. I am talking about pre-Angular CLI days, I had to demo a small POC of Angular & MVC5. The reaction was _it's too much to get started_. But still business wants to use it. My GitHub repo [ng2Mvc5Demo](https://github.com/mithunvp/ng2Mvc5Demo) has 120+ Stars, it indicates that everyone wants to try out Angular.\n\n#### Cannot use it as NON-SPA\n\nAngularJS was very easy, either download using NuGet or download using CDN and start developing. It can be used when needed i.e. suppose I wanted to use AngularJS in only 3 pages out of 10 pages, then it was so easy. But with Angular, it was not possible because of components being used in every _cshtml_ page and routing approach to load them. In a real-world ASP.NET MVC application (either enterprise or medium), only a few pages would need a JavaScript-based code.\n\n#### Challenge of Learning\n\nThe learning curve for Angular is quite a bit in terms of TypeScript, RxJS, Component-based architecture, a different ecosystem of tooling etc. With this learning curve, the overall getting started with Angular was turn down. In Enterprise, we don't have the luxury to train extensively. I hope many developers would feel the same.\n\n#### The Solution\n\nAngular CLI can be used for smoother integration of Angular framework with ASP.NET Core and concept of **Angular Elements** can be used to treat Angular in a non-SPA way. Pre-requites\n\n*   .NET Core 2.1 SDK\n*   Visual Studio 2017 Preview - Community Edition\n*   Latest NodeJs installed\n*   Latest Angular CLI installed\n\n**What will we learn?**\n\n*   Create ASP.NET Core 2.1 (MVC) application.\n*   Integrating Angular with ASP.NET Core MVC using Angular CLI\n*   My TODO Component\n*   Adding Angular Elements\n*   Convert Angular Components as Custom Components\n*   Access Web API using HttpClient & RxJS\n*   Debugging Angular Elements in MVC view\n*   Getting ready for deployment\n\nCreate ASP.NET Core 2.1 (MVC) application\n-----------------------------------------\n\nI have created ASP.NET Core 2.1 (MVC) using Visual Studio 2017 Community Edition as shown below \\[caption id=\"attachment_732\" align=\"aligncenter\" width=\"300\"\\][![angular elements](http://www.mithunvp.com/wp-content/uploads/2018/07/2-300x177.png)](http://www.mithunvp.com/wp-content/uploads/2018/07/2.png) Creating ASP.NET Core 2.1 MVC application\\[/caption\\]\n\nIntegrating Angular with ASP.NET Core MVC using Angular CLI\n-----------------------------------------------------------\n\nUsing the Angular CLI, we will be creating Angular 6 application inside the root directory of this MVC application. This step itself is a blog post, check out my article [Using Angular inside ASP.NET MVC 5 with Angular CLI using Visual Studio 2017](http://www.mithunvp.com/angular-asp-net-mvc-5-angular-cli-visual-studio-2017/) for detailed integration steps. Even though the article uses ASP.NET MVC 5 but still everything can be applied to ASP.NET Core. Once you're up & running the Angular application in ASP.NET Core, its time to add one simple component.\n\nMy TODO Angular Component\n-------------------------\n\nUsing the Angular CLI lets create a component by running the command _**ng g component my-todo**_. This creates Angular Component along with template HTML, styles related file. This Component lists my TODO items and lets me add one. Its very simple Angular Component and a good start for us. The component file is shown below, very straightforward _myTodos_ to hold an array of strings, initiated with predefined values. An _addMyTodo_ method to add to _myTodos_ array.\n\nimport { Component, OnInit } from \"@angular/core\";\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: \"app-my-todo\",\n  templateUrl: \"./my-todo.component.html\",\n  styleUrls: \\[\"./my-todo.component.css\"\\]\n})\nexport class MyTodoComponent implements OnInit {\n  myTodos: string\\[\\] = \\[\\];\n  newTodo: string;\n  constructor() {}\n\n  ngOnInit() {\n    this.myTodos = \\[\"Pay Bills\", \"Clean Car\", \"Pay Taxes\"\\];\n  }\n\n  addMyTodo() {\n    this.myTodos.push(this.newTodo);\n    this.newTodo = \"\";\n  }\n}\n\nRun the **ng build --watch** in command line and refer the necessary script files in _About.cshtml;_  running MVC project & navigating to About page, you would see a similar view. \\[caption id=\"attachment_735\" align=\"aligncenter\" width=\"1024\"\\][![angular elements](http://www.mithunvp.com/wp-content/uploads/2018/07/4-1024x311.png)](http://www.mithunvp.com/wp-content/uploads/2018/07/4.png) MyTodo Component running on MVC view\\[/caption\\]   Up until we have successfully integrated Angular app unto ASP.NET Core MVC application and run the application to see the above result. The source code until this point is in the **[MASTER](https://github.com/mithunvp/angularElementsDemo)** branch of my Github repo.\n\nAdding Angular Elements\n-----------------------\n\nTo this point we haven't come across Angular Elements concept, it was just Angular application being built. The very first question arises is _\"What are Angular Elements?\"_. In a nutshell, we can say **_they help define new HTML elements in a framework-agnostic way. _**Angular documentation states that\n\n> Angular elements are Angular components packaged as _custom elements_, a web standard for defining new HTML elements in a framework-agnostic way.\n\nFramework-agnostic way means that \"we build these custom elements using the Angular framework but they can be used with either React, Vue, any web-based front end or using plain Javascript just like any JS files are referred\". There is in-depth [documentation](https://angular.io/guide/elements) on Angular Elements, a must read. Now run the command **ng add @angular/elements** from the root folder of the project (folder containing angular.json). It will start adding Angular elements package to existing Angular application. \\[caption id=\"attachment_736\" align=\"aligncenter\" width=\"799\"\\][![angular elements](http://www.mithunvp.com/wp-content/uploads/2018/07/5.png)](http://www.mithunvp.com/wp-content/uploads/2018/07/5.png) AngularElements getting added\\[/caption\\]\n\nConvert Angular Components to Angular Elements\n----------------------------------------------\n\nOur aim here is to convert regular Angular Components into Angular Elements. One of the steps is to set encapsulation of component as **Native**. That is it will convert the component's style, template & template class into a single file. The modified _MyTodo_ component created above would like this\n\nimport { Component, OnInit,ViewEncapsulation } from \"@angular/core\";\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: \"app-my-todo\",\n  templateUrl: \"./my-todo.component.html\",\n  styleUrls: \\[\"./my-todo.component.css\"\\],\n  encapsulation: ViewEncapsulation.Native\n})\nexport class MyTodoComponent implements OnInit {\n  myTodos: string\\[\\] = \\[\\];\n  newTodo: string;\n  constructor() {}\n\n  //Code removed for brevity\n}\n\nRegistering the _MyTodo_ Component in _@NgModule_ is the most important step to convert into Angular Element. For this, Angular’s framework has a _**createCustomElement**_ function to create a class that can be used with browsers’ native _**customElements.define**_ functionality. As per Angular documentation\n\n> Builds a class that encapsulates the functionality of the provided component and uses the configuration information to provide more context to the class. _Takes the component factory's inputs and outputs to convert them to the proper custom element API and add hooks to input changes._\n\nIn short, it converts angular component as regular HTML element (like Input, Select, Radio etc) and understandable by various browsers (of course, polyfills needed for the older browser). _In our case or in general Angular Elements are neither part any other components or root of the Angular application. The Angular compiler needs to be informed that they must be compiled by adding to the **entryComponent** list of @NgModule._ As Angular Elements are self-bootstrapping, they act like normal HTML elements by bootstrapping automatically and adds itself to the DOM tree. For this reason, we have to add **ngDoBootstrap()** method to mention the list of angular elements to be loaded. The modified app.module.ts would look like this\n\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule, Injector } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { createCustomElement } from \"@angular/elements\";\n\nimport { AppComponent } from \"./app.component\";\nimport { MyTodoComponent } from \"./my-todo/my-todo.component\";\n\n@NgModule({\n  declarations: \\[AppComponent, MyTodoComponent\\],\n  imports: \\[BrowserModule, FormsModule\\],\n  entryComponents: \\[MyTodoComponent\\]\n})\nexport class AppModule {\n  constructor(private injector: Injector) {}\n\n  ngDoBootstrap() {\n    const myTodoElment = createCustomElement(MyTodoComponent, {\n      injector: this.injector\n    });\n    customElements.define(\"mytodo-element\", myTodoElment);\n  }\n}\n\nAngular Element accessing Web API\n---------------------------------\n\nIn the above example, we converted a regular angular component into an angular element (custom element). Let's create another component which talks to GitHub APIs & uses RxJS to map objects to particular class. Run the following Angular CLI command generate Angular Component **ng g component git-repos -v Native** This component calls the GitHub public APIs to get the list of the repository and its starred count. It has a text box to search enter the GitHub Username to fetch their public repository and its starred count. Let's check out this component's code\n\nimport { Component, OnInit, ViewEncapsulation } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { GitHubRepoStars } from \"./GitHubRepoStars\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n  selector: \"app-git-repos\",\n  templateUrl: \"./git-repos.component.html\",\n  styleUrls: \\[\"./git-repos.component.css\"\\],\n  encapsulation: ViewEncapsulation.Native\n})\nexport class GitReposComponent implements OnInit {\n  userName: string;\n  gitRepos: Observable<GitHubRepoStars>;\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {}\n\n    searchUserRepos() {\n      this.http.get(\\`https://api.github.com/users/${this.userName}/repos\\`).\n          pipe(\n          map((item: any) => item.map(p=> <GitHubRepoStars>\n              {\n                name: p.name,\n                starsCount: p.stargazers_count\n\n              })))          \n          .subscribe((data) => {\n          this.gitRepos = data;\n      });\n  }\n}\n\n_Code walkthrough_\n\n*   **HttpClient** is imported to call the GitHub APIs\n*   **ViewEncapsulation** is Native - It combines template, styles, components into a single file.\n*   The _searchUserRepos_ method gets called when the user enters GitHub username. It uses Angular _HttpClient_ to call API with username\n*   Using RxJS **map** operator to transform API response for our needs.\n*   Remember to **subscribe,** to call the API.\n\nJust like for above custom element, we have to add this **GitReposComponent** to @NgModule's _entryComponents_, _createCustomElement_ in ngDoBootstrap. The modified @NgModule would like\n\n//Code removed for brevity\n\n@NgModule({\n  declarations: \\[AppComponent, MyTodoComponent, GitReposComponent\\],\n  imports: \\[BrowserModule, FormsModule, HttpClientModule\\],\n  entryComponents: \\[MyTodoComponent, GitReposComponent\\]\n})\nexport class AppModule {\n  constructor(private injector: Injector) {}\n\n  ngDoBootstrap() {\n    const myTodoElment = createCustomElement(MyTodoComponent, {\n      injector: this.injector\n    });\n    customElements.define(\"mytodo-element\", myTodoElment);\n\n    const githubStars = createCustomElement(GitReposComponent, {\n      injector: this.injector\n    });\n    customElements.define(\"github-stars\", githubStars);\n  }\n}\n\nRunning Angular Elements in MVC view\n------------------------------------\n\nNow that we are ready with custom elements, we integrate them in two MVC pages (about.cshtml & contact.cshtml) as shown in the code snippet. _Remember JS files order is important_\n\n<h3>Demo of Angular Elements in ASP.NET Core</h3>\n\n@section Scripts {\n    <script type=\"text/javascript\" src=\"~/dist/runtime.js\"></script>\n    <script type=\"text/javascript\" src=\"~/dist/polyfills.js\"></script>\n    <script type=\"text/javascript\" src=\"~/dist/styles.js\"></script>\n    <script type=\"text/javascript\" src=\"~/dist/vendor.js\"></script>\n    <script type=\"text/javascript\" src=\"~/dist/scripts.js\"></script>\n    <script type=\"text/javascript\" src=\"~/dist/main.js\"></script>\n}\n<mytodo-element></mytodo-element>\n\nThe **mytodo-element** is a custom HTML element we created in the above steps. Repeat the same for the _**github-stars**_ custom element also. Running the ASP.NET Core application & navigating to About & Contact view will load respective custom elements. Remember from console window run the command **ng build --watch** to compile & play around with component\n\n> The **scripts.js** contains the custom elements i.e. _mytodo-element_ and _github-stars_\n\n\\[caption id=\"attachment_740\" align=\"aligncenter\" width=\"928\"\\][![](http://www.mithunvp.com/wp-content/uploads/2018/07/2018-07-10-17_12_14-Contact-angularElementsDemo.png)](http://www.mithunvp.com/wp-content/uploads/2018/07/2018-07-10-17_12_14-Contact-angularElementsDemo.png) Custom Elements running in ASP.NET Core\\[/caption\\]\n\nGetting ready for deployment\n----------------------------\n\nNow that we are ready for with Angular Elements development and tested it as in Chrome browser :). It's time to deploy with ASP.NET Core MVC project with custom Elements. Here we will not be using the traditional approach of ASP.NET Core publishing. Our approach would be\n\n*   Use NPM scripts to create PROD worth bundle of the Angular app (i.e. angular with elements JS files).\n*   Invoke .NET Core publish from NPM scripts.\n\nTo do this open _package.json_, add _**scripts**_ entry as shown below\n\n\"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"publish-for-deploy\": \"ng build --prod --output-hashing=none && dotnet publish -c Release\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n\nThe **publish-for-deploy** script entry generates production-ready angular (elements) files in _wwwroot/dist/_ folder and also creates .NET Core publish folder in Release mode. Run this command from command line from project root folder **npm run publish-for-deploy** Once done with this publishing step, goto _bin/Release/netcoreapp2.1/publish_ folder to deployment-ready build of ASP.NET Core with Angular Elements. You can deploy this on IIS or Nginx.\n\n### Source Code\n\nCheck out my GitHub Repo [_angularElementsDemo_](https://github.com/mithunvp/angularElementsDemo) with branch name **angular-elements** for source code.\n\n### Summary\n\n*   Integrated Angular with ASP.NET Core 2.1 using Angular CLI\n*   Created two Angular Custom Elements. They are basic examples with Forms, HttpClient, RxJS\n*   Tried to demonstrate usage of Angular in non-SPA ASP.NET Core MVC application.","slug":"using-angular-elements-asp-net-core-angular-cli-visual-studio","published":1,"updated":"2018-07-10T19:49:06.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034x5001ws4tjgq5zwozm","content":"<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2018/07/1.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/07/1-300x148.png\" alt=\"Angular Elements\"></a>Can Angular framework be used in a Non-SPA (Single Page Application) way? Here is my attempt to use <strong>Angular Elements</strong> in ASP.NET Core 2.1 and use the Angular framework in a Non-SPA way.</p>\n<h2 id=\"Angular-as-Non-SPA\"><a href=\"#Angular-as-Non-SPA\" class=\"headerlink\" title=\"Angular as Non-SPA?\"></a>Angular as Non-SPA?</h2><p>Many of developers just like me got excited to use the Angular framework along with ASP.NET MVC either in MVC 5 or Core. I was tasked to use Angular in existing or brand new MVC application, here are my experience of using Angular with ASP.NET MVC.</p>\n<h4 id=\"Integration-of-Angular-framework\"><a href=\"#Integration-of-Angular-framework\" class=\"headerlink\" title=\"Integration of Angular framework\"></a>Integration of Angular framework</h4><p>Using these server-side technologies is not easy &amp; so much work needs to be done just to check its feasibility. I am talking about pre-Angular CLI days, I had to demo a small POC of Angular &amp; MVC5. The reaction was <em>it’s too much to get started</em>. But still business wants to use it. My GitHub repo <a href=\"https://github.com/mithunvp/ng2Mvc5Demo\" target=\"_blank\" rel=\"noopener\">ng2Mvc5Demo</a> has 120+ Stars, it indicates that everyone wants to try out Angular.</p>\n<h4 id=\"Cannot-use-it-as-NON-SPA\"><a href=\"#Cannot-use-it-as-NON-SPA\" class=\"headerlink\" title=\"Cannot use it as NON-SPA\"></a>Cannot use it as NON-SPA</h4><p>AngularJS was very easy, either download using NuGet or download using CDN and start developing. It can be used when needed i.e. suppose I wanted to use AngularJS in only 3 pages out of 10 pages, then it was so easy. But with Angular, it was not possible because of components being used in every <em>cshtml</em> page and routing approach to load them. In a real-world ASP.NET MVC application (either enterprise or medium), only a few pages would need a JavaScript-based code.</p>\n<h4 id=\"Challenge-of-Learning\"><a href=\"#Challenge-of-Learning\" class=\"headerlink\" title=\"Challenge of Learning\"></a>Challenge of Learning</h4><p>The learning curve for Angular is quite a bit in terms of TypeScript, RxJS, Component-based architecture, a different ecosystem of tooling etc. With this learning curve, the overall getting started with Angular was turn down. In Enterprise, we don’t have the luxury to train extensively. I hope many developers would feel the same.</p>\n<h4 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h4><p>Angular CLI can be used for smoother integration of Angular framework with ASP.NET Core and concept of <strong>Angular Elements</strong> can be used to treat Angular in a non-SPA way. Pre-requites</p>\n<ul>\n<li>.NET Core 2.1 SDK</li>\n<li>Visual Studio 2017 Preview - Community Edition</li>\n<li>Latest NodeJs installed</li>\n<li>Latest Angular CLI installed</li>\n</ul>\n<p><strong>What will we learn?</strong></p>\n<ul>\n<li>Create ASP.NET Core 2.1 (MVC) application.</li>\n<li>Integrating Angular with ASP.NET Core MVC using Angular CLI</li>\n<li>My TODO Component</li>\n<li>Adding Angular Elements</li>\n<li>Convert Angular Components as Custom Components</li>\n<li>Access Web API using HttpClient &amp; RxJS</li>\n<li>Debugging Angular Elements in MVC view</li>\n<li>Getting ready for deployment</li>\n</ul>\n<h2 id=\"Create-ASP-NET-Core-2-1-MVC-application\"><a href=\"#Create-ASP-NET-Core-2-1-MVC-application\" class=\"headerlink\" title=\"Create ASP.NET Core 2.1 (MVC) application\"></a>Create ASP.NET Core 2.1 (MVC) application</h2><p>I have created ASP.NET Core 2.1 (MVC) using Visual Studio 2017 Community Edition as shown below [caption id=”attachment_732” align=”aligncenter” width=”300”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/07/2.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/07/2-300x177.png\" alt=\"angular elements\"></a> Creating ASP.NET Core 2.1 MVC application[/caption]</p>\n<h2 id=\"Integrating-Angular-with-ASP-NET-Core-MVC-using-Angular-CLI\"><a href=\"#Integrating-Angular-with-ASP-NET-Core-MVC-using-Angular-CLI\" class=\"headerlink\" title=\"Integrating Angular with ASP.NET Core MVC using Angular CLI\"></a>Integrating Angular with ASP.NET Core MVC using Angular CLI</h2><p>Using the Angular CLI, we will be creating Angular 6 application inside the root directory of this MVC application. This step itself is a blog post, check out my article <a href=\"http://www.mithunvp.com/angular-asp-net-mvc-5-angular-cli-visual-studio-2017/\">Using Angular inside ASP.NET MVC 5 with Angular CLI using Visual Studio 2017</a> for detailed integration steps. Even though the article uses ASP.NET MVC 5 but still everything can be applied to ASP.NET Core. Once you’re up &amp; running the Angular application in ASP.NET Core, its time to add one simple component.</p>\n<h2 id=\"My-TODO-Angular-Component\"><a href=\"#My-TODO-Angular-Component\" class=\"headerlink\" title=\"My TODO Angular Component\"></a>My TODO Angular Component</h2><p>Using the Angular CLI lets create a component by running the command <em><strong>ng g component my-todo</strong></em>. This creates Angular Component along with template HTML, styles related file. This Component lists my TODO items and lets me add one. Its very simple Angular Component and a good start for us. The component file is shown below, very straightforward <em>myTodos</em> to hold an array of strings, initiated with predefined values. An <em>addMyTodo</em> method to add to <em>myTodos</em> array.</p>\n<p>import { Component, OnInit } from “@angular/core”;<br>import { FormsModule } from ‘@angular/forms’;</p>\n<p>@Component({<br>  selector: “app-my-todo”,<br>  templateUrl: “./my-todo.component.html”,<br>  styleUrls: [“./my-todo.component.css”]<br>})<br>export class MyTodoComponent implements OnInit {<br>  myTodos: string[] = [];<br>  newTodo: string;<br>  constructor() {}</p>\n<p>  ngOnInit() {<br>    this.myTodos = [“Pay Bills”, “Clean Car”, “Pay Taxes”];<br>  }</p>\n<p>  addMyTodo() {<br>    this.myTodos.push(this.newTodo);<br>    this.newTodo = “”;<br>  }<br>}</p>\n<p>Run the <strong>ng build –watch</strong> in command line and refer the necessary script files in <em>About.cshtml;</em>  running MVC project &amp; navigating to About page, you would see a similar view. [caption id=”attachment_735” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/07/4.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/07/4-1024x311.png\" alt=\"angular elements\"></a> MyTodo Component running on MVC view[/caption]   Up until we have successfully integrated Angular app unto ASP.NET Core MVC application and run the application to see the above result. The source code until this point is in the <strong><a href=\"https://github.com/mithunvp/angularElementsDemo\" target=\"_blank\" rel=\"noopener\">MASTER</a></strong> branch of my Github repo.</p>\n<h2 id=\"Adding-Angular-Elements\"><a href=\"#Adding-Angular-Elements\" class=\"headerlink\" title=\"Adding Angular Elements\"></a>Adding Angular Elements</h2><p>To this point we haven’t come across Angular Elements concept, it was just Angular application being built. The very first question arises is <em>“What are Angular Elements?”</em>. In a nutshell, we can say <strong>_they help define new HTML elements in a framework-agnostic way. _</strong>Angular documentation states that</p>\n<blockquote>\n<p>Angular elements are Angular components packaged as <em>custom elements</em>, a web standard for defining new HTML elements in a framework-agnostic way.</p>\n</blockquote>\n<p>Framework-agnostic way means that “we build these custom elements using the Angular framework but they can be used with either React, Vue, any web-based front end or using plain Javascript just like any JS files are referred”. There is in-depth <a href=\"https://angular.io/guide/elements\" target=\"_blank\" rel=\"noopener\">documentation</a> on Angular Elements, a must read. Now run the command <strong>ng add @angular/elements</strong> from the root folder of the project (folder containing angular.json). It will start adding Angular elements package to existing Angular application. [caption id=”attachment_736” align=”aligncenter” width=”799”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/07/5.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/07/5.png\" alt=\"angular elements\"></a> AngularElements getting added[/caption]</p>\n<h2 id=\"Convert-Angular-Components-to-Angular-Elements\"><a href=\"#Convert-Angular-Components-to-Angular-Elements\" class=\"headerlink\" title=\"Convert Angular Components to Angular Elements\"></a>Convert Angular Components to Angular Elements</h2><p>Our aim here is to convert regular Angular Components into Angular Elements. One of the steps is to set encapsulation of component as <strong>Native</strong>. That is it will convert the component’s style, template &amp; template class into a single file. The modified <em>MyTodo</em> component created above would like this</p>\n<p>import { Component, OnInit,ViewEncapsulation } from “@angular/core”;<br>import { FormsModule } from ‘@angular/forms’;</p>\n<p>@Component({<br>  selector: “app-my-todo”,<br>  templateUrl: “./my-todo.component.html”,<br>  styleUrls: [“./my-todo.component.css”],<br>  encapsulation: ViewEncapsulation.Native<br>})<br>export class MyTodoComponent implements OnInit {<br>  myTodos: string[] = [];<br>  newTodo: string;<br>  constructor() {}</p>\n<p>  //Code removed for brevity<br>}</p>\n<p>Registering the <em>MyTodo</em> Component in <em>@NgModule</em> is the most important step to convert into Angular Element. For this, Angular’s framework has a <em><strong>createCustomElement</strong></em> function to create a class that can be used with browsers’ native <em><strong>customElements.define</strong></em> functionality. As per Angular documentation</p>\n<blockquote>\n<p>Builds a class that encapsulates the functionality of the provided component and uses the configuration information to provide more context to the class. <em>Takes the component factory’s inputs and outputs to convert them to the proper custom element API and add hooks to input changes.</em></p>\n</blockquote>\n<p>In short, it converts angular component as regular HTML element (like Input, Select, Radio etc) and understandable by various browsers (of course, polyfills needed for the older browser). <em>In our case or in general Angular Elements are neither part any other components or root of the Angular application. The Angular compiler needs to be informed that they must be compiled by adding to the <strong>entryComponent</strong> list of @NgModule.</em> As Angular Elements are self-bootstrapping, they act like normal HTML elements by bootstrapping automatically and adds itself to the DOM tree. For this reason, we have to add <strong>ngDoBootstrap()</strong> method to mention the list of angular elements to be loaded. The modified app.module.ts would look like this</p>\n<p>import { BrowserModule } from “@angular/platform-browser”;<br>import { NgModule, Injector } from “@angular/core”;<br>import { FormsModule } from “@angular/forms”;<br>import { createCustomElement } from “@angular/elements”;</p>\n<p>import { AppComponent } from “./app.component”;<br>import { MyTodoComponent } from “./my-todo/my-todo.component”;</p>\n<p>@NgModule({<br>  declarations: [AppComponent, MyTodoComponent],<br>  imports: [BrowserModule, FormsModule],<br>  entryComponents: [MyTodoComponent]<br>})<br>export class AppModule {<br>  constructor(private injector: Injector) {}</p>\n<p>  ngDoBootstrap() {<br>    const myTodoElment = createCustomElement(MyTodoComponent, {<br>      injector: this.injector<br>    });<br>    customElements.define(“mytodo-element”, myTodoElment);<br>  }<br>}</p>\n<h2 id=\"Angular-Element-accessing-Web-API\"><a href=\"#Angular-Element-accessing-Web-API\" class=\"headerlink\" title=\"Angular Element accessing Web API\"></a>Angular Element accessing Web API</h2><p>In the above example, we converted a regular angular component into an angular element (custom element). Let’s create another component which talks to GitHub APIs &amp; uses RxJS to map objects to particular class. Run the following Angular CLI command generate Angular Component <strong>ng g component git-repos -v Native</strong> This component calls the GitHub public APIs to get the list of the repository and its starred count. It has a text box to search enter the GitHub Username to fetch their public repository and its starred count. Let’s check out this component’s code</p>\n<p>import { Component, OnInit, ViewEncapsulation } from “@angular/core”;<br>import { HttpClient } from “@angular/common/http”;<br>import { map } from “rxjs/operators”;<br>import { GitHubRepoStars } from “./GitHubRepoStars”;<br>import { Observable } from “rxjs”;</p>\n<p>@Component({<br>  selector: “app-git-repos”,<br>  templateUrl: “./git-repos.component.html”,<br>  styleUrls: [“./git-repos.component.css”],<br>  encapsulation: ViewEncapsulation.Native<br>})<br>export class GitReposComponent implements OnInit {<br>  userName: string;<br>  gitRepos: Observable<githubrepostars>;<br>  constructor(private http: HttpClient) {}</githubrepostars></p>\n<p>  ngOnInit() {}</p>\n<pre><code>searchUserRepos() {\n  this.http.get(\\`https://api.github.com/users/${this.userName}/repos\\`).\n      pipe(\n      map((item: any) =&gt; item.map(p=&gt; &lt;GitHubRepoStars&gt;\n          {\n            name: p.name,\n            starsCount: p.stargazers_count\n\n          })))          \n      .subscribe((data) =&gt; {\n      this.gitRepos = data;\n  });\n</code></pre><p>  }<br>}</p>\n<p><em>Code walkthrough</em></p>\n<ul>\n<li><strong>HttpClient</strong> is imported to call the GitHub APIs</li>\n<li><strong>ViewEncapsulation</strong> is Native - It combines template, styles, components into a single file.</li>\n<li>The <em>searchUserRepos</em> method gets called when the user enters GitHub username. It uses Angular <em>HttpClient</em> to call API with username</li>\n<li>Using RxJS <strong>map</strong> operator to transform API response for our needs.</li>\n<li>Remember to <strong>subscribe,</strong> to call the API.</li>\n</ul>\n<p>Just like for above custom element, we have to add this <strong>GitReposComponent</strong> to @NgModule’s <em>entryComponents</em>, <em>createCustomElement</em> in ngDoBootstrap. The modified @NgModule would like</p>\n<p>//Code removed for brevity</p>\n<p>@NgModule({<br>  declarations: [AppComponent, MyTodoComponent, GitReposComponent],<br>  imports: [BrowserModule, FormsModule, HttpClientModule],<br>  entryComponents: [MyTodoComponent, GitReposComponent]<br>})<br>export class AppModule {<br>  constructor(private injector: Injector) {}</p>\n<p>  ngDoBootstrap() {<br>    const myTodoElment = createCustomElement(MyTodoComponent, {<br>      injector: this.injector<br>    });<br>    customElements.define(“mytodo-element”, myTodoElment);</p>\n<pre><code>const githubStars = createCustomElement(GitReposComponent, {\n  injector: this.injector\n});\ncustomElements.define(&quot;github-stars&quot;, githubStars);\n</code></pre><p>  }<br>}</p>\n<h2 id=\"Running-Angular-Elements-in-MVC-view\"><a href=\"#Running-Angular-Elements-in-MVC-view\" class=\"headerlink\" title=\"Running Angular Elements in MVC view\"></a>Running Angular Elements in MVC view</h2><p>Now that we are ready with custom elements, we integrate them in two MVC pages (about.cshtml &amp; contact.cshtml) as shown in the code snippet. <em>Remember JS files order is important</em></p>\n<h3>Demo of Angular Elements in ASP.NET Core</h3>\n\n<p>@section Scripts {<br>    <script type=\"text/javascript\" src=\"~/dist/runtime.js\"></script><br>    <script type=\"text/javascript\" src=\"~/dist/polyfills.js\"></script><br>    <script type=\"text/javascript\" src=\"~/dist/styles.js\"></script><br>    <script type=\"text/javascript\" src=\"~/dist/vendor.js\"></script><br>    <script type=\"text/javascript\" src=\"~/dist/scripts.js\"></script><br>    <script type=\"text/javascript\" src=\"~/dist/main.js\"></script><br>}</p>\n<p><mytodo-element></mytodo-element></p>\n<p>The <strong>mytodo-element</strong> is a custom HTML element we created in the above steps. Repeat the same for the <em><strong>github-stars</strong></em> custom element also. Running the ASP.NET Core application &amp; navigating to About &amp; Contact view will load respective custom elements. Remember from console window run the command <strong>ng build –watch</strong> to compile &amp; play around with component</p>\n<blockquote>\n<p>The <strong>scripts.js</strong> contains the custom elements i.e. <em>mytodo-element</em> and <em>github-stars</em></p>\n</blockquote>\n<p>[caption id=”attachment_740” align=”aligncenter” width=”928”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/07/2018-07-10-17_12_14-Contact-angularElementsDemo.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/07/2018-07-10-17_12_14-Contact-angularElementsDemo.png\" alt=\"\"></a> Custom Elements running in ASP.NET Core[/caption]</p>\n<h2 id=\"Getting-ready-for-deployment\"><a href=\"#Getting-ready-for-deployment\" class=\"headerlink\" title=\"Getting ready for deployment\"></a>Getting ready for deployment</h2><p>Now that we are ready for with Angular Elements development and tested it as in Chrome browser :). It’s time to deploy with ASP.NET Core MVC project with custom Elements. Here we will not be using the traditional approach of ASP.NET Core publishing. Our approach would be</p>\n<ul>\n<li>Use NPM scripts to create PROD worth bundle of the Angular app (i.e. angular with elements JS files).</li>\n<li>Invoke .NET Core publish from NPM scripts.</li>\n</ul>\n<p>To do this open <em>package.json</em>, add <em><strong>scripts</strong></em> entry as shown below</p>\n<p>“scripts”: {<br>    “ng”: “ng”,<br>    “start”: “ng serve”,<br>    “publish-for-deploy”: “ng build –prod –output-hashing=none &amp;&amp; dotnet publish -c Release”,<br>    “test”: “ng test”,<br>    “lint”: “ng lint”,<br>    “e2e”: “ng e2e”<br>  },</p>\n<p>The <strong>publish-for-deploy</strong> script entry generates production-ready angular (elements) files in <em>wwwroot/dist/</em> folder and also creates .NET Core publish folder in Release mode. Run this command from command line from project root folder <strong>npm run publish-for-deploy</strong> Once done with this publishing step, goto <em>bin/Release/netcoreapp2.1/publish</em> folder to deployment-ready build of ASP.NET Core with Angular Elements. You can deploy this on IIS or Nginx.</p>\n<h3 id=\"Source-Code\"><a href=\"#Source-Code\" class=\"headerlink\" title=\"Source Code\"></a>Source Code</h3><p>Check out my GitHub Repo <a href=\"https://github.com/mithunvp/angularElementsDemo\" target=\"_blank\" rel=\"noopener\"><em>angularElementsDemo</em></a> with branch name <strong>angular-elements</strong> for source code.</p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><ul>\n<li>Integrated Angular with ASP.NET Core 2.1 using Angular CLI</li>\n<li>Created two Angular Custom Elements. They are basic examples with Forms, HttpClient, RxJS</li>\n<li>Tried to demonstrate usage of Angular in non-SPA ASP.NET Core MVC application.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.mithunvp.com/wp-content/uploads/2018/07/1.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/07/1-300x148.png\" alt=\"Angular Elements\"></a>Can Angular framework be used in a Non-SPA (Single Page Application) way? Here is my attempt to use <strong>Angular Elements</strong> in ASP.NET Core 2.1 and use the Angular framework in a Non-SPA way.</p>\n<h2 id=\"Angular-as-Non-SPA\"><a href=\"#Angular-as-Non-SPA\" class=\"headerlink\" title=\"Angular as Non-SPA?\"></a>Angular as Non-SPA?</h2><p>Many of developers just like me got excited to use the Angular framework along with ASP.NET MVC either in MVC 5 or Core. I was tasked to use Angular in existing or brand new MVC application, here are my experience of using Angular with ASP.NET MVC.</p>\n<h4 id=\"Integration-of-Angular-framework\"><a href=\"#Integration-of-Angular-framework\" class=\"headerlink\" title=\"Integration of Angular framework\"></a>Integration of Angular framework</h4><p>Using these server-side technologies is not easy &amp; so much work needs to be done just to check its feasibility. I am talking about pre-Angular CLI days, I had to demo a small POC of Angular &amp; MVC5. The reaction was <em>it’s too much to get started</em>. But still business wants to use it. My GitHub repo <a href=\"https://github.com/mithunvp/ng2Mvc5Demo\" target=\"_blank\" rel=\"noopener\">ng2Mvc5Demo</a> has 120+ Stars, it indicates that everyone wants to try out Angular.</p>\n<h4 id=\"Cannot-use-it-as-NON-SPA\"><a href=\"#Cannot-use-it-as-NON-SPA\" class=\"headerlink\" title=\"Cannot use it as NON-SPA\"></a>Cannot use it as NON-SPA</h4><p>AngularJS was very easy, either download using NuGet or download using CDN and start developing. It can be used when needed i.e. suppose I wanted to use AngularJS in only 3 pages out of 10 pages, then it was so easy. But with Angular, it was not possible because of components being used in every <em>cshtml</em> page and routing approach to load them. In a real-world ASP.NET MVC application (either enterprise or medium), only a few pages would need a JavaScript-based code.</p>\n<h4 id=\"Challenge-of-Learning\"><a href=\"#Challenge-of-Learning\" class=\"headerlink\" title=\"Challenge of Learning\"></a>Challenge of Learning</h4><p>The learning curve for Angular is quite a bit in terms of TypeScript, RxJS, Component-based architecture, a different ecosystem of tooling etc. With this learning curve, the overall getting started with Angular was turn down. In Enterprise, we don’t have the luxury to train extensively. I hope many developers would feel the same.</p>\n<h4 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h4><p>Angular CLI can be used for smoother integration of Angular framework with ASP.NET Core and concept of <strong>Angular Elements</strong> can be used to treat Angular in a non-SPA way. Pre-requites</p>\n<ul>\n<li>.NET Core 2.1 SDK</li>\n<li>Visual Studio 2017 Preview - Community Edition</li>\n<li>Latest NodeJs installed</li>\n<li>Latest Angular CLI installed</li>\n</ul>\n<p><strong>What will we learn?</strong></p>\n<ul>\n<li>Create ASP.NET Core 2.1 (MVC) application.</li>\n<li>Integrating Angular with ASP.NET Core MVC using Angular CLI</li>\n<li>My TODO Component</li>\n<li>Adding Angular Elements</li>\n<li>Convert Angular Components as Custom Components</li>\n<li>Access Web API using HttpClient &amp; RxJS</li>\n<li>Debugging Angular Elements in MVC view</li>\n<li>Getting ready for deployment</li>\n</ul>\n<h2 id=\"Create-ASP-NET-Core-2-1-MVC-application\"><a href=\"#Create-ASP-NET-Core-2-1-MVC-application\" class=\"headerlink\" title=\"Create ASP.NET Core 2.1 (MVC) application\"></a>Create ASP.NET Core 2.1 (MVC) application</h2><p>I have created ASP.NET Core 2.1 (MVC) using Visual Studio 2017 Community Edition as shown below [caption id=”attachment_732” align=”aligncenter” width=”300”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/07/2.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/07/2-300x177.png\" alt=\"angular elements\"></a> Creating ASP.NET Core 2.1 MVC application[/caption]</p>\n<h2 id=\"Integrating-Angular-with-ASP-NET-Core-MVC-using-Angular-CLI\"><a href=\"#Integrating-Angular-with-ASP-NET-Core-MVC-using-Angular-CLI\" class=\"headerlink\" title=\"Integrating Angular with ASP.NET Core MVC using Angular CLI\"></a>Integrating Angular with ASP.NET Core MVC using Angular CLI</h2><p>Using the Angular CLI, we will be creating Angular 6 application inside the root directory of this MVC application. This step itself is a blog post, check out my article <a href=\"http://www.mithunvp.com/angular-asp-net-mvc-5-angular-cli-visual-studio-2017/\">Using Angular inside ASP.NET MVC 5 with Angular CLI using Visual Studio 2017</a> for detailed integration steps. Even though the article uses ASP.NET MVC 5 but still everything can be applied to ASP.NET Core. Once you’re up &amp; running the Angular application in ASP.NET Core, its time to add one simple component.</p>\n<h2 id=\"My-TODO-Angular-Component\"><a href=\"#My-TODO-Angular-Component\" class=\"headerlink\" title=\"My TODO Angular Component\"></a>My TODO Angular Component</h2><p>Using the Angular CLI lets create a component by running the command <em><strong>ng g component my-todo</strong></em>. This creates Angular Component along with template HTML, styles related file. This Component lists my TODO items and lets me add one. Its very simple Angular Component and a good start for us. The component file is shown below, very straightforward <em>myTodos</em> to hold an array of strings, initiated with predefined values. An <em>addMyTodo</em> method to add to <em>myTodos</em> array.</p>\n<p>import { Component, OnInit } from “@angular/core”;<br>import { FormsModule } from ‘@angular/forms’;</p>\n<p>@Component({<br>  selector: “app-my-todo”,<br>  templateUrl: “./my-todo.component.html”,<br>  styleUrls: [“./my-todo.component.css”]<br>})<br>export class MyTodoComponent implements OnInit {<br>  myTodos: string[] = [];<br>  newTodo: string;<br>  constructor() {}</p>\n<p>  ngOnInit() {<br>    this.myTodos = [“Pay Bills”, “Clean Car”, “Pay Taxes”];<br>  }</p>\n<p>  addMyTodo() {<br>    this.myTodos.push(this.newTodo);<br>    this.newTodo = “”;<br>  }<br>}</p>\n<p>Run the <strong>ng build –watch</strong> in command line and refer the necessary script files in <em>About.cshtml;</em>  running MVC project &amp; navigating to About page, you would see a similar view. [caption id=”attachment_735” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/07/4.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/07/4-1024x311.png\" alt=\"angular elements\"></a> MyTodo Component running on MVC view[/caption]   Up until we have successfully integrated Angular app unto ASP.NET Core MVC application and run the application to see the above result. The source code until this point is in the <strong><a href=\"https://github.com/mithunvp/angularElementsDemo\" target=\"_blank\" rel=\"noopener\">MASTER</a></strong> branch of my Github repo.</p>\n<h2 id=\"Adding-Angular-Elements\"><a href=\"#Adding-Angular-Elements\" class=\"headerlink\" title=\"Adding Angular Elements\"></a>Adding Angular Elements</h2><p>To this point we haven’t come across Angular Elements concept, it was just Angular application being built. The very first question arises is <em>“What are Angular Elements?”</em>. In a nutshell, we can say <strong>_they help define new HTML elements in a framework-agnostic way. _</strong>Angular documentation states that</p>\n<blockquote>\n<p>Angular elements are Angular components packaged as <em>custom elements</em>, a web standard for defining new HTML elements in a framework-agnostic way.</p>\n</blockquote>\n<p>Framework-agnostic way means that “we build these custom elements using the Angular framework but they can be used with either React, Vue, any web-based front end or using plain Javascript just like any JS files are referred”. There is in-depth <a href=\"https://angular.io/guide/elements\" target=\"_blank\" rel=\"noopener\">documentation</a> on Angular Elements, a must read. Now run the command <strong>ng add @angular/elements</strong> from the root folder of the project (folder containing angular.json). It will start adding Angular elements package to existing Angular application. [caption id=”attachment_736” align=”aligncenter” width=”799”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/07/5.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/07/5.png\" alt=\"angular elements\"></a> AngularElements getting added[/caption]</p>\n<h2 id=\"Convert-Angular-Components-to-Angular-Elements\"><a href=\"#Convert-Angular-Components-to-Angular-Elements\" class=\"headerlink\" title=\"Convert Angular Components to Angular Elements\"></a>Convert Angular Components to Angular Elements</h2><p>Our aim here is to convert regular Angular Components into Angular Elements. One of the steps is to set encapsulation of component as <strong>Native</strong>. That is it will convert the component’s style, template &amp; template class into a single file. The modified <em>MyTodo</em> component created above would like this</p>\n<p>import { Component, OnInit,ViewEncapsulation } from “@angular/core”;<br>import { FormsModule } from ‘@angular/forms’;</p>\n<p>@Component({<br>  selector: “app-my-todo”,<br>  templateUrl: “./my-todo.component.html”,<br>  styleUrls: [“./my-todo.component.css”],<br>  encapsulation: ViewEncapsulation.Native<br>})<br>export class MyTodoComponent implements OnInit {<br>  myTodos: string[] = [];<br>  newTodo: string;<br>  constructor() {}</p>\n<p>  //Code removed for brevity<br>}</p>\n<p>Registering the <em>MyTodo</em> Component in <em>@NgModule</em> is the most important step to convert into Angular Element. For this, Angular’s framework has a <em><strong>createCustomElement</strong></em> function to create a class that can be used with browsers’ native <em><strong>customElements.define</strong></em> functionality. As per Angular documentation</p>\n<blockquote>\n<p>Builds a class that encapsulates the functionality of the provided component and uses the configuration information to provide more context to the class. <em>Takes the component factory’s inputs and outputs to convert them to the proper custom element API and add hooks to input changes.</em></p>\n</blockquote>\n<p>In short, it converts angular component as regular HTML element (like Input, Select, Radio etc) and understandable by various browsers (of course, polyfills needed for the older browser). <em>In our case or in general Angular Elements are neither part any other components or root of the Angular application. The Angular compiler needs to be informed that they must be compiled by adding to the <strong>entryComponent</strong> list of @NgModule.</em> As Angular Elements are self-bootstrapping, they act like normal HTML elements by bootstrapping automatically and adds itself to the DOM tree. For this reason, we have to add <strong>ngDoBootstrap()</strong> method to mention the list of angular elements to be loaded. The modified app.module.ts would look like this</p>\n<p>import { BrowserModule } from “@angular/platform-browser”;<br>import { NgModule, Injector } from “@angular/core”;<br>import { FormsModule } from “@angular/forms”;<br>import { createCustomElement } from “@angular/elements”;</p>\n<p>import { AppComponent } from “./app.component”;<br>import { MyTodoComponent } from “./my-todo/my-todo.component”;</p>\n<p>@NgModule({<br>  declarations: [AppComponent, MyTodoComponent],<br>  imports: [BrowserModule, FormsModule],<br>  entryComponents: [MyTodoComponent]<br>})<br>export class AppModule {<br>  constructor(private injector: Injector) {}</p>\n<p>  ngDoBootstrap() {<br>    const myTodoElment = createCustomElement(MyTodoComponent, {<br>      injector: this.injector<br>    });<br>    customElements.define(“mytodo-element”, myTodoElment);<br>  }<br>}</p>\n<h2 id=\"Angular-Element-accessing-Web-API\"><a href=\"#Angular-Element-accessing-Web-API\" class=\"headerlink\" title=\"Angular Element accessing Web API\"></a>Angular Element accessing Web API</h2><p>In the above example, we converted a regular angular component into an angular element (custom element). Let’s create another component which talks to GitHub APIs &amp; uses RxJS to map objects to particular class. Run the following Angular CLI command generate Angular Component <strong>ng g component git-repos -v Native</strong> This component calls the GitHub public APIs to get the list of the repository and its starred count. It has a text box to search enter the GitHub Username to fetch their public repository and its starred count. Let’s check out this component’s code</p>\n<p>import { Component, OnInit, ViewEncapsulation } from “@angular/core”;<br>import { HttpClient } from “@angular/common/http”;<br>import { map } from “rxjs/operators”;<br>import { GitHubRepoStars } from “./GitHubRepoStars”;<br>import { Observable } from “rxjs”;</p>\n<p>@Component({<br>  selector: “app-git-repos”,<br>  templateUrl: “./git-repos.component.html”,<br>  styleUrls: [“./git-repos.component.css”],<br>  encapsulation: ViewEncapsulation.Native<br>})<br>export class GitReposComponent implements OnInit {<br>  userName: string;<br>  gitRepos: Observable<githubrepostars>;<br>  constructor(private http: HttpClient) {}</githubrepostars></p>\n<p>  ngOnInit() {}</p>\n<pre><code>searchUserRepos() {\n  this.http.get(\\`https://api.github.com/users/${this.userName}/repos\\`).\n      pipe(\n      map((item: any) =&gt; item.map(p=&gt; &lt;GitHubRepoStars&gt;\n          {\n            name: p.name,\n            starsCount: p.stargazers_count\n\n          })))          \n      .subscribe((data) =&gt; {\n      this.gitRepos = data;\n  });\n</code></pre><p>  }<br>}</p>\n<p><em>Code walkthrough</em></p>\n<ul>\n<li><strong>HttpClient</strong> is imported to call the GitHub APIs</li>\n<li><strong>ViewEncapsulation</strong> is Native - It combines template, styles, components into a single file.</li>\n<li>The <em>searchUserRepos</em> method gets called when the user enters GitHub username. It uses Angular <em>HttpClient</em> to call API with username</li>\n<li>Using RxJS <strong>map</strong> operator to transform API response for our needs.</li>\n<li>Remember to <strong>subscribe,</strong> to call the API.</li>\n</ul>\n<p>Just like for above custom element, we have to add this <strong>GitReposComponent</strong> to @NgModule’s <em>entryComponents</em>, <em>createCustomElement</em> in ngDoBootstrap. The modified @NgModule would like</p>\n<p>//Code removed for brevity</p>\n<p>@NgModule({<br>  declarations: [AppComponent, MyTodoComponent, GitReposComponent],<br>  imports: [BrowserModule, FormsModule, HttpClientModule],<br>  entryComponents: [MyTodoComponent, GitReposComponent]<br>})<br>export class AppModule {<br>  constructor(private injector: Injector) {}</p>\n<p>  ngDoBootstrap() {<br>    const myTodoElment = createCustomElement(MyTodoComponent, {<br>      injector: this.injector<br>    });<br>    customElements.define(“mytodo-element”, myTodoElment);</p>\n<pre><code>const githubStars = createCustomElement(GitReposComponent, {\n  injector: this.injector\n});\ncustomElements.define(&quot;github-stars&quot;, githubStars);\n</code></pre><p>  }<br>}</p>\n<h2 id=\"Running-Angular-Elements-in-MVC-view\"><a href=\"#Running-Angular-Elements-in-MVC-view\" class=\"headerlink\" title=\"Running Angular Elements in MVC view\"></a>Running Angular Elements in MVC view</h2><p>Now that we are ready with custom elements, we integrate them in two MVC pages (about.cshtml &amp; contact.cshtml) as shown in the code snippet. <em>Remember JS files order is important</em></p>\n<h3>Demo of Angular Elements in ASP.NET Core</h3>\n\n<p>@section Scripts {<br>    <script type=\"text/javascript\" src=\"~/dist/runtime.js\"></script><br>    <script type=\"text/javascript\" src=\"~/dist/polyfills.js\"></script><br>    <script type=\"text/javascript\" src=\"~/dist/styles.js\"></script><br>    <script type=\"text/javascript\" src=\"~/dist/vendor.js\"></script><br>    <script type=\"text/javascript\" src=\"~/dist/scripts.js\"></script><br>    <script type=\"text/javascript\" src=\"~/dist/main.js\"></script><br>}</p>\n<p><mytodo-element></mytodo-element></p>\n<p>The <strong>mytodo-element</strong> is a custom HTML element we created in the above steps. Repeat the same for the <em><strong>github-stars</strong></em> custom element also. Running the ASP.NET Core application &amp; navigating to About &amp; Contact view will load respective custom elements. Remember from console window run the command <strong>ng build –watch</strong> to compile &amp; play around with component</p>\n<blockquote>\n<p>The <strong>scripts.js</strong> contains the custom elements i.e. <em>mytodo-element</em> and <em>github-stars</em></p>\n</blockquote>\n<p>[caption id=”attachment_740” align=”aligncenter” width=”928”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2018/07/2018-07-10-17_12_14-Contact-angularElementsDemo.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2018/07/2018-07-10-17_12_14-Contact-angularElementsDemo.png\" alt=\"\"></a> Custom Elements running in ASP.NET Core[/caption]</p>\n<h2 id=\"Getting-ready-for-deployment\"><a href=\"#Getting-ready-for-deployment\" class=\"headerlink\" title=\"Getting ready for deployment\"></a>Getting ready for deployment</h2><p>Now that we are ready for with Angular Elements development and tested it as in Chrome browser :). It’s time to deploy with ASP.NET Core MVC project with custom Elements. Here we will not be using the traditional approach of ASP.NET Core publishing. Our approach would be</p>\n<ul>\n<li>Use NPM scripts to create PROD worth bundle of the Angular app (i.e. angular with elements JS files).</li>\n<li>Invoke .NET Core publish from NPM scripts.</li>\n</ul>\n<p>To do this open <em>package.json</em>, add <em><strong>scripts</strong></em> entry as shown below</p>\n<p>“scripts”: {<br>    “ng”: “ng”,<br>    “start”: “ng serve”,<br>    “publish-for-deploy”: “ng build –prod –output-hashing=none &amp;&amp; dotnet publish -c Release”,<br>    “test”: “ng test”,<br>    “lint”: “ng lint”,<br>    “e2e”: “ng e2e”<br>  },</p>\n<p>The <strong>publish-for-deploy</strong> script entry generates production-ready angular (elements) files in <em>wwwroot/dist/</em> folder and also creates .NET Core publish folder in Release mode. Run this command from command line from project root folder <strong>npm run publish-for-deploy</strong> Once done with this publishing step, goto <em>bin/Release/netcoreapp2.1/publish</em> folder to deployment-ready build of ASP.NET Core with Angular Elements. You can deploy this on IIS or Nginx.</p>\n<h3 id=\"Source-Code\"><a href=\"#Source-Code\" class=\"headerlink\" title=\"Source Code\"></a>Source Code</h3><p>Check out my GitHub Repo <a href=\"https://github.com/mithunvp/angularElementsDemo\" target=\"_blank\" rel=\"noopener\"><em>angularElementsDemo</em></a> with branch name <strong>angular-elements</strong> for source code.</p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><ul>\n<li>Integrated Angular with ASP.NET Core 2.1 using Angular CLI</li>\n<li>Created two Angular Custom Elements. They are basic examples with Forms, HttpClient, RxJS</li>\n<li>Tried to demonstrate usage of Angular in non-SPA ASP.NET Core MVC application.</li>\n</ul>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Angular Elements - How to use in ASP.NET Core using Angular CLI?","path":"using-angular-elements-asp-net-core-angular-cli-visual-studio/","eyeCatchImage":null,"excerpt":null,"date":"2018-07-10T12:34:42.000Z","pv":0,"totalPV":0,"categories":"Angular > ASP.NET Core 2","tags":["Angular","asp.net core"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ASP.NET Core Middleware - Write a Custom Middleware in Web API","url":"497.html","id":"497","date":"2016-06-09T15:08:01.000Z","_content":"\nASP.NET Core Middleware concept is one of powerful features introduced, it gives us complete control over HTTP pipeline using Request and response. They effectively replacement for HttpModules and HttpHandlers. ASP.NET docs explain [middleware](https://docs.asp.net/en/latest/fundamentals/middleware.html) concept quite well, have look at it. ASP.NET Core Middleware examples are UseMVC, UseStaticFiles, UseIdentity etc. They have specific purpose to do, thats why we might end with many of them. In this article, we will create custom middleware to be used in ASP.NET Core Web API. Lets understand the scenario for writing this custom middleware.\n\n*   Public APIs like Twitter, Google, Facebook etc provide us some sort of application key; naming them as \"app-key\", \"user-key\", \"api-key\" and so on.\n*   Similar to above examples, we might have created Web API which provides a key to those who are registered.\n*   Whenever a request hits our Web API, then we check if Request Headers contain this key or not then we move ahead to process the request positively or negatively.\n*   We will write custom middleware that checks request header and takes required action.\n\n> My scenario is \"A user registers in our system to generate a \"_**user-key**_\"; using this key all requests are sent. The Web API project will check if \"user-key\" exists or not in header. If exists move ahead to validate if key is part of our registered user, if not then respond back with 401 status code. If key not present in Header then it will be Bad Request.\n\nQuick assumptions \"Registered user-key's are present in C# list, a repository is injected in StartUp.cs which checks if user key exists in C# list. We can read from database (any source) to check user key\". Moving on from [Basic Web API](http://www.mithunvp.com/create-aspnet-mvc-6-web-api-visual-studio-2015/) created using ASP.NET Core, we will create following files in our solution\n\n*   Create \"**Middleware**\" folder in _ContactsAPI_ project, then create C# class \"_**UserKeyValidatorsMiddleware**_\".\n\nusing ContactsApi.Repository;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing System.Threading.Tasks;\n\nnamespace ContactsApi.Middleware\n{\n    public class UserKeyValidatorsMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private IContactsRepository ContactsRepo { get; set; }\n\n        public UserKeyValidatorsMiddleware(RequestDelegate next, IContactsRepository _repo)\n        {\n            _next = next;\n            ContactsRepo = _repo;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            if (!context.Request.Headers.Keys.Contains(\"user-key\"))\n            {\n                context.Response.StatusCode = 400; //Bad Request                \n                await context.Response.WriteAsync(\"User Key is missing\");\n                return;\n            }\n            else\n            {\n                if(!ContactsRepo.CheckValidUserKey(context.Request.Headers\\[\"user-key\"\\]))\n                {\n                    context.Response.StatusCode = 401; //UnAuthorized\n                    await context.Response.WriteAsync(\"Invalid User Key\");\n                    return;\n                }\n            }\n\n            await _next.Invoke(context);\n        }\n\n    }\n\n    #region ExtensionMethod\n    public static class UserKeyValidatorsExtension\n    {\n        public static IApplicationBuilder ApplyUserKeyValidation(this IApplicationBuilder app)\n        {\n            app.UseMiddleware<UserKeyValidatorsMiddleware>();\n            return app;\n        }\n    }\n    #endregion\n}\n\n_UserKeyValidatorsMiddleware_ as ASP.NET Core Middleware\n--------------------------------------------------------\n\n*   _RequestDelegate_ helps us invoking next component in pipeline.\n*   _**IContactsRepository**_ is DI to help us validate \"user-key\" against data source using method \"_CheckValidUserKey_\".\n*   The _**_next**_ property represents a delegate for the next component in the pipeline. Each component must also implement an _async_ task called **Invoke**\n*   In the Invoke method, we check if Request Header has \"user-key\" or not, if NO then return with Bad Request. If exists then check with against database if it exists or not. If NO then you are not Authorized is returned.\n*   C# Region \"_ExtensionMethod_\", provides user friendly name for this middleware when its placed in pipeline in StartUp.cs\n\nNow lets update _**IContactsRepository**_ to validate the user key Open _IContactsRepository_.cs and _ContactsRepository_.cs; add below code.\n\nusing ContactsApi.Models;\nusing System.Collections.Generic;\n\nnamespace ContactsApi.Repository\n{\n    public interface IContactsRepository\n    {\n        void Add(Contacts item);\n        IEnumerable<Contacts> GetAll();\n        Contacts Find(string key);\n        void Remove(string Id);\n        void Update(Contacts item);\n\n        bool CheckValidUserKey(string reqkey);\n    }\n}\n\n \n\nusing System.Collections.Generic;\nusing System.Linq;\nusing ContactsApi.Models;\n\nnamespace ContactsApi.Repository\n{\n    public class ContactsRepository : IContactsRepository\n    {\n        static List<Contacts> ContactsList = new List<Contacts>();\n\n        public void Add(Contacts item)\n        {\n            ContactsList.Add(item);\n        }\n\n        public bool CheckValidUserKey(string reqkey)\n        {\n            var userkeyList = new List<string>();\n            userkeyList.Add(\"28236d8ec201df516d0f6472d516d72d\");\n            userkeyList.Add(\"38236d8ec201df516d0f6472d516d72c\");\n            userkeyList.Add(\"48236d8ec201df516d0f6472d516d72b\");\n\n            if (userkeyList.Contains(reqkey))\n            {\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n        public Contacts Find(string key)\n        {\n            return ContactsList\n                .Where(e => e.MobilePhone.Equals(key))\n                .SingleOrDefault();\n        }\n\n        public IEnumerable<Contacts> GetAll()\n        {\n            ContactsList.Add(new Contacts() {FirstName =\"Mithun\", MobilePhone = \"2345\" });\n            return ContactsList;\n        }\n\n        public void Remove(string Id)\n        {\n            var itemToRemove = ContactsList.SingleOrDefault(r => r.MobilePhone == Id);\n            if (itemToRemove != null)\n                ContactsList.Remove(itemToRemove);\n        }\n\n        public void Update(Contacts item)\n        {\n            var itemToUpdate = ContactsList.SingleOrDefault(r => r.MobilePhone == item.MobilePhone);\n            if (itemToUpdate != null)\n            {\n                itemToUpdate.FirstName = item.FirstName;\n                itemToUpdate.LastName = item.LastName;\n                itemToUpdate.IsFamilyMember = item.IsFamilyMember;\n                itemToUpdate.Company = item.Company;\n                itemToUpdate.JobTitle = item.JobTitle;\n                itemToUpdate.Email = item.Email;\n                itemToUpdate.MobilePhone = item.MobilePhone;\n                itemToUpdate.DateOfBirth = item.DateOfBirth;\n                itemToUpdate.AnniversaryDate = item.AnniversaryDate;\n            }\n        }\n    }\n}\n\nOpen _**Startup.cs**_ to add following highlighted line of code in \"**Configure**\". _**ApplyUserKeyValidation**_ is extension method written above (Not mandatory to make extension method)\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n        {\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n            loggerFactory.AddDebug();\n\n            app.ApplyUserKeyValidation();\n\n            app.UseMvc();\n        }\n\nNow that we have created custom ASP.NET Core Middleware, added repository using DI and added it to pipeline. Let's see it working. Use POSTMAN to test this Web API **Test 1**: _user-key_ doesn't exists in Request Header. \\[caption id=\"attachment_499\" align=\"aligncenter\" width=\"1024\"\\][![ASP.NET Core Middleware](http://www.mithunvp.com/wp-content/uploads/2016/06/middleware1-1024x426.png)](http://www.mithunvp.com/wp-content/uploads/2016/06/middleware1.png) Test showing \"User Key\" not present in Request Header\\[/caption\\] **Test 2:** _user-key_ exists but is INVALID \\[caption id=\"attachment_500\" align=\"aligncenter\" width=\"1024\"\\][![asp.net core middleware](http://www.mithunvp.com/wp-content/uploads/2016/06/middleware2-1024x400.png)](http://www.mithunvp.com/wp-content/uploads/2016/06/middleware2.png) user-key exists in Request Header but is INVALID\\[/caption\\] **Test 3**: _user-key _exists, its VALID and return JSON response also. \\[caption id=\"attachment_501\" align=\"aligncenter\" width=\"1024\"\\][![asp.net core middleware](http://www.mithunvp.com/wp-content/uploads/2016/06/middleware3-1024x516.png)](http://www.mithunvp.com/wp-content/uploads/2016/06/middleware3.png) Valid user-key exists and JSON response is seen\\[/caption\\] Refer [ContactsAPI repo](https://github.com/mithunvp/ContactsAPI) on Github for full source code. Let me know your thoughts on this.","source":"_posts/write-custom-asp-net-core-middleware-web-api.md","raw":"---\ntitle: ASP.NET Core Middleware - Write a Custom Middleware in Web API\ntags:\n  - Asp.NET Core 1.0\n  - 'C#'\n  - middleware\nurl: 497.html\nid: 497\ncategories:\n  - ASP.NET Core 1.0\ndate: 2016-06-09 20:38:01\n---\n\nASP.NET Core Middleware concept is one of powerful features introduced, it gives us complete control over HTTP pipeline using Request and response. They effectively replacement for HttpModules and HttpHandlers. ASP.NET docs explain [middleware](https://docs.asp.net/en/latest/fundamentals/middleware.html) concept quite well, have look at it. ASP.NET Core Middleware examples are UseMVC, UseStaticFiles, UseIdentity etc. They have specific purpose to do, thats why we might end with many of them. In this article, we will create custom middleware to be used in ASP.NET Core Web API. Lets understand the scenario for writing this custom middleware.\n\n*   Public APIs like Twitter, Google, Facebook etc provide us some sort of application key; naming them as \"app-key\", \"user-key\", \"api-key\" and so on.\n*   Similar to above examples, we might have created Web API which provides a key to those who are registered.\n*   Whenever a request hits our Web API, then we check if Request Headers contain this key or not then we move ahead to process the request positively or negatively.\n*   We will write custom middleware that checks request header and takes required action.\n\n> My scenario is \"A user registers in our system to generate a \"_**user-key**_\"; using this key all requests are sent. The Web API project will check if \"user-key\" exists or not in header. If exists move ahead to validate if key is part of our registered user, if not then respond back with 401 status code. If key not present in Header then it will be Bad Request.\n\nQuick assumptions \"Registered user-key's are present in C# list, a repository is injected in StartUp.cs which checks if user key exists in C# list. We can read from database (any source) to check user key\". Moving on from [Basic Web API](http://www.mithunvp.com/create-aspnet-mvc-6-web-api-visual-studio-2015/) created using ASP.NET Core, we will create following files in our solution\n\n*   Create \"**Middleware**\" folder in _ContactsAPI_ project, then create C# class \"_**UserKeyValidatorsMiddleware**_\".\n\nusing ContactsApi.Repository;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing System.Threading.Tasks;\n\nnamespace ContactsApi.Middleware\n{\n    public class UserKeyValidatorsMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private IContactsRepository ContactsRepo { get; set; }\n\n        public UserKeyValidatorsMiddleware(RequestDelegate next, IContactsRepository _repo)\n        {\n            _next = next;\n            ContactsRepo = _repo;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            if (!context.Request.Headers.Keys.Contains(\"user-key\"))\n            {\n                context.Response.StatusCode = 400; //Bad Request                \n                await context.Response.WriteAsync(\"User Key is missing\");\n                return;\n            }\n            else\n            {\n                if(!ContactsRepo.CheckValidUserKey(context.Request.Headers\\[\"user-key\"\\]))\n                {\n                    context.Response.StatusCode = 401; //UnAuthorized\n                    await context.Response.WriteAsync(\"Invalid User Key\");\n                    return;\n                }\n            }\n\n            await _next.Invoke(context);\n        }\n\n    }\n\n    #region ExtensionMethod\n    public static class UserKeyValidatorsExtension\n    {\n        public static IApplicationBuilder ApplyUserKeyValidation(this IApplicationBuilder app)\n        {\n            app.UseMiddleware<UserKeyValidatorsMiddleware>();\n            return app;\n        }\n    }\n    #endregion\n}\n\n_UserKeyValidatorsMiddleware_ as ASP.NET Core Middleware\n--------------------------------------------------------\n\n*   _RequestDelegate_ helps us invoking next component in pipeline.\n*   _**IContactsRepository**_ is DI to help us validate \"user-key\" against data source using method \"_CheckValidUserKey_\".\n*   The _**_next**_ property represents a delegate for the next component in the pipeline. Each component must also implement an _async_ task called **Invoke**\n*   In the Invoke method, we check if Request Header has \"user-key\" or not, if NO then return with Bad Request. If exists then check with against database if it exists or not. If NO then you are not Authorized is returned.\n*   C# Region \"_ExtensionMethod_\", provides user friendly name for this middleware when its placed in pipeline in StartUp.cs\n\nNow lets update _**IContactsRepository**_ to validate the user key Open _IContactsRepository_.cs and _ContactsRepository_.cs; add below code.\n\nusing ContactsApi.Models;\nusing System.Collections.Generic;\n\nnamespace ContactsApi.Repository\n{\n    public interface IContactsRepository\n    {\n        void Add(Contacts item);\n        IEnumerable<Contacts> GetAll();\n        Contacts Find(string key);\n        void Remove(string Id);\n        void Update(Contacts item);\n\n        bool CheckValidUserKey(string reqkey);\n    }\n}\n\n \n\nusing System.Collections.Generic;\nusing System.Linq;\nusing ContactsApi.Models;\n\nnamespace ContactsApi.Repository\n{\n    public class ContactsRepository : IContactsRepository\n    {\n        static List<Contacts> ContactsList = new List<Contacts>();\n\n        public void Add(Contacts item)\n        {\n            ContactsList.Add(item);\n        }\n\n        public bool CheckValidUserKey(string reqkey)\n        {\n            var userkeyList = new List<string>();\n            userkeyList.Add(\"28236d8ec201df516d0f6472d516d72d\");\n            userkeyList.Add(\"38236d8ec201df516d0f6472d516d72c\");\n            userkeyList.Add(\"48236d8ec201df516d0f6472d516d72b\");\n\n            if (userkeyList.Contains(reqkey))\n            {\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n        public Contacts Find(string key)\n        {\n            return ContactsList\n                .Where(e => e.MobilePhone.Equals(key))\n                .SingleOrDefault();\n        }\n\n        public IEnumerable<Contacts> GetAll()\n        {\n            ContactsList.Add(new Contacts() {FirstName =\"Mithun\", MobilePhone = \"2345\" });\n            return ContactsList;\n        }\n\n        public void Remove(string Id)\n        {\n            var itemToRemove = ContactsList.SingleOrDefault(r => r.MobilePhone == Id);\n            if (itemToRemove != null)\n                ContactsList.Remove(itemToRemove);\n        }\n\n        public void Update(Contacts item)\n        {\n            var itemToUpdate = ContactsList.SingleOrDefault(r => r.MobilePhone == item.MobilePhone);\n            if (itemToUpdate != null)\n            {\n                itemToUpdate.FirstName = item.FirstName;\n                itemToUpdate.LastName = item.LastName;\n                itemToUpdate.IsFamilyMember = item.IsFamilyMember;\n                itemToUpdate.Company = item.Company;\n                itemToUpdate.JobTitle = item.JobTitle;\n                itemToUpdate.Email = item.Email;\n                itemToUpdate.MobilePhone = item.MobilePhone;\n                itemToUpdate.DateOfBirth = item.DateOfBirth;\n                itemToUpdate.AnniversaryDate = item.AnniversaryDate;\n            }\n        }\n    }\n}\n\nOpen _**Startup.cs**_ to add following highlighted line of code in \"**Configure**\". _**ApplyUserKeyValidation**_ is extension method written above (Not mandatory to make extension method)\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n        {\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n            loggerFactory.AddDebug();\n\n            app.ApplyUserKeyValidation();\n\n            app.UseMvc();\n        }\n\nNow that we have created custom ASP.NET Core Middleware, added repository using DI and added it to pipeline. Let's see it working. Use POSTMAN to test this Web API **Test 1**: _user-key_ doesn't exists in Request Header. \\[caption id=\"attachment_499\" align=\"aligncenter\" width=\"1024\"\\][![ASP.NET Core Middleware](http://www.mithunvp.com/wp-content/uploads/2016/06/middleware1-1024x426.png)](http://www.mithunvp.com/wp-content/uploads/2016/06/middleware1.png) Test showing \"User Key\" not present in Request Header\\[/caption\\] **Test 2:** _user-key_ exists but is INVALID \\[caption id=\"attachment_500\" align=\"aligncenter\" width=\"1024\"\\][![asp.net core middleware](http://www.mithunvp.com/wp-content/uploads/2016/06/middleware2-1024x400.png)](http://www.mithunvp.com/wp-content/uploads/2016/06/middleware2.png) user-key exists in Request Header but is INVALID\\[/caption\\] **Test 3**: _user-key _exists, its VALID and return JSON response also. \\[caption id=\"attachment_501\" align=\"aligncenter\" width=\"1024\"\\][![asp.net core middleware](http://www.mithunvp.com/wp-content/uploads/2016/06/middleware3-1024x516.png)](http://www.mithunvp.com/wp-content/uploads/2016/06/middleware3.png) Valid user-key exists and JSON response is seen\\[/caption\\] Refer [ContactsAPI repo](https://github.com/mithunvp/ContactsAPI) on Github for full source code. Let me know your thoughts on this.","slug":"write-custom-asp-net-core-middleware-web-api","published":1,"updated":"2018-07-10T19:49:06.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034xg0021s4tj2x1y9t6z","content":"<p>ASP.NET Core Middleware concept is one of powerful features introduced, it gives us complete control over HTTP pipeline using Request and response. They effectively replacement for HttpModules and HttpHandlers. ASP.NET docs explain <a href=\"https://docs.asp.net/en/latest/fundamentals/middleware.html\" target=\"_blank\" rel=\"noopener\">middleware</a> concept quite well, have look at it. ASP.NET Core Middleware examples are UseMVC, UseStaticFiles, UseIdentity etc. They have specific purpose to do, thats why we might end with many of them. In this article, we will create custom middleware to be used in ASP.NET Core Web API. Lets understand the scenario for writing this custom middleware.</p>\n<ul>\n<li>Public APIs like Twitter, Google, Facebook etc provide us some sort of application key; naming them as “app-key”, “user-key”, “api-key” and so on.</li>\n<li>Similar to above examples, we might have created Web API which provides a key to those who are registered.</li>\n<li>Whenever a request hits our Web API, then we check if Request Headers contain this key or not then we move ahead to process the request positively or negatively.</li>\n<li>We will write custom middleware that checks request header and takes required action.</li>\n</ul>\n<blockquote>\n<p>My scenario is “A user registers in our system to generate a “<em><strong>user-key</strong></em>“; using this key all requests are sent. The Web API project will check if “user-key” exists or not in header. If exists move ahead to validate if key is part of our registered user, if not then respond back with 401 status code. If key not present in Header then it will be Bad Request.</p>\n</blockquote>\n<p>Quick assumptions “Registered user-key’s are present in C# list, a repository is injected in StartUp.cs which checks if user key exists in C# list. We can read from database (any source) to check user key”. Moving on from <a href=\"http://www.mithunvp.com/create-aspnet-mvc-6-web-api-visual-studio-2015/\">Basic Web API</a> created using ASP.NET Core, we will create following files in our solution</p>\n<ul>\n<li>Create “<strong>Middleware</strong>“ folder in <em>ContactsAPI</em> project, then create C# class “<em><strong>UserKeyValidatorsMiddleware</strong></em>“.</li>\n</ul>\n<p>using ContactsApi.Repository;<br>using Microsoft.AspNetCore.Builder;<br>using Microsoft.AspNetCore.Http;<br>using System.Threading.Tasks;</p>\n<p>namespace ContactsApi.Middleware<br>{<br>    public class UserKeyValidatorsMiddleware<br>    {<br>        private readonly RequestDelegate _next;<br>        private IContactsRepository ContactsRepo { get; set; }</p>\n<pre><code>    public UserKeyValidatorsMiddleware(RequestDelegate next, IContactsRepository _repo)\n    {\n        _next = next;\n        ContactsRepo = _repo;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        if (!context.Request.Headers.Keys.Contains(&quot;user-key&quot;))\n        {\n            context.Response.StatusCode = 400; //Bad Request                \n            await context.Response.WriteAsync(&quot;User Key is missing&quot;);\n            return;\n        }\n        else\n        {\n            if(!ContactsRepo.CheckValidUserKey(context.Request.Headers\\[&quot;user-key&quot;\\]))\n            {\n                context.Response.StatusCode = 401; //UnAuthorized\n                await context.Response.WriteAsync(&quot;Invalid User Key&quot;);\n                return;\n            }\n        }\n\n        await _next.Invoke(context);\n    }\n\n}\n\n#region ExtensionMethod\npublic static class UserKeyValidatorsExtension\n{\n    public static IApplicationBuilder ApplyUserKeyValidation(this IApplicationBuilder app)\n    {\n        app.UseMiddleware&lt;UserKeyValidatorsMiddleware&gt;();\n        return app;\n    }\n}\n#endregion\n</code></pre><p>}</p>\n<h2 id=\"UserKeyValidatorsMiddleware-as-ASP-NET-Core-Middleware\"><a href=\"#UserKeyValidatorsMiddleware-as-ASP-NET-Core-Middleware\" class=\"headerlink\" title=\"UserKeyValidatorsMiddleware as ASP.NET Core Middleware\"></a><em>UserKeyValidatorsMiddleware</em> as ASP.NET Core Middleware</h2><ul>\n<li><em>RequestDelegate</em> helps us invoking next component in pipeline.</li>\n<li><em><strong>IContactsRepository</strong></em> is DI to help us validate “user-key” against data source using method “<em>CheckValidUserKey</em>“.</li>\n<li>The _<strong>_next</strong>_ property represents a delegate for the next component in the pipeline. Each component must also implement an <em>async</em> task called <strong>Invoke</strong></li>\n<li>In the Invoke method, we check if Request Header has “user-key” or not, if NO then return with Bad Request. If exists then check with against database if it exists or not. If NO then you are not Authorized is returned.</li>\n<li>C# Region “<em>ExtensionMethod</em>“, provides user friendly name for this middleware when its placed in pipeline in StartUp.cs</li>\n</ul>\n<p>Now lets update <em><strong>IContactsRepository</strong></em> to validate the user key Open <em>IContactsRepository</em>.cs and <em>ContactsRepository</em>.cs; add below code.</p>\n<p>using ContactsApi.Models;<br>using System.Collections.Generic;</p>\n<p>namespace ContactsApi.Repository<br>{<br>    public interface IContactsRepository<br>    {<br>        void Add(Contacts item);<br>        IEnumerable<contacts> GetAll();<br>        Contacts Find(string key);<br>        void Remove(string Id);<br>        void Update(Contacts item);</contacts></p>\n<pre><code>    bool CheckValidUserKey(string reqkey);\n}\n</code></pre><p>}</p>\n<p>using System.Collections.Generic;<br>using System.Linq;<br>using ContactsApi.Models;</p>\n<p>namespace ContactsApi.Repository<br>{<br>    public class ContactsRepository : IContactsRepository<br>    {<br>        static List<contacts> ContactsList = new List<contacts>();</contacts></contacts></p>\n<pre><code>    public void Add(Contacts item)\n    {\n        ContactsList.Add(item);\n    }\n\n    public bool CheckValidUserKey(string reqkey)\n    {\n        var userkeyList = new List&lt;string&gt;();\n        userkeyList.Add(&quot;28236d8ec201df516d0f6472d516d72d&quot;);\n        userkeyList.Add(&quot;38236d8ec201df516d0f6472d516d72c&quot;);\n        userkeyList.Add(&quot;48236d8ec201df516d0f6472d516d72b&quot;);\n\n        if (userkeyList.Contains(reqkey))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public Contacts Find(string key)\n    {\n        return ContactsList\n            .Where(e =&gt; e.MobilePhone.Equals(key))\n            .SingleOrDefault();\n    }\n\n    public IEnumerable&lt;Contacts&gt; GetAll()\n    {\n        ContactsList.Add(new Contacts() {FirstName =&quot;Mithun&quot;, MobilePhone = &quot;2345&quot; });\n        return ContactsList;\n    }\n\n    public void Remove(string Id)\n    {\n        var itemToRemove = ContactsList.SingleOrDefault(r =&gt; r.MobilePhone == Id);\n        if (itemToRemove != null)\n            ContactsList.Remove(itemToRemove);\n    }\n\n    public void Update(Contacts item)\n    {\n        var itemToUpdate = ContactsList.SingleOrDefault(r =&gt; r.MobilePhone == item.MobilePhone);\n        if (itemToUpdate != null)\n        {\n            itemToUpdate.FirstName = item.FirstName;\n            itemToUpdate.LastName = item.LastName;\n            itemToUpdate.IsFamilyMember = item.IsFamilyMember;\n            itemToUpdate.Company = item.Company;\n            itemToUpdate.JobTitle = item.JobTitle;\n            itemToUpdate.Email = item.Email;\n            itemToUpdate.MobilePhone = item.MobilePhone;\n            itemToUpdate.DateOfBirth = item.DateOfBirth;\n            itemToUpdate.AnniversaryDate = item.AnniversaryDate;\n        }\n    }\n}\n</code></pre><p>}</p>\n<p>Open <em><strong>Startup.cs</strong></em> to add following highlighted line of code in “<strong>Configure</strong>“. <em><strong>ApplyUserKeyValidation</strong></em> is extension method written above (Not mandatory to make extension method)</p>\n<p>public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)<br>        {<br>            loggerFactory.AddConsole(Configuration.GetSection(“Logging”));<br>            loggerFactory.AddDebug();</p>\n<pre><code>    app.ApplyUserKeyValidation();\n\n    app.UseMvc();\n}\n</code></pre><p>Now that we have created custom ASP.NET Core Middleware, added repository using DI and added it to pipeline. Let’s see it working. Use POSTMAN to test this Web API <strong>Test 1</strong>: <em>user-key</em> doesn’t exists in Request Header. [caption id=”attachment_499” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/06/middleware1.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/06/middleware1-1024x426.png\" alt=\"ASP.NET Core Middleware\"></a> Test showing “User Key” not present in Request Header[/caption] <strong>Test 2:</strong> <em>user-key</em> exists but is INVALID [caption id=”attachment_500” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/06/middleware2.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/06/middleware2-1024x400.png\" alt=\"asp.net core middleware\"></a> user-key exists in Request Header but is INVALID[/caption] <strong>Test 3</strong>: _user-key _exists, its VALID and return JSON response also. [caption id=”attachment_501” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/06/middleware3.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/06/middleware3-1024x516.png\" alt=\"asp.net core middleware\"></a> Valid user-key exists and JSON response is seen[/caption] Refer <a href=\"https://github.com/mithunvp/ContactsAPI\" target=\"_blank\" rel=\"noopener\">ContactsAPI repo</a> on Github for full source code. Let me know your thoughts on this.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ASP.NET Core Middleware concept is one of powerful features introduced, it gives us complete control over HTTP pipeline using Request and response. They effectively replacement for HttpModules and HttpHandlers. ASP.NET docs explain <a href=\"https://docs.asp.net/en/latest/fundamentals/middleware.html\" target=\"_blank\" rel=\"noopener\">middleware</a> concept quite well, have look at it. ASP.NET Core Middleware examples are UseMVC, UseStaticFiles, UseIdentity etc. They have specific purpose to do, thats why we might end with many of them. In this article, we will create custom middleware to be used in ASP.NET Core Web API. Lets understand the scenario for writing this custom middleware.</p>\n<ul>\n<li>Public APIs like Twitter, Google, Facebook etc provide us some sort of application key; naming them as “app-key”, “user-key”, “api-key” and so on.</li>\n<li>Similar to above examples, we might have created Web API which provides a key to those who are registered.</li>\n<li>Whenever a request hits our Web API, then we check if Request Headers contain this key or not then we move ahead to process the request positively or negatively.</li>\n<li>We will write custom middleware that checks request header and takes required action.</li>\n</ul>\n<blockquote>\n<p>My scenario is “A user registers in our system to generate a “<em><strong>user-key</strong></em>“; using this key all requests are sent. The Web API project will check if “user-key” exists or not in header. If exists move ahead to validate if key is part of our registered user, if not then respond back with 401 status code. If key not present in Header then it will be Bad Request.</p>\n</blockquote>\n<p>Quick assumptions “Registered user-key’s are present in C# list, a repository is injected in StartUp.cs which checks if user key exists in C# list. We can read from database (any source) to check user key”. Moving on from <a href=\"http://www.mithunvp.com/create-aspnet-mvc-6-web-api-visual-studio-2015/\">Basic Web API</a> created using ASP.NET Core, we will create following files in our solution</p>\n<ul>\n<li>Create “<strong>Middleware</strong>“ folder in <em>ContactsAPI</em> project, then create C# class “<em><strong>UserKeyValidatorsMiddleware</strong></em>“.</li>\n</ul>\n<p>using ContactsApi.Repository;<br>using Microsoft.AspNetCore.Builder;<br>using Microsoft.AspNetCore.Http;<br>using System.Threading.Tasks;</p>\n<p>namespace ContactsApi.Middleware<br>{<br>    public class UserKeyValidatorsMiddleware<br>    {<br>        private readonly RequestDelegate _next;<br>        private IContactsRepository ContactsRepo { get; set; }</p>\n<pre><code>    public UserKeyValidatorsMiddleware(RequestDelegate next, IContactsRepository _repo)\n    {\n        _next = next;\n        ContactsRepo = _repo;\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        if (!context.Request.Headers.Keys.Contains(&quot;user-key&quot;))\n        {\n            context.Response.StatusCode = 400; //Bad Request                \n            await context.Response.WriteAsync(&quot;User Key is missing&quot;);\n            return;\n        }\n        else\n        {\n            if(!ContactsRepo.CheckValidUserKey(context.Request.Headers\\[&quot;user-key&quot;\\]))\n            {\n                context.Response.StatusCode = 401; //UnAuthorized\n                await context.Response.WriteAsync(&quot;Invalid User Key&quot;);\n                return;\n            }\n        }\n\n        await _next.Invoke(context);\n    }\n\n}\n\n#region ExtensionMethod\npublic static class UserKeyValidatorsExtension\n{\n    public static IApplicationBuilder ApplyUserKeyValidation(this IApplicationBuilder app)\n    {\n        app.UseMiddleware&lt;UserKeyValidatorsMiddleware&gt;();\n        return app;\n    }\n}\n#endregion\n</code></pre><p>}</p>\n<h2 id=\"UserKeyValidatorsMiddleware-as-ASP-NET-Core-Middleware\"><a href=\"#UserKeyValidatorsMiddleware-as-ASP-NET-Core-Middleware\" class=\"headerlink\" title=\"UserKeyValidatorsMiddleware as ASP.NET Core Middleware\"></a><em>UserKeyValidatorsMiddleware</em> as ASP.NET Core Middleware</h2><ul>\n<li><em>RequestDelegate</em> helps us invoking next component in pipeline.</li>\n<li><em><strong>IContactsRepository</strong></em> is DI to help us validate “user-key” against data source using method “<em>CheckValidUserKey</em>“.</li>\n<li>The _<strong>_next</strong>_ property represents a delegate for the next component in the pipeline. Each component must also implement an <em>async</em> task called <strong>Invoke</strong></li>\n<li>In the Invoke method, we check if Request Header has “user-key” or not, if NO then return with Bad Request. If exists then check with against database if it exists or not. If NO then you are not Authorized is returned.</li>\n<li>C# Region “<em>ExtensionMethod</em>“, provides user friendly name for this middleware when its placed in pipeline in StartUp.cs</li>\n</ul>\n<p>Now lets update <em><strong>IContactsRepository</strong></em> to validate the user key Open <em>IContactsRepository</em>.cs and <em>ContactsRepository</em>.cs; add below code.</p>\n<p>using ContactsApi.Models;<br>using System.Collections.Generic;</p>\n<p>namespace ContactsApi.Repository<br>{<br>    public interface IContactsRepository<br>    {<br>        void Add(Contacts item);<br>        IEnumerable<contacts> GetAll();<br>        Contacts Find(string key);<br>        void Remove(string Id);<br>        void Update(Contacts item);</contacts></p>\n<pre><code>    bool CheckValidUserKey(string reqkey);\n}\n</code></pre><p>}</p>\n<p>using System.Collections.Generic;<br>using System.Linq;<br>using ContactsApi.Models;</p>\n<p>namespace ContactsApi.Repository<br>{<br>    public class ContactsRepository : IContactsRepository<br>    {<br>        static List<contacts> ContactsList = new List<contacts>();</contacts></contacts></p>\n<pre><code>    public void Add(Contacts item)\n    {\n        ContactsList.Add(item);\n    }\n\n    public bool CheckValidUserKey(string reqkey)\n    {\n        var userkeyList = new List&lt;string&gt;();\n        userkeyList.Add(&quot;28236d8ec201df516d0f6472d516d72d&quot;);\n        userkeyList.Add(&quot;38236d8ec201df516d0f6472d516d72c&quot;);\n        userkeyList.Add(&quot;48236d8ec201df516d0f6472d516d72b&quot;);\n\n        if (userkeyList.Contains(reqkey))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public Contacts Find(string key)\n    {\n        return ContactsList\n            .Where(e =&gt; e.MobilePhone.Equals(key))\n            .SingleOrDefault();\n    }\n\n    public IEnumerable&lt;Contacts&gt; GetAll()\n    {\n        ContactsList.Add(new Contacts() {FirstName =&quot;Mithun&quot;, MobilePhone = &quot;2345&quot; });\n        return ContactsList;\n    }\n\n    public void Remove(string Id)\n    {\n        var itemToRemove = ContactsList.SingleOrDefault(r =&gt; r.MobilePhone == Id);\n        if (itemToRemove != null)\n            ContactsList.Remove(itemToRemove);\n    }\n\n    public void Update(Contacts item)\n    {\n        var itemToUpdate = ContactsList.SingleOrDefault(r =&gt; r.MobilePhone == item.MobilePhone);\n        if (itemToUpdate != null)\n        {\n            itemToUpdate.FirstName = item.FirstName;\n            itemToUpdate.LastName = item.LastName;\n            itemToUpdate.IsFamilyMember = item.IsFamilyMember;\n            itemToUpdate.Company = item.Company;\n            itemToUpdate.JobTitle = item.JobTitle;\n            itemToUpdate.Email = item.Email;\n            itemToUpdate.MobilePhone = item.MobilePhone;\n            itemToUpdate.DateOfBirth = item.DateOfBirth;\n            itemToUpdate.AnniversaryDate = item.AnniversaryDate;\n        }\n    }\n}\n</code></pre><p>}</p>\n<p>Open <em><strong>Startup.cs</strong></em> to add following highlighted line of code in “<strong>Configure</strong>“. <em><strong>ApplyUserKeyValidation</strong></em> is extension method written above (Not mandatory to make extension method)</p>\n<p>public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)<br>        {<br>            loggerFactory.AddConsole(Configuration.GetSection(“Logging”));<br>            loggerFactory.AddDebug();</p>\n<pre><code>    app.ApplyUserKeyValidation();\n\n    app.UseMvc();\n}\n</code></pre><p>Now that we have created custom ASP.NET Core Middleware, added repository using DI and added it to pipeline. Let’s see it working. Use POSTMAN to test this Web API <strong>Test 1</strong>: <em>user-key</em> doesn’t exists in Request Header. [caption id=”attachment_499” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/06/middleware1.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/06/middleware1-1024x426.png\" alt=\"ASP.NET Core Middleware\"></a> Test showing “User Key” not present in Request Header[/caption] <strong>Test 2:</strong> <em>user-key</em> exists but is INVALID [caption id=”attachment_500” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/06/middleware2.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/06/middleware2-1024x400.png\" alt=\"asp.net core middleware\"></a> user-key exists in Request Header but is INVALID[/caption] <strong>Test 3</strong>: _user-key _exists, its VALID and return JSON response also. [caption id=”attachment_501” align=”aligncenter” width=”1024”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2016/06/middleware3.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2016/06/middleware3-1024x516.png\" alt=\"asp.net core middleware\"></a> Valid user-key exists and JSON response is seen[/caption] Refer <a href=\"https://github.com/mithunvp/ContactsAPI\" target=\"_blank\" rel=\"noopener\">ContactsAPI repo</a> on Github for full source code. Let me know your thoughts on this.</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"ASP.NET Core Middleware - Write a Custom Middleware in Web API","path":"write-custom-asp-net-core-middleware-web-api/","eyeCatchImage":null,"excerpt":null,"date":"2016-06-09T15:08:01.000Z","pv":0,"totalPV":0,"categories":"ASP.NET Core 1.0","tags":["Asp.NET Core 1.0","C#","middleware"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Using TypeScript with ASP.NET MVC 5 instead of JavaScript","url":"636.html","id":"636","date":"2017-08-07T13:30:43.000Z","_content":"\nIn this post, we will be using TypeScript with ASP.NET MVC 5 instead of JavaScript. TypeScript can be used with any existing or new MVC 5 web application. TypeScript is one of most fastest growing open source initiative, it's getting adopted on large scale now. I won't be dealing with ABCs of it, read through [Why TypeScript?](https://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript) and [Introducing TypeScript](https://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript) to know more Let's now use TypeScript with ASP.NET MVC 5, create or use any existing MVC 5 application in either Visual Studio 2015 or 2017 IDE.\n\n> Install TypeScript from the **[download link](http://www.typescriptlang.org/index.html#download-links)**, it installs all tooling power in VS IDE\n\ntsconfig.json - TypeScript Configuration\n----------------------------------------\n\nWhenever we use TypeScript with ASP.NET MVC 5 (with any application - Angular, Ionic, NodeJS, ASP.NET Core), we must create **tsconfig.json** file. This file tells the TS compiler what to do with TypeScript code like transpile (compiled), output files in a directory, include comments or not. A bunch of configuration entries for TypeScript exists with on its [documentation](http://www.typescriptlang.org/docs/handbook/tsconfig-json.html) site. Create a folder **tsScripts** in MVC5 project, this folder acts as the root directory for TS project. Well, this is recommended step for keeping things simple. Then right click on folder name (_tsScripts_), add New file, select TypeScript Configuration file. This will create a very basic TS configuration, copy the below configuration entries to get started with writing TypeScript with ASP.NET MVC 5\n\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": false,\n    \"noEmitOnError\": true,\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"es5\",    \n    \"outDir\": \"../appScriptsJS\"\n  },\n  \"exclude\": \\[\n    \"node_modules\",\n    \"wwwroot\"\n  \\]\n}\n\n**Breaking down the** tsconfig**.json**\n\n*   outDir - TS compiler outputs the transpile TS to JS in folder _**appScriptsJS**_\n*   target - modules in form of es5 standard\n*   sourceMap - these file help debug TS code in a browser. Used while development stage\n\nFirst TypeScript file -- app.ts\n-------------------------------\n\nAny TypeScript file is marked with the extension of *.TS; Let's create TS file app.ts in the **tsScripts** folder. We are creating it in TS project root folder. Copy the below code\n\nfunction Welcome(person: string) {\n    return \"<h2>Hello \" + person + \", Lets learn TypeScript</h2>\";\n}\n\nfunction ClickMeButton() {\n    let user:string = \"MithunVP\";\n    document.getElementById(\"divMsg\").innerHTML = Welcome(user);\n}\n\nBreaking down the app.ts\n\n*   function _Welcome_ returns string. Anything special in this? Yes, look person object is decorated with type string. This is the first hint of **static typing of TypeScript**\n*   function _ClickMeButton_ is a typical example of adding HTML string to DOM. Lookout _user_ is string type now, which is passed to the _Welcome_ method.\n\n> Try to change from string to number, it will show red underline saying you cannot assign a number to a string.\n\nUse TypeScript with ASP.NET MVC 5\n---------------------------------\n\nOnce you build the application, the **appScripts** folder gets created (it is Output Directory for TS project). Folder name and location can be according to your needs. Now that it's JS file, we can include that in our HTML (cshtml) files, open __Layout._cshtml_,_ place the SCRIPT tag inclusion for the app.js generated file or you can create BUNDLE for this to refer them.\n\n@Scripts.Render(\"~/bundles/jquery\")\n@Scripts.Render(\"~/bundles/bootstrap\")\n@Scripts.Render(\"~/bundles/appscripts\")\n@RenderSection(\"scripts\", required: false)\n\n_BundleConfig.cs_ would contain the bundle configuration, refer source code on **[LearnTS repo on my GitHub](https://github.com/mithunvp/LearnTS)**. Create a new ASP.NET MVC 5 view for further exploration. Snapshot of the TS and JS files from project structure. The TS files are compiled to JS files on the build of the solution. \\[caption id=\"attachment_640\" align=\"aligncenter\" width=\"224\"\\][![TypeScript with ASP.NET MVC 5](http://www.mithunvp.com/wp-content/uploads/2017/08/TS-JS.png)](http://www.mithunvp.com/wp-content/uploads/2017/08/TS-JS.png) TypeScript TO JavaScript\\[/caption\\]\n\nCalling TypeScript method from HTML\n-----------------------------------\n\nVirtually now we will be calling a JS method of _ClickMeButton()_ written in TypeScript using the below code in new cshtml file.\n\n<div id=\"divMsg\"></div>\n<br />\n<button type=\"button\" class=\"btn btn-primary btn-md\" onclick=\"ClickMeButton()\">\n    Show Message\n</button>\n\nOn clicking of _Show Message_ button, the **divMsg** gets written with the message. Run the application, go to Learn TypeScript page from menu. Clicking the button will display as shown below \\[caption id=\"attachment_641\" align=\"aligncenter\" width=\"663\"\\][![TypeScript with ASP.NET MVC 5](http://www.mithunvp.com/wp-content/uploads/2017/08/showresult.png)](http://www.mithunvp.com/wp-content/uploads/2017/08/showresult.png) TypeScript code in action\\[/caption\\]\n\nDebugging TypeScript code\n-------------------------\n\nWhen the application running, press F12 to view developer console window, move to **sources** tab, you would see the **tsScripts** folder containing the **app.ts** file, open it and place debugger on function, then click the button on UI to see debugger point being hit. \\[caption id=\"attachment_642\" align=\"aligncenter\" width=\"891\"\\][![TypeScript with ASP.NET MVC 5](http://www.mithunvp.com/wp-content/uploads/2017/08/debuggin.png)](http://www.mithunvp.com/wp-content/uploads/2017/08/debuggin.png) Debugging TypeScript Code in ASP.NET MVC 5\\[/caption\\]\n\n### Summary\n\nThis is a basic setup of using TypeScript in ASP.NET MVC 5. It showcased using static typing, debugging and also highlighted that TypeScript is nothing but JavaScript.","source":"_posts/using-typescript-with-asp-net-mvc5.md","raw":"---\ntitle: Using TypeScript with ASP.NET MVC 5 instead of JavaScript\ntags:\n  - ASP.NET MVC5\n  - TypeScript\nurl: 636.html\nid: 636\ncategories:\n  - TypeScript\ndate: 2017-08-07 19:00:43\n---\n\nIn this post, we will be using TypeScript with ASP.NET MVC 5 instead of JavaScript. TypeScript can be used with any existing or new MVC 5 web application. TypeScript is one of most fastest growing open source initiative, it's getting adopted on large scale now. I won't be dealing with ABCs of it, read through [Why TypeScript?](https://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript) and [Introducing TypeScript](https://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript) to know more Let's now use TypeScript with ASP.NET MVC 5, create or use any existing MVC 5 application in either Visual Studio 2015 or 2017 IDE.\n\n> Install TypeScript from the **[download link](http://www.typescriptlang.org/index.html#download-links)**, it installs all tooling power in VS IDE\n\ntsconfig.json - TypeScript Configuration\n----------------------------------------\n\nWhenever we use TypeScript with ASP.NET MVC 5 (with any application - Angular, Ionic, NodeJS, ASP.NET Core), we must create **tsconfig.json** file. This file tells the TS compiler what to do with TypeScript code like transpile (compiled), output files in a directory, include comments or not. A bunch of configuration entries for TypeScript exists with on its [documentation](http://www.typescriptlang.org/docs/handbook/tsconfig-json.html) site. Create a folder **tsScripts** in MVC5 project, this folder acts as the root directory for TS project. Well, this is recommended step for keeping things simple. Then right click on folder name (_tsScripts_), add New file, select TypeScript Configuration file. This will create a very basic TS configuration, copy the below configuration entries to get started with writing TypeScript with ASP.NET MVC 5\n\n{\n  \"compilerOptions\": {\n    \"noImplicitAny\": false,\n    \"noEmitOnError\": true,\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"es5\",    \n    \"outDir\": \"../appScriptsJS\"\n  },\n  \"exclude\": \\[\n    \"node_modules\",\n    \"wwwroot\"\n  \\]\n}\n\n**Breaking down the** tsconfig**.json**\n\n*   outDir - TS compiler outputs the transpile TS to JS in folder _**appScriptsJS**_\n*   target - modules in form of es5 standard\n*   sourceMap - these file help debug TS code in a browser. Used while development stage\n\nFirst TypeScript file -- app.ts\n-------------------------------\n\nAny TypeScript file is marked with the extension of *.TS; Let's create TS file app.ts in the **tsScripts** folder. We are creating it in TS project root folder. Copy the below code\n\nfunction Welcome(person: string) {\n    return \"<h2>Hello \" + person + \", Lets learn TypeScript</h2>\";\n}\n\nfunction ClickMeButton() {\n    let user:string = \"MithunVP\";\n    document.getElementById(\"divMsg\").innerHTML = Welcome(user);\n}\n\nBreaking down the app.ts\n\n*   function _Welcome_ returns string. Anything special in this? Yes, look person object is decorated with type string. This is the first hint of **static typing of TypeScript**\n*   function _ClickMeButton_ is a typical example of adding HTML string to DOM. Lookout _user_ is string type now, which is passed to the _Welcome_ method.\n\n> Try to change from string to number, it will show red underline saying you cannot assign a number to a string.\n\nUse TypeScript with ASP.NET MVC 5\n---------------------------------\n\nOnce you build the application, the **appScripts** folder gets created (it is Output Directory for TS project). Folder name and location can be according to your needs. Now that it's JS file, we can include that in our HTML (cshtml) files, open __Layout._cshtml_,_ place the SCRIPT tag inclusion for the app.js generated file or you can create BUNDLE for this to refer them.\n\n@Scripts.Render(\"~/bundles/jquery\")\n@Scripts.Render(\"~/bundles/bootstrap\")\n@Scripts.Render(\"~/bundles/appscripts\")\n@RenderSection(\"scripts\", required: false)\n\n_BundleConfig.cs_ would contain the bundle configuration, refer source code on **[LearnTS repo on my GitHub](https://github.com/mithunvp/LearnTS)**. Create a new ASP.NET MVC 5 view for further exploration. Snapshot of the TS and JS files from project structure. The TS files are compiled to JS files on the build of the solution. \\[caption id=\"attachment_640\" align=\"aligncenter\" width=\"224\"\\][![TypeScript with ASP.NET MVC 5](http://www.mithunvp.com/wp-content/uploads/2017/08/TS-JS.png)](http://www.mithunvp.com/wp-content/uploads/2017/08/TS-JS.png) TypeScript TO JavaScript\\[/caption\\]\n\nCalling TypeScript method from HTML\n-----------------------------------\n\nVirtually now we will be calling a JS method of _ClickMeButton()_ written in TypeScript using the below code in new cshtml file.\n\n<div id=\"divMsg\"></div>\n<br />\n<button type=\"button\" class=\"btn btn-primary btn-md\" onclick=\"ClickMeButton()\">\n    Show Message\n</button>\n\nOn clicking of _Show Message_ button, the **divMsg** gets written with the message. Run the application, go to Learn TypeScript page from menu. Clicking the button will display as shown below \\[caption id=\"attachment_641\" align=\"aligncenter\" width=\"663\"\\][![TypeScript with ASP.NET MVC 5](http://www.mithunvp.com/wp-content/uploads/2017/08/showresult.png)](http://www.mithunvp.com/wp-content/uploads/2017/08/showresult.png) TypeScript code in action\\[/caption\\]\n\nDebugging TypeScript code\n-------------------------\n\nWhen the application running, press F12 to view developer console window, move to **sources** tab, you would see the **tsScripts** folder containing the **app.ts** file, open it and place debugger on function, then click the button on UI to see debugger point being hit. \\[caption id=\"attachment_642\" align=\"aligncenter\" width=\"891\"\\][![TypeScript with ASP.NET MVC 5](http://www.mithunvp.com/wp-content/uploads/2017/08/debuggin.png)](http://www.mithunvp.com/wp-content/uploads/2017/08/debuggin.png) Debugging TypeScript Code in ASP.NET MVC 5\\[/caption\\]\n\n### Summary\n\nThis is a basic setup of using TypeScript in ASP.NET MVC 5. It showcased using static typing, debugging and also highlighted that TypeScript is nothing but JavaScript.","slug":"using-typescript-with-asp-net-mvc5","published":1,"updated":"2018-07-10T19:49:06.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034xg0024s4tji5uelp2e","content":"<p>In this post, we will be using TypeScript with ASP.NET MVC 5 instead of JavaScript. TypeScript can be used with any existing or new MVC 5 web application. TypeScript is one of most fastest growing open source initiative, it’s getting adopted on large scale now. I won’t be dealing with ABCs of it, read through <a href=\"https://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript\" target=\"_blank\" rel=\"noopener\">Why TypeScript?</a> and <a href=\"https://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript\" target=\"_blank\" rel=\"noopener\">Introducing TypeScript</a> to know more Let’s now use TypeScript with ASP.NET MVC 5, create or use any existing MVC 5 application in either Visual Studio 2015 or 2017 IDE.</p>\n<blockquote>\n<p>Install TypeScript from the <strong><a href=\"http://www.typescriptlang.org/index.html#download-links\" target=\"_blank\" rel=\"noopener\">download link</a></strong>, it installs all tooling power in VS IDE</p>\n</blockquote>\n<h2 id=\"tsconfig-json-TypeScript-Configuration\"><a href=\"#tsconfig-json-TypeScript-Configuration\" class=\"headerlink\" title=\"tsconfig.json - TypeScript Configuration\"></a>tsconfig.json - TypeScript Configuration</h2><p>Whenever we use TypeScript with ASP.NET MVC 5 (with any application - Angular, Ionic, NodeJS, ASP.NET Core), we must create <strong>tsconfig.json</strong> file. This file tells the TS compiler what to do with TypeScript code like transpile (compiled), output files in a directory, include comments or not. A bunch of configuration entries for TypeScript exists with on its <a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\" target=\"_blank\" rel=\"noopener\">documentation</a> site. Create a folder <strong>tsScripts</strong> in MVC5 project, this folder acts as the root directory for TS project. Well, this is recommended step for keeping things simple. Then right click on folder name (<em>tsScripts</em>), add New file, select TypeScript Configuration file. This will create a very basic TS configuration, copy the below configuration entries to get started with writing TypeScript with ASP.NET MVC 5</p>\n<p>{<br>  “compilerOptions”: {<br>    “noImplicitAny”: false,<br>    “noEmitOnError”: true,<br>    “removeComments”: false,<br>    “sourceMap”: true,<br>    “target”: “es5”,<br>    “outDir”: “../appScriptsJS”<br>  },<br>  “exclude”: [<br>    “node_modules”,<br>    “wwwroot”<br>  ]<br>}</p>\n<p><strong>Breaking down the</strong> tsconfig<strong>.json</strong></p>\n<ul>\n<li>outDir - TS compiler outputs the transpile TS to JS in folder <em><strong>appScriptsJS</strong></em></li>\n<li>target - modules in form of es5 standard</li>\n<li>sourceMap - these file help debug TS code in a browser. Used while development stage</li>\n</ul>\n<h2 id=\"First-TypeScript-file-–-app-ts\"><a href=\"#First-TypeScript-file-–-app-ts\" class=\"headerlink\" title=\"First TypeScript file – app.ts\"></a>First TypeScript file – app.ts</h2><p>Any TypeScript file is marked with the extension of *.TS; Let’s create TS file app.ts in the <strong>tsScripts</strong> folder. We are creating it in TS project root folder. Copy the below code</p>\n<p>function Welcome(person: string) {<br>    return “</p><h2>Hello “ + person + “, Lets learn TypeScript</h2>“;<br>}<p></p>\n<p>function ClickMeButton() {<br>    let user:string = “MithunVP”;<br>    document.getElementById(“divMsg”).innerHTML = Welcome(user);<br>}</p>\n<p>Breaking down the app.ts</p>\n<ul>\n<li>function <em>Welcome</em> returns string. Anything special in this? Yes, look person object is decorated with type string. This is the first hint of <strong>static typing of TypeScript</strong></li>\n<li>function <em>ClickMeButton</em> is a typical example of adding HTML string to DOM. Lookout <em>user</em> is string type now, which is passed to the <em>Welcome</em> method.</li>\n</ul>\n<blockquote>\n<p>Try to change from string to number, it will show red underline saying you cannot assign a number to a string.</p>\n</blockquote>\n<h2 id=\"Use-TypeScript-with-ASP-NET-MVC-5\"><a href=\"#Use-TypeScript-with-ASP-NET-MVC-5\" class=\"headerlink\" title=\"Use TypeScript with ASP.NET MVC 5\"></a>Use TypeScript with ASP.NET MVC 5</h2><p>Once you build the application, the <strong>appScripts</strong> folder gets created (it is Output Directory for TS project). Folder name and location can be according to your needs. Now that it’s JS file, we can include that in our HTML (cshtml) files, open __Layout.<em>cshtml</em>,_ place the SCRIPT tag inclusion for the app.js generated file or you can create BUNDLE for this to refer them.</p>\n<p>@Scripts.Render(“~/bundles/jquery”)<br>@Scripts.Render(“~/bundles/bootstrap”)<br>@Scripts.Render(“~/bundles/appscripts”)<br>@RenderSection(“scripts”, required: false)</p>\n<p><em>BundleConfig.cs</em> would contain the bundle configuration, refer source code on <strong><a href=\"https://github.com/mithunvp/LearnTS\" target=\"_blank\" rel=\"noopener\">LearnTS repo on my GitHub</a></strong>. Create a new ASP.NET MVC 5 view for further exploration. Snapshot of the TS and JS files from project structure. The TS files are compiled to JS files on the build of the solution. [caption id=”attachment_640” align=”aligncenter” width=”224”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2017/08/TS-JS.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2017/08/TS-JS.png\" alt=\"TypeScript with ASP.NET MVC 5\"></a> TypeScript TO JavaScript[/caption]</p>\n<h2 id=\"Calling-TypeScript-method-from-HTML\"><a href=\"#Calling-TypeScript-method-from-HTML\" class=\"headerlink\" title=\"Calling TypeScript method from HTML\"></a>Calling TypeScript method from HTML</h2><p>Virtually now we will be calling a JS method of <em>ClickMeButton()</em> written in TypeScript using the below code in new cshtml file.</p>\n<p><div id=\"divMsg\"></div><br><br></p>\n<button type=\"button\" class=\"btn btn-primary btn-md\" onclick=\"ClickMeButton()\"><br>    Show Message<br></button>\n\n<p>On clicking of <em>Show Message</em> button, the <strong>divMsg</strong> gets written with the message. Run the application, go to Learn TypeScript page from menu. Clicking the button will display as shown below [caption id=”attachment_641” align=”aligncenter” width=”663”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2017/08/showresult.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2017/08/showresult.png\" alt=\"TypeScript with ASP.NET MVC 5\"></a> TypeScript code in action[/caption]</p>\n<h2 id=\"Debugging-TypeScript-code\"><a href=\"#Debugging-TypeScript-code\" class=\"headerlink\" title=\"Debugging TypeScript code\"></a>Debugging TypeScript code</h2><p>When the application running, press F12 to view developer console window, move to <strong>sources</strong> tab, you would see the <strong>tsScripts</strong> folder containing the <strong>app.ts</strong> file, open it and place debugger on function, then click the button on UI to see debugger point being hit. [caption id=”attachment_642” align=”aligncenter” width=”891”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2017/08/debuggin.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2017/08/debuggin.png\" alt=\"TypeScript with ASP.NET MVC 5\"></a> Debugging TypeScript Code in ASP.NET MVC 5[/caption]</p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>This is a basic setup of using TypeScript in ASP.NET MVC 5. It showcased using static typing, debugging and also highlighted that TypeScript is nothing but JavaScript.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In this post, we will be using TypeScript with ASP.NET MVC 5 instead of JavaScript. TypeScript can be used with any existing or new MVC 5 web application. TypeScript is one of most fastest growing open source initiative, it’s getting adopted on large scale now. I won’t be dealing with ABCs of it, read through <a href=\"https://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript\" target=\"_blank\" rel=\"noopener\">Why TypeScript?</a> and <a href=\"https://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript\" target=\"_blank\" rel=\"noopener\">Introducing TypeScript</a> to know more Let’s now use TypeScript with ASP.NET MVC 5, create or use any existing MVC 5 application in either Visual Studio 2015 or 2017 IDE.</p>\n<blockquote>\n<p>Install TypeScript from the <strong><a href=\"http://www.typescriptlang.org/index.html#download-links\" target=\"_blank\" rel=\"noopener\">download link</a></strong>, it installs all tooling power in VS IDE</p>\n</blockquote>\n<h2 id=\"tsconfig-json-TypeScript-Configuration\"><a href=\"#tsconfig-json-TypeScript-Configuration\" class=\"headerlink\" title=\"tsconfig.json - TypeScript Configuration\"></a>tsconfig.json - TypeScript Configuration</h2><p>Whenever we use TypeScript with ASP.NET MVC 5 (with any application - Angular, Ionic, NodeJS, ASP.NET Core), we must create <strong>tsconfig.json</strong> file. This file tells the TS compiler what to do with TypeScript code like transpile (compiled), output files in a directory, include comments or not. A bunch of configuration entries for TypeScript exists with on its <a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\" target=\"_blank\" rel=\"noopener\">documentation</a> site. Create a folder <strong>tsScripts</strong> in MVC5 project, this folder acts as the root directory for TS project. Well, this is recommended step for keeping things simple. Then right click on folder name (<em>tsScripts</em>), add New file, select TypeScript Configuration file. This will create a very basic TS configuration, copy the below configuration entries to get started with writing TypeScript with ASP.NET MVC 5</p>\n<p>{<br>  “compilerOptions”: {<br>    “noImplicitAny”: false,<br>    “noEmitOnError”: true,<br>    “removeComments”: false,<br>    “sourceMap”: true,<br>    “target”: “es5”,<br>    “outDir”: “../appScriptsJS”<br>  },<br>  “exclude”: [<br>    “node_modules”,<br>    “wwwroot”<br>  ]<br>}</p>\n<p><strong>Breaking down the</strong> tsconfig<strong>.json</strong></p>\n<ul>\n<li>outDir - TS compiler outputs the transpile TS to JS in folder <em><strong>appScriptsJS</strong></em></li>\n<li>target - modules in form of es5 standard</li>\n<li>sourceMap - these file help debug TS code in a browser. Used while development stage</li>\n</ul>\n<h2 id=\"First-TypeScript-file-–-app-ts\"><a href=\"#First-TypeScript-file-–-app-ts\" class=\"headerlink\" title=\"First TypeScript file – app.ts\"></a>First TypeScript file – app.ts</h2><p>Any TypeScript file is marked with the extension of *.TS; Let’s create TS file app.ts in the <strong>tsScripts</strong> folder. We are creating it in TS project root folder. Copy the below code</p>\n<p>function Welcome(person: string) {<br>    return “</p><h2>Hello “ + person + “, Lets learn TypeScript</h2>“;<br>}<p></p>\n<p>function ClickMeButton() {<br>    let user:string = “MithunVP”;<br>    document.getElementById(“divMsg”).innerHTML = Welcome(user);<br>}</p>\n<p>Breaking down the app.ts</p>\n<ul>\n<li>function <em>Welcome</em> returns string. Anything special in this? Yes, look person object is decorated with type string. This is the first hint of <strong>static typing of TypeScript</strong></li>\n<li>function <em>ClickMeButton</em> is a typical example of adding HTML string to DOM. Lookout <em>user</em> is string type now, which is passed to the <em>Welcome</em> method.</li>\n</ul>\n<blockquote>\n<p>Try to change from string to number, it will show red underline saying you cannot assign a number to a string.</p>\n</blockquote>\n<h2 id=\"Use-TypeScript-with-ASP-NET-MVC-5\"><a href=\"#Use-TypeScript-with-ASP-NET-MVC-5\" class=\"headerlink\" title=\"Use TypeScript with ASP.NET MVC 5\"></a>Use TypeScript with ASP.NET MVC 5</h2><p>Once you build the application, the <strong>appScripts</strong> folder gets created (it is Output Directory for TS project). Folder name and location can be according to your needs. Now that it’s JS file, we can include that in our HTML (cshtml) files, open __Layout.<em>cshtml</em>,_ place the SCRIPT tag inclusion for the app.js generated file or you can create BUNDLE for this to refer them.</p>\n<p>@Scripts.Render(“~/bundles/jquery”)<br>@Scripts.Render(“~/bundles/bootstrap”)<br>@Scripts.Render(“~/bundles/appscripts”)<br>@RenderSection(“scripts”, required: false)</p>\n<p><em>BundleConfig.cs</em> would contain the bundle configuration, refer source code on <strong><a href=\"https://github.com/mithunvp/LearnTS\" target=\"_blank\" rel=\"noopener\">LearnTS repo on my GitHub</a></strong>. Create a new ASP.NET MVC 5 view for further exploration. Snapshot of the TS and JS files from project structure. The TS files are compiled to JS files on the build of the solution. [caption id=”attachment_640” align=”aligncenter” width=”224”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2017/08/TS-JS.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2017/08/TS-JS.png\" alt=\"TypeScript with ASP.NET MVC 5\"></a> TypeScript TO JavaScript[/caption]</p>\n<h2 id=\"Calling-TypeScript-method-from-HTML\"><a href=\"#Calling-TypeScript-method-from-HTML\" class=\"headerlink\" title=\"Calling TypeScript method from HTML\"></a>Calling TypeScript method from HTML</h2><p>Virtually now we will be calling a JS method of <em>ClickMeButton()</em> written in TypeScript using the below code in new cshtml file.</p>\n<p><div id=\"divMsg\"></div><br><br></p>\n<button type=\"button\" class=\"btn btn-primary btn-md\" onclick=\"ClickMeButton()\"><br>    Show Message<br></button>\n\n<p>On clicking of <em>Show Message</em> button, the <strong>divMsg</strong> gets written with the message. Run the application, go to Learn TypeScript page from menu. Clicking the button will display as shown below [caption id=”attachment_641” align=”aligncenter” width=”663”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2017/08/showresult.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2017/08/showresult.png\" alt=\"TypeScript with ASP.NET MVC 5\"></a> TypeScript code in action[/caption]</p>\n<h2 id=\"Debugging-TypeScript-code\"><a href=\"#Debugging-TypeScript-code\" class=\"headerlink\" title=\"Debugging TypeScript code\"></a>Debugging TypeScript code</h2><p>When the application running, press F12 to view developer console window, move to <strong>sources</strong> tab, you would see the <strong>tsScripts</strong> folder containing the <strong>app.ts</strong> file, open it and place debugger on function, then click the button on UI to see debugger point being hit. [caption id=”attachment_642” align=”aligncenter” width=”891”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2017/08/debuggin.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2017/08/debuggin.png\" alt=\"TypeScript with ASP.NET MVC 5\"></a> Debugging TypeScript Code in ASP.NET MVC 5[/caption]</p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>This is a basic setup of using TypeScript in ASP.NET MVC 5. It showcased using static typing, debugging and also highlighted that TypeScript is nothing but JavaScript.</p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:19:06 GMT+0530 (India Standard Time)","title":"Using TypeScript with ASP.NET MVC 5 instead of JavaScript","path":"using-typescript-with-asp-net-mvc5/","eyeCatchImage":null,"excerpt":null,"date":"2017-08-07T13:30:43.000Z","pv":0,"totalPV":0,"categories":"TypeScript","tags":["TypeScript","ASP.NET MVC5"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Working with VueJS 2 and ASP.NET MVC 5 in Visual Studio","url":"646.html","id":"646","date":"2017-08-16T13:06:13.000Z","_content":"\nVueJS (Vue) 2 is gaining popularity as lightweight, powerful web based UI framework, official website defines it as\n\n> Vue is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable.\n\nIt's quite easy to work VueJS and ASP.NET MVC 5, let's check out in this article Use either Visual Studio 2017/ 2015 (any edition) for working (integrating) Vue with MVC 5. You can either use any existing or create a brand new ASP.NET MVC 5.\n\nStep 1 - Install VueJS using NuGet\n----------------------------------\n\nVueJS can be used either through CDN or by using NuGet package manager in ASP.NET MVC 5. Let's use NuGet,  right click on the project to open NuGet package manager window, search for **Vue** and then install it. \\[caption id=\"attachment_647\" align=\"aligncenter\" width=\"987\"\\][![vuejs](http://www.mithunvp.com/wp-content/uploads/2017/08/vue-nuget.png)](http://www.mithunvp.com/wp-content/uploads/2017/08/vue-nuget.png) Add VueJS using NuGet\\[/caption\\] Once installed, it will add two files **_vue.js and vue.min.js_** (minified version) in the _Scripts_ folder\n\nStep 2 - Add VueJS script in _Layout page\n-----------------------------------------\n\nJust like other JavaScript pages, refer Vue in the _layout cshtml page, so that its available across the application.\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@ViewBag.Title - My ASP.NET Application</title>\n    @Styles.Render(\"~/Content/css\")\n    @Scripts.Render(\"~/bundles/modernizr\")\n    <script src=\"~/Scripts/vue.min.js\"></script>\n</head>\n<body> \n<!\\-\\- Body of MVC layout -->\n</body>\n</html>\n\nWe can bundle Vue in BundleConfig.cs, but here let's keep it simple.\n\nStep 3 - First VueJS code\n-------------------------\n\nOpen About.cshtml file (any cshtml), copy below code to declarative render on HTML page.\n\n<h3>VueJS 2 in ASP.NET MVC 5</h3>\n\n<div id=\"aboutPage\">\n    { { message }}\n</div>\n<script>\n    var aboutPage = new Vue({\n        el: '#aboutPage',\n        data: {\n            message: 'Hello Vue! in About Page'\n        }\n    });\n</script>\n\nBreaking down the above code\n\n1.  **aboutPage** is just usual DIV tag of HTML.\n2.  _**new Vue()**_ is initializing the VueJS.\n3.  The initialized Vue object execution scope is limited to _aboutPage_ DIV element. This is achieved by assigning reserved keyword **el** to the id of the div element. This is similar to AngularJS 1.* concept.\n4.  To render anything on UI, we are using **data** keyword as JS object. The _data_ object has _**message**_ property to be displayed inside DIV tag.\n5.  _**{ {message}}**_ is text interpolation syntax to access the _message_ property of Vue instance. This is again similar to AngularJS 1.* concept.\n\nThe _**el**_ of new Vue instance should match with HTML DOM id property to kick off Vue\n\nStep 4 - VueJS in action\n------------------------\n\nRun the application, navigate to HTML page where Vue is defined to see it action. \\[caption id=\"attachment_648\" align=\"aligncenter\" width=\"586\"\\][![vuejs](http://www.mithunvp.com/wp-content/uploads/2017/08/vue-running.png)](http://www.mithunvp.com/wp-content/uploads/2017/08/vue-running.png) Running VueJS in ASP.NET MVC 5\\[/caption\\]\n\nStep 5 - Vue's Reactive nature\n------------------------------\n\nWhen running the application, open console window of the browser (Chrome in this example), you can play with _message_ property of Vue instance as shown in the image below. As soon as you change _message_ property value, the DOM gets changed automatically \\[caption id=\"attachment_649\" align=\"aligncenter\" width=\"957\"\\][![vuejs](http://www.mithunvp.com/wp-content/uploads/2017/08/vue-reactive.png)](http://www.mithunvp.com/wp-content/uploads/2017/08/vue-reactive.png) Reactive nature of VueJS\\[/caption\\]  \n\n> The data and the DOM are now linked, and everything is now **reactive**.","source":"_posts/working-vuejs-asp-net-mvc-5-visual-studio.md","raw":"---\ntitle: Working with VueJS 2 and ASP.NET MVC 5 in Visual Studio\ntags:\n  - ASP.NET MVC 5\n  - VueJS 2\nurl: 646.html\nid: 646\ncategories:\n  - Uncategorized\ndate: 2017-08-16 18:36:13\n---\n\nVueJS (Vue) 2 is gaining popularity as lightweight, powerful web based UI framework, official website defines it as\n\n> Vue is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable.\n\nIt's quite easy to work VueJS and ASP.NET MVC 5, let's check out in this article Use either Visual Studio 2017/ 2015 (any edition) for working (integrating) Vue with MVC 5. You can either use any existing or create a brand new ASP.NET MVC 5.\n\nStep 1 - Install VueJS using NuGet\n----------------------------------\n\nVueJS can be used either through CDN or by using NuGet package manager in ASP.NET MVC 5. Let's use NuGet,  right click on the project to open NuGet package manager window, search for **Vue** and then install it. \\[caption id=\"attachment_647\" align=\"aligncenter\" width=\"987\"\\][![vuejs](http://www.mithunvp.com/wp-content/uploads/2017/08/vue-nuget.png)](http://www.mithunvp.com/wp-content/uploads/2017/08/vue-nuget.png) Add VueJS using NuGet\\[/caption\\] Once installed, it will add two files **_vue.js and vue.min.js_** (minified version) in the _Scripts_ folder\n\nStep 2 - Add VueJS script in _Layout page\n-----------------------------------------\n\nJust like other JavaScript pages, refer Vue in the _layout cshtml page, so that its available across the application.\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>@ViewBag.Title - My ASP.NET Application</title>\n    @Styles.Render(\"~/Content/css\")\n    @Scripts.Render(\"~/bundles/modernizr\")\n    <script src=\"~/Scripts/vue.min.js\"></script>\n</head>\n<body> \n<!\\-\\- Body of MVC layout -->\n</body>\n</html>\n\nWe can bundle Vue in BundleConfig.cs, but here let's keep it simple.\n\nStep 3 - First VueJS code\n-------------------------\n\nOpen About.cshtml file (any cshtml), copy below code to declarative render on HTML page.\n\n<h3>VueJS 2 in ASP.NET MVC 5</h3>\n\n<div id=\"aboutPage\">\n    { { message }}\n</div>\n<script>\n    var aboutPage = new Vue({\n        el: '#aboutPage',\n        data: {\n            message: 'Hello Vue! in About Page'\n        }\n    });\n</script>\n\nBreaking down the above code\n\n1.  **aboutPage** is just usual DIV tag of HTML.\n2.  _**new Vue()**_ is initializing the VueJS.\n3.  The initialized Vue object execution scope is limited to _aboutPage_ DIV element. This is achieved by assigning reserved keyword **el** to the id of the div element. This is similar to AngularJS 1.* concept.\n4.  To render anything on UI, we are using **data** keyword as JS object. The _data_ object has _**message**_ property to be displayed inside DIV tag.\n5.  _**{ {message}}**_ is text interpolation syntax to access the _message_ property of Vue instance. This is again similar to AngularJS 1.* concept.\n\nThe _**el**_ of new Vue instance should match with HTML DOM id property to kick off Vue\n\nStep 4 - VueJS in action\n------------------------\n\nRun the application, navigate to HTML page where Vue is defined to see it action. \\[caption id=\"attachment_648\" align=\"aligncenter\" width=\"586\"\\][![vuejs](http://www.mithunvp.com/wp-content/uploads/2017/08/vue-running.png)](http://www.mithunvp.com/wp-content/uploads/2017/08/vue-running.png) Running VueJS in ASP.NET MVC 5\\[/caption\\]\n\nStep 5 - Vue's Reactive nature\n------------------------------\n\nWhen running the application, open console window of the browser (Chrome in this example), you can play with _message_ property of Vue instance as shown in the image below. As soon as you change _message_ property value, the DOM gets changed automatically \\[caption id=\"attachment_649\" align=\"aligncenter\" width=\"957\"\\][![vuejs](http://www.mithunvp.com/wp-content/uploads/2017/08/vue-reactive.png)](http://www.mithunvp.com/wp-content/uploads/2017/08/vue-reactive.png) Reactive nature of VueJS\\[/caption\\]  \n\n> The data and the DOM are now linked, and everything is now **reactive**.","slug":"working-vuejs-asp-net-mvc-5-visual-studio","published":1,"updated":"2018-07-10T20:10:49.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjt034zj004xs4tjqhh4xp0p","content":"<p>VueJS (Vue) 2 is gaining popularity as lightweight, powerful web based UI framework, official website defines it as</p>\n<blockquote>\n<p>Vue is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable.</p>\n</blockquote>\n<p>It’s quite easy to work VueJS and ASP.NET MVC 5, let’s check out in this article Use either Visual Studio 2017/ 2015 (any edition) for working (integrating) Vue with MVC 5. You can either use any existing or create a brand new ASP.NET MVC 5.</p>\n<h2 id=\"Step-1-Install-VueJS-using-NuGet\"><a href=\"#Step-1-Install-VueJS-using-NuGet\" class=\"headerlink\" title=\"Step 1 - Install VueJS using NuGet\"></a>Step 1 - Install VueJS using NuGet</h2><p>VueJS can be used either through CDN or by using NuGet package manager in ASP.NET MVC 5. Let’s use NuGet,  right click on the project to open NuGet package manager window, search for <strong>Vue</strong> and then install it. [caption id=”attachment_647” align=”aligncenter” width=”987”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2017/08/vue-nuget.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2017/08/vue-nuget.png\" alt=\"vuejs\"></a> Add VueJS using NuGet[/caption] Once installed, it will add two files <strong><em>vue.js and vue.min.js</em></strong> (minified version) in the <em>Scripts</em> folder</p>\n<h2 id=\"Step-2-Add-VueJS-script-in-Layout-page\"><a href=\"#Step-2-Add-VueJS-script-in-Layout-page\" class=\"headerlink\" title=\"Step 2 - Add VueJS script in _Layout page\"></a>Step 2 - Add VueJS script in _Layout page</h2><p>Just like other JavaScript pages, refer Vue in the _layout cshtml page, so that its available across the application.</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<html><br><head><br>    <meta charset=\"utf-8\"><br>    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><br>    <title>@ViewBag.Title - My ASP.NET Application</title><br>    @Styles.Render(“~/Content/css”)<br>    @Scripts.Render(“~/bundles/modernizr”)<br>    <script src=\"~/Scripts/vue.min.js\"></script><br></head><br><body><br>&lt;!-- Body of MVC layout –&gt;<br></body><br></html>\n\n<p>We can bundle Vue in BundleConfig.cs, but here let’s keep it simple.</p>\n<h2 id=\"Step-3-First-VueJS-code\"><a href=\"#Step-3-First-VueJS-code\" class=\"headerlink\" title=\"Step 3 - First VueJS code\"></a>Step 3 - First VueJS code</h2><p>Open About.cshtml file (any cshtml), copy below code to declarative render on HTML page.</p>\n<h3>VueJS 2 in ASP.NET MVC 5</h3>\n\n<p><div id=\"aboutPage\"><br>    { { message }}<br></div></p>\n<script>\n    var aboutPage = new Vue({\n        el: '#aboutPage',\n        data: {\n            message: 'Hello Vue! in About Page'\n        }\n    });\n</script>\n\n<p>Breaking down the above code</p>\n<ol>\n<li><strong>aboutPage</strong> is just usual DIV tag of HTML.</li>\n<li><em><strong>new Vue()</strong></em> is initializing the VueJS.</li>\n<li>The initialized Vue object execution scope is limited to <em>aboutPage</em> DIV element. This is achieved by assigning reserved keyword <strong>el</strong> to the id of the div element. This is similar to AngularJS 1.* concept.</li>\n<li>To render anything on UI, we are using <strong>data</strong> keyword as JS object. The <em>data</em> object has <em><strong>message</strong></em> property to be displayed inside DIV tag.</li>\n<li><em><strong>{ {message}}</strong></em> is text interpolation syntax to access the <em>message</em> property of Vue instance. This is again similar to AngularJS 1.* concept.</li>\n</ol>\n<p>The <em><strong>el</strong></em> of new Vue instance should match with HTML DOM id property to kick off Vue</p>\n<h2 id=\"Step-4-VueJS-in-action\"><a href=\"#Step-4-VueJS-in-action\" class=\"headerlink\" title=\"Step 4 - VueJS in action\"></a>Step 4 - VueJS in action</h2><p>Run the application, navigate to HTML page where Vue is defined to see it action. [caption id=”attachment_648” align=”aligncenter” width=”586”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2017/08/vue-running.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2017/08/vue-running.png\" alt=\"vuejs\"></a> Running VueJS in ASP.NET MVC 5[/caption]</p>\n<h2 id=\"Step-5-Vue’s-Reactive-nature\"><a href=\"#Step-5-Vue’s-Reactive-nature\" class=\"headerlink\" title=\"Step 5 - Vue’s Reactive nature\"></a>Step 5 - Vue’s Reactive nature</h2><p>When running the application, open console window of the browser (Chrome in this example), you can play with <em>message</em> property of Vue instance as shown in the image below. As soon as you change <em>message</em> property value, the DOM gets changed automatically [caption id=”attachment_649” align=”aligncenter” width=”957”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2017/08/vue-reactive.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2017/08/vue-reactive.png\" alt=\"vuejs\"></a> Reactive nature of VueJS[/caption]  </p>\n<blockquote>\n<p>The data and the DOM are now linked, and everything is now <strong>reactive</strong>.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>VueJS (Vue) 2 is gaining popularity as lightweight, powerful web based UI framework, official website defines it as</p>\n<blockquote>\n<p>Vue is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable.</p>\n</blockquote>\n<p>It’s quite easy to work VueJS and ASP.NET MVC 5, let’s check out in this article Use either Visual Studio 2017/ 2015 (any edition) for working (integrating) Vue with MVC 5. You can either use any existing or create a brand new ASP.NET MVC 5.</p>\n<h2 id=\"Step-1-Install-VueJS-using-NuGet\"><a href=\"#Step-1-Install-VueJS-using-NuGet\" class=\"headerlink\" title=\"Step 1 - Install VueJS using NuGet\"></a>Step 1 - Install VueJS using NuGet</h2><p>VueJS can be used either through CDN or by using NuGet package manager in ASP.NET MVC 5. Let’s use NuGet,  right click on the project to open NuGet package manager window, search for <strong>Vue</strong> and then install it. [caption id=”attachment_647” align=”aligncenter” width=”987”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2017/08/vue-nuget.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2017/08/vue-nuget.png\" alt=\"vuejs\"></a> Add VueJS using NuGet[/caption] Once installed, it will add two files <strong><em>vue.js and vue.min.js</em></strong> (minified version) in the <em>Scripts</em> folder</p>\n<h2 id=\"Step-2-Add-VueJS-script-in-Layout-page\"><a href=\"#Step-2-Add-VueJS-script-in-Layout-page\" class=\"headerlink\" title=\"Step 2 - Add VueJS script in _Layout page\"></a>Step 2 - Add VueJS script in _Layout page</h2><p>Just like other JavaScript pages, refer Vue in the _layout cshtml page, so that its available across the application.</p>\n<p>&lt;!DOCTYPE html&gt;</p>\n<html><br><head><br>    <meta charset=\"utf-8\"><br>    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><br>    <title>@ViewBag.Title - My ASP.NET Application</title><br>    @Styles.Render(“~/Content/css”)<br>    @Scripts.Render(“~/bundles/modernizr”)<br>    <script src=\"~/Scripts/vue.min.js\"></script><br></head><br><body><br>&lt;!-- Body of MVC layout –&gt;<br></body><br></html>\n\n<p>We can bundle Vue in BundleConfig.cs, but here let’s keep it simple.</p>\n<h2 id=\"Step-3-First-VueJS-code\"><a href=\"#Step-3-First-VueJS-code\" class=\"headerlink\" title=\"Step 3 - First VueJS code\"></a>Step 3 - First VueJS code</h2><p>Open About.cshtml file (any cshtml), copy below code to declarative render on HTML page.</p>\n<h3>VueJS 2 in ASP.NET MVC 5</h3>\n\n<p><div id=\"aboutPage\"><br>    { { message }}<br></div></p>\n<script>\n    var aboutPage = new Vue({\n        el: '#aboutPage',\n        data: {\n            message: 'Hello Vue! in About Page'\n        }\n    });\n</script>\n\n<p>Breaking down the above code</p>\n<ol>\n<li><strong>aboutPage</strong> is just usual DIV tag of HTML.</li>\n<li><em><strong>new Vue()</strong></em> is initializing the VueJS.</li>\n<li>The initialized Vue object execution scope is limited to <em>aboutPage</em> DIV element. This is achieved by assigning reserved keyword <strong>el</strong> to the id of the div element. This is similar to AngularJS 1.* concept.</li>\n<li>To render anything on UI, we are using <strong>data</strong> keyword as JS object. The <em>data</em> object has <em><strong>message</strong></em> property to be displayed inside DIV tag.</li>\n<li><em><strong>{ {message}}</strong></em> is text interpolation syntax to access the <em>message</em> property of Vue instance. This is again similar to AngularJS 1.* concept.</li>\n</ol>\n<p>The <em><strong>el</strong></em> of new Vue instance should match with HTML DOM id property to kick off Vue</p>\n<h2 id=\"Step-4-VueJS-in-action\"><a href=\"#Step-4-VueJS-in-action\" class=\"headerlink\" title=\"Step 4 - VueJS in action\"></a>Step 4 - VueJS in action</h2><p>Run the application, navigate to HTML page where Vue is defined to see it action. [caption id=”attachment_648” align=”aligncenter” width=”586”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2017/08/vue-running.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2017/08/vue-running.png\" alt=\"vuejs\"></a> Running VueJS in ASP.NET MVC 5[/caption]</p>\n<h2 id=\"Step-5-Vue’s-Reactive-nature\"><a href=\"#Step-5-Vue’s-Reactive-nature\" class=\"headerlink\" title=\"Step 5 - Vue’s Reactive nature\"></a>Step 5 - Vue’s Reactive nature</h2><p>When running the application, open console window of the browser (Chrome in this example), you can play with <em>message</em> property of Vue instance as shown in the image below. As soon as you change <em>message</em> property value, the DOM gets changed automatically [caption id=”attachment_649” align=”aligncenter” width=”957”]<a href=\"http://www.mithunvp.com/wp-content/uploads/2017/08/vue-reactive.png\"><img src=\"http://www.mithunvp.com/wp-content/uploads/2017/08/vue-reactive.png\" alt=\"vuejs\"></a> Reactive nature of VueJS[/caption]  </p>\n<blockquote>\n<p>The data and the DOM are now linked, and everything is now <strong>reactive</strong>.</p>\n</blockquote>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Jul 11 2018 01:40:49 GMT+0530 (India Standard Time)","title":"Working with VueJS 2 and ASP.NET MVC 5 in Visual Studio","path":"working-vuejs-asp-net-mvc-5-visual-studio/","eyeCatchImage":null,"excerpt":null,"date":"2017-08-16T13:06:13.000Z","pv":0,"totalPV":0,"categories":"Uncategorized","tags":["ASP.NET MVC 5","VueJS 2"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"cjjt034ve0000s4tjzv7rysxs","category_id":"cjjt034ve0003s4tjbtejqzs8","_id":"cjjt034vu000ds4tjrn5uuigm"},{"post_id":"cjjt034ve0002s4tjnmuno0jr","category_id":"cjjt034ve0008s4tj7f044hqe","_id":"cjjt034vu000js4tjdbbk3hos"},{"post_id":"cjjt034vu000os4tj8792561i","category_id":"cjjt034vu000es4tjsrbkhzwr","_id":"cjjt034we000zs4tj037jx4kl"},{"post_id":"cjjt034vu000bs4tjkd26dzrq","category_id":"cjjt034ve0003s4tjbtejqzs8","_id":"cjjt034wm001bs4tjr0i52g06"},{"post_id":"cjjt034vu000bs4tjkd26dzrq","category_id":"cjjt034we000ws4tjvvg6x3pp","_id":"cjjt034wm001fs4tjcoxhexsn"},{"post_id":"cjjt034vu000cs4tjbp0fdnux","category_id":"cjjt034vu000es4tjsrbkhzwr","_id":"cjjt034wm001hs4tjuohdq713"},{"post_id":"cjjt034vu000is4tj7uz0ff6z","category_id":"cjjt034vu000es4tjsrbkhzwr","_id":"cjjt034xg001ys4tjnrql7jea"},{"post_id":"cjjt034vu000is4tj7uz0ff6z","category_id":"cjjt034wm001is4tj0jsuk8sg","_id":"cjjt034xg0023s4tjz8oh9ftz"},{"post_id":"cjjt034x5001rs4tjzigmv38u","category_id":"cjjt034ve0003s4tjbtejqzs8","_id":"cjjt034xm0025s4tjjlwymcxf"},{"post_id":"cjjt034x5001us4tjgsajzd8x","category_id":"cjjt034vu000es4tjsrbkhzwr","_id":"cjjt034xm0028s4tj40fytgco"},{"post_id":"cjjt034vu000ms4tjvhn6k3xx","category_id":"cjjt034x5001ts4tjuqyhp825","_id":"cjjt034xm002as4tjf592ziyz"},{"post_id":"cjjt034xg0021s4tj2x1y9t6z","category_id":"cjjt034ve0003s4tjbtejqzs8","_id":"cjjt034xm002es4tjnmf8a8gc"},{"post_id":"cjjt034ve0006s4tj2vxan715","category_id":"cjjt034vu000es4tjsrbkhzwr","_id":"cjjt034xm002gs4tjt7upx2fn"},{"post_id":"cjjt034ve0006s4tj2vxan715","category_id":"cjjt034wm001is4tj0jsuk8sg","_id":"cjjt034xm002js4tjtpc7fqw3"},{"post_id":"cjjt034xg0024s4tji5uelp2e","category_id":"cjjt034x5001ts4tjuqyhp825","_id":"cjjt034xm002ks4tjcomtx5jm"},{"post_id":"cjjt034wa000ss4tjzg3d4gxm","category_id":"cjjt034vu000es4tjsrbkhzwr","_id":"cjjt034xm002ns4tjuy5ckb53"},{"post_id":"cjjt034wa000ss4tjzg3d4gxm","category_id":"cjjt034wm001is4tj0jsuk8sg","_id":"cjjt034xm002os4tj3uaip0w6"},{"post_id":"cjjt034wa000us4tjpvgo3ong","category_id":"cjjt034wm001as4tja2rbkv0a","_id":"cjjt034xm002qs4tj6wwgt5cv"},{"post_id":"cjjt034ve0007s4tj0wl6f0h0","category_id":"cjjt034wa000ps4tjzvj8ytso","_id":"cjjt034xm002ts4tja466qg2b"},{"post_id":"cjjt034ve0007s4tj0wl6f0h0","category_id":"cjjt034xm002hs4tjxrri0dxt","_id":"cjjt034xm002ws4tjj9hykckp"},{"post_id":"cjjt034vu000gs4tjk1rk5xov","category_id":"cjjt034wm001as4tja2rbkv0a","_id":"cjjt034y8003ls4tjw1xspp1k"},{"post_id":"cjjt034vu000gs4tjk1rk5xov","category_id":"cjjt034y3003fs4tj0quk7o36","_id":"cjjt034y8003os4tjlinljk3y"},{"post_id":"cjjt034ve0005s4tjzi0c5iou","category_id":"cjjt034vu000es4tjsrbkhzwr","_id":"cjjt034y8003ys4tju16iobc4"},{"post_id":"cjjt034ve0005s4tjzi0c5iou","category_id":"cjjt034wm001is4tj0jsuk8sg","_id":"cjjt034y80040s4tjy3y3owsg"},{"post_id":"cjjt034ve0005s4tjzi0c5iou","category_id":"cjjt034y8003rs4tj77nb1rgs","_id":"cjjt034y80042s4tjip2fn7n8"},{"post_id":"cjjt034x5001ms4tjvusuji96","category_id":"cjjt034wm001as4tja2rbkv0a","_id":"cjjt034y80045s4tj24tao723"},{"post_id":"cjjt034x5001ms4tjvusuji96","category_id":"cjjt034y8003vs4tj3w0uijog","_id":"cjjt034y80048s4tjkbnjtp1g"},{"post_id":"cjjt034x5001qs4tjuwfsj23r","category_id":"cjjt034x5001ts4tjuqyhp825","_id":"cjjt034y8004bs4tjm1uoao96"},{"post_id":"cjjt034x5001ws4tjgq5zwozm","category_id":"cjjt034wa000ps4tjzvj8ytso","_id":"cjjt034y8004es4tjggnh1jdd"},{"post_id":"cjjt034x5001ws4tjgq5zwozm","category_id":"cjjt034y80043s4tj7mymtcdv","_id":"cjjt034y8004hs4tjvwcxwxzs"},{"post_id":"cjjt034wm0019s4tjqcctk679","category_id":"cjjt034wm001as4tja2rbkv0a","_id":"cjjt034yn004ks4tjuv2a7c1f"},{"post_id":"cjjt034wm0019s4tjqcctk679","category_id":"cjjt034y8004as4tj1dvuy3m5","_id":"cjjt034yn004ms4tjutwkvg3u"},{"post_id":"cjjt034wm001gs4tjf9ccl21k","category_id":"cjjt034x5001ts4tjuqyhp825","_id":"cjjt034yq004os4tju7urfgdi"},{"post_id":"cjjt034wm001gs4tjf9ccl21k","category_id":"cjjt034y8004fs4tjs60b5uvs","_id":"cjjt034yq004ps4tj15rn9adx"},{"post_id":"cjjt034zj004xs4tjqhh4xp0p","category_id":"cjjt034ve0008s4tj7f044hqe","_id":"cjjt034zj004zs4tj0oagvh6w"},{"post_id":"cjjt034wm0014s4tj0alofmj5","category_id":"cjk2vayus00029ctjzffdt7ev","_id":"cjk2vayus00039ctj3x7x5u4q"},{"post_id":"cjjt034we0011s4tj6slxo3uf","category_id":"cjk2vayus00029ctjzffdt7ev","_id":"cjk2vbcxp00049ctjhe4tp49g"},{"post_id":"cjjt034x2001ks4tjt12f9mds","category_id":"cjk2vayus00029ctjzffdt7ev","_id":"cjk2vckxk00059ctjmym05ktv"},{"post_id":"cjjt034we000ys4tjew45nqxy","category_id":"cjk2vayus00029ctjzffdt7ev","_id":"cjk2vufvr00079ctjurubbf48"},{"post_id":"cjjt034wm0017s4tjdvgfj2ou","category_id":"cjk2w3rwc00099ctjr6nqlaqj","_id":"cjk2w3rwg000c9ctj668ft8li"},{"post_id":"cjjt034wm001es4tjppmk4k3r","category_id":"cjk2vayus00029ctjzffdt7ev","_id":"cjk2wa64b000d9ctjmpa3q02y"}],"PostTag":[{"post_id":"cjjt034ve0000s4tjzv7rysxs","tag_id":"cjjt034ve0004s4tjwow79qhk","_id":"cjjt034vu000as4tjl3l3y6yi"},{"post_id":"cjjt034vu000cs4tjbp0fdnux","tag_id":"cjjt034ve0009s4tj71yvw1qr","_id":"cjjt034vu000hs4tjzpfbk66h"},{"post_id":"cjjt034vu000is4tj7uz0ff6z","tag_id":"cjjt034ve0009s4tj71yvw1qr","_id":"cjjt034vu000ns4tj95eld19s"},{"post_id":"cjjt034vu000is4tj7uz0ff6z","tag_id":"cjjt034vu000fs4tj3ar78sdq","_id":"cjjt034wa000qs4tjbnhat2t9"},{"post_id":"cjjt034ve0005s4tjzi0c5iou","tag_id":"cjjt034ve0009s4tj71yvw1qr","_id":"cjjt034wa000ts4tjsi7uklhm"},{"post_id":"cjjt034ve0005s4tjzi0c5iou","tag_id":"cjjt034vu000fs4tj3ar78sdq","_id":"cjjt034we000vs4tj9rgqna15"},{"post_id":"cjjt034ve0005s4tjzi0c5iou","tag_id":"cjjt034vu000ls4tj3i3wy1p7","_id":"cjjt034we0010s4tjknsbagzj"},{"post_id":"cjjt034wa000ss4tjzg3d4gxm","tag_id":"cjjt034ve0009s4tj71yvw1qr","_id":"cjjt034wm0012s4tj2lj6czwm"},{"post_id":"cjjt034wa000ss4tjzg3d4gxm","tag_id":"cjjt034vu000fs4tj3ar78sdq","_id":"cjjt034wm0016s4tjvkq4gm17"},{"post_id":"cjjt034ve0006s4tj2vxan715","tag_id":"cjjt034ve0009s4tj71yvw1qr","_id":"cjjt034wm0018s4tjyrn5v2by"},{"post_id":"cjjt034ve0006s4tj2vxan715","tag_id":"cjjt034vu000fs4tj3ar78sdq","_id":"cjjt034wm001ds4tjuvt2rlu8"},{"post_id":"cjjt034ve0007s4tj0wl6f0h0","tag_id":"cjjt034wm0013s4tjuekgjbg8","_id":"cjjt034x4001ls4tj8dflmim2"},{"post_id":"cjjt034ve0007s4tj0wl6f0h0","tag_id":"cjjt034wm001cs4tjxjmz0bjm","_id":"cjjt034x5001ns4tjwtyn9i66"},{"post_id":"cjjt034vu000bs4tjkd26dzrq","tag_id":"cjjt034vu000fs4tj3ar78sdq","_id":"cjjt034x5001vs4tjmkj4tofi"},{"post_id":"cjjt034vu000bs4tjkd26dzrq","tag_id":"cjjt034vu000ls4tj3i3wy1p7","_id":"cjjt034xg001xs4tj5vtr23fm"},{"post_id":"cjjt034x5001rs4tjzigmv38u","tag_id":"cjjt034vu000fs4tj3ar78sdq","_id":"cjjt034xg0022s4tj1kq3mjbw"},{"post_id":"cjjt034vu000gs4tjk1rk5xov","tag_id":"cjjt034x5001ss4tj88ey0lk8","_id":"cjjt034xm0029s4tjw7jhakvw"},{"post_id":"cjjt034vu000gs4tjk1rk5xov","tag_id":"cjjt034xg001zs4tjb67uuauh","_id":"cjjt034xm002bs4tj8mvdvbz3"},{"post_id":"cjjt034vu000ms4tjvhn6k3xx","tag_id":"cjjt034xm0027s4tjuy58g5mr","_id":"cjjt034xm002fs4tj9frbhpbe"},{"post_id":"cjjt034wa000us4tjpvgo3ong","tag_id":"cjjt034x5001ss4tj88ey0lk8","_id":"cjjt034xm002ss4tjf3ibpdkk"},{"post_id":"cjjt034wa000us4tjpvgo3ong","tag_id":"cjjt034xm002is4tjdh4ss1k5","_id":"cjjt034xm002us4tjlxetoj13"},{"post_id":"cjjt034wa000us4tjpvgo3ong","tag_id":"cjjt034xm002ms4tj4m6di2dk","_id":"cjjt034xm002ys4tj4myaxpmr"},{"post_id":"cjjt034we000ys4tjew45nqxy","tag_id":"cjjt034xm002is4tjdh4ss1k5","_id":"cjjt034xm0034s4tj63s0428m"},{"post_id":"cjjt034wm0017s4tjdvgfj2ou","tag_id":"cjjt034xm0036s4tjmf1ecw94","_id":"cjjt034y3003ds4tjt3j5akrd"},{"post_id":"cjjt034wm0019s4tjqcctk679","tag_id":"cjjt034x5001ss4tj88ey0lk8","_id":"cjjt034y3003gs4tj8pv1qm8e"},{"post_id":"cjjt034wm001es4tjppmk4k3r","tag_id":"cjjt034y3003es4tj0envfdrd","_id":"cjjt034y8003ns4tjidpdo07t"},{"post_id":"cjjt034wm001es4tjppmk4k3r","tag_id":"cjjt034y7003is4tj9lksnh8b","_id":"cjjt034y8003ps4tjt23cfm0o"},{"post_id":"cjjt034wm001gs4tjf9ccl21k","tag_id":"cjjt034xm0027s4tjuy58g5mr","_id":"cjjt034y8003ss4tjrtza8v1u"},{"post_id":"cjjt034x2001ks4tjt12f9mds","tag_id":"cjjt034xm002is4tjdh4ss1k5","_id":"cjjt034y8003ws4tjphixa9kb"},{"post_id":"cjjt034x5001ms4tjvusuji96","tag_id":"cjjt034x5001ss4tj88ey0lk8","_id":"cjjt034y80044s4tjqvuvx95p"},{"post_id":"cjjt034x5001ms4tjvusuji96","tag_id":"cjjt034xm0027s4tjuy58g5mr","_id":"cjjt034y80046s4tjsnjgubb0"},{"post_id":"cjjt034x5001qs4tjuwfsj23r","tag_id":"cjjt034xm0027s4tjuy58g5mr","_id":"cjjt034y80049s4tju1k5wy6b"},{"post_id":"cjjt034x5001us4tjgsajzd8x","tag_id":"cjjt034ve0009s4tj71yvw1qr","_id":"cjjt034y8004ds4tj9firmxnd"},{"post_id":"cjjt034x5001us4tjgsajzd8x","tag_id":"cjjt034xm0036s4tjmf1ecw94","_id":"cjjt034y8004gs4tjnk7g5623"},{"post_id":"cjjt034x5001ws4tjgq5zwozm","tag_id":"cjjt034wm0013s4tjuekgjbg8","_id":"cjjt034yn004js4tj4t0s88xq"},{"post_id":"cjjt034x5001ws4tjgq5zwozm","tag_id":"cjjt034y8004cs4tjhtzxvkar","_id":"cjjt034yn004ls4tj1wrmg31r"},{"post_id":"cjjt034xg0021s4tj2x1y9t6z","tag_id":"cjjt034vu000fs4tj3ar78sdq","_id":"cjjt034yr004rs4tj8v8hkij0"},{"post_id":"cjjt034xg0021s4tj2x1y9t6z","tag_id":"cjjt034xm002is4tjdh4ss1k5","_id":"cjjt034yr004ss4tji6ewz5ws"},{"post_id":"cjjt034xg0021s4tj2x1y9t6z","tag_id":"cjjt034yn004ns4tj02tc5h95","_id":"cjjt034yr004us4tjude1e5y6"},{"post_id":"cjjt034xg0024s4tji5uelp2e","tag_id":"cjjt034yr004qs4tjoytiym13","_id":"cjjt034yr004vs4tjmgcphl7j"},{"post_id":"cjjt034xg0024s4tji5uelp2e","tag_id":"cjjt034xm0027s4tjuy58g5mr","_id":"cjjt034yt004ws4tjkrtirk2w"},{"post_id":"cjjt034zj004xs4tjqhh4xp0p","tag_id":"cjjt034xm0036s4tjmf1ecw94","_id":"cjjt034zj0050s4tj825kat8h"},{"post_id":"cjjt034zj004xs4tjqhh4xp0p","tag_id":"cjjt034zj004ys4tjy129khsk","_id":"cjjt034zj0051s4tjsfyz3dln"},{"post_id":"cjjt034we000ys4tjew45nqxy","tag_id":"cjk2vufvn00069ctj7gjmk3xr","_id":"cjk2vufvr00089ctjugvsyfrl"},{"post_id":"cjjt034wm0017s4tjdvgfj2ou","tag_id":"cjk2w3rwc000a9ctjnj2pvqw0","_id":"cjk2w3rwg000b9ctjxcrpltht"}],"Tag":[{"name":".Net Core","_id":"cjjt034ve0004s4tjwow79qhk"},{"name":"Angular2","_id":"cjjt034ve0009s4tj71yvw1qr"},{"name":"Asp.NET Core 1.0","_id":"cjjt034vu000fs4tj3ar78sdq"},{"name":"Visual Studio Code","_id":"cjjt034vu000ls4tj3i3wy1p7"},{"name":"Angular","_id":"cjjt034wm0013s4tjuekgjbg8"},{"name":"MVC 5","_id":"cjjt034wm001cs4tjxjmz0bjm"},{"name":"ASP.NET Core 2","_id":"cjjt034x5001ss4tj88ey0lk8"},{"name":"EF Core 2","_id":"cjjt034xg001zs4tjb67uuauh"},{"name":"TypeScript","_id":"cjjt034xm0027s4tjuy58g5mr"},{"name":"C#","_id":"cjjt034xm002is4tjdh4ss1k5"},{"name":"Visual Studio","_id":"cjjt034xm002ms4tj4m6di2dk"},{"name":"Async Await","_id":"cjjt034xm002rs4tjb5ir0x6r"},{"name":"ASP.NET MVC 5","_id":"cjjt034xm0036s4tjmf1ecw94"},{"name":"Sql Server","_id":"cjjt034y3003es4tj0envfdrd"},{"name":"Windows 10","_id":"cjjt034y7003is4tj9lksnh8b"},{"name":"asp.net core","_id":"cjjt034y8004cs4tjhtzxvkar"},{"name":"middleware","_id":"cjjt034yn004ns4tj02tc5h95"},{"name":"ASP.NET MVC5","_id":"cjjt034yr004qs4tjoytiym13"},{"name":"VueJS 2","_id":"cjjt034zj004ys4tjy129khsk"},{"name":"AsyncAwait","_id":"cjk2vufvn00069ctj7gjmk3xr"},{"name":"ASP.NET Core","_id":"cjk2w3rwc000a9ctjnj2pvqw0"}]}}